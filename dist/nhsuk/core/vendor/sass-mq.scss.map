{"version":3,"sources":["../../../../src/nhsuk/core/vendor/sass-mq.scss"],"names":[],"mappings":"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","file":"sass-mq.scss","sourcesContent":["@use \"../settings/warnings\" as *;\n\n// mq() v6.0.0\n// sass-mq/sass-mq\n\n@use \"sass:list\";\n@use \"sass:math\";\n@use \"sass:map\";\n@use \"sass:meta\";\n@use \"sass:string\";\n\n/// Breakpoint list\n///\n/// Name your breakpoints in a way that creates a ubiquitous language\n/// across team members. It will improve communication between\n/// stakeholders, designers, developers, and testers.\n///\n/// @type Map\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint Full documentation and examples\n$mq-breakpoints: (\n  mobile: 320px,\n  tablet: 740px,\n  desktop: 980px,\n  wide: 1300px\n) !default;\n\n/// Show breakpoints in the top right corner\n///\n/// If you want to display the currently active breakpoint in the top\n/// right corner of your site during development, add the breakpoints\n/// to this list, ordered by width. For example: (mobile, tablet, desktop).\n///\n/// @example scss\n///   @use 'path/to/mq' with ($mq-show-breakpoints: ('mobile', 'tablet', 'desktop'));\n///\n///\n/// @type map\n$mq-show-breakpoints: () !default;\n\n/// Customize the media type (for example: `@media screen` or `@media print`)\n/// By default sass-mq uses an \"all\" media type (`@media all and …`)\n///\n/// If you want to overried the media type, you can use this option.\n/// @example scss\n///   @use 'path/to/mq' with ($media-type: 'screen');\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#changing-media-type Full documentation and example\n$mq-media-type: all !default;\n\n/// Convert pixels to ems\n///\n/// @param {Number} $px - value to convert\n///\n/// @example scss\n///  $font-size-in-ems: px2em(16px);\n///  p { font-size: px2em(16px); }\n///\n/// @returns {Number}\n\n@function px2em($px) {\n  @if math.is-unitless($px) {\n    @warn \"Assuming #{$px} to be in pixels, attempting to convert it into pixels.\";\n    @return px2em($px * 1px);\n  }\n  // if $px is compatible with em units, then return value unchanged\n  @if math.compatible($px, 1em) {\n    @return $px;\n  }\n  @return math.div($px, 16px) * 1em;\n}\n\n/// Get a breakpoint's width\n///\n/// @param {String} $name - Name of the breakpoint. One of $mq-breakpoints\n///\n/// @example scss\n///  $tablet-width: get-breakpoint-width(tablet);\n///  @media (min-width: get-breakpoint-width(tablet)) {}\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @returns {Number} Value in pixels\n@function get-breakpoint-width($name, $breakpoints: $mq-breakpoints) {\n  @if map.has-key($breakpoints, $name) {\n    @return map.get($breakpoints, $name);\n  } @else {\n    @warn \"Breakpoint #{$name} wasn't found in $breakpoints.\";\n    @return null;\n  }\n}\n\n/// Media Query mixin\n///\n/// @param {String | Boolean} $from [false] - One of $mq-breakpoints\n/// @param {String | Boolean} $until [false] - One of $mq-breakpoints\n/// @param {String | Boolean} $and [false] - Additional media query parameters\n/// @param {String} $media-type [$mq-media-type] - Media type: screen, print…\n///\n/// @ignore Undocumented API, for advanced use only:\n/// @ignore @param {Map} $breakpoints [$mq-breakpoints]\n///\n/// @param {Boolean} $silence-warning [false] - Whether to silence deprecation\n/// warning to use nhsuk-media-query instead\n///\n/// @content styling rules, wrapped into a @media query when $responsive is true\n///\n/// @requires {Variable} $mq-media-type\n/// @requires {Variable} $mq-breakpoints\n/// @requires {function} px2em\n/// @requires {function} get-breakpoint-width\n///\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-on-default Full documentation and examples\n///\n/// @example scss\n///  @use 'path/to/mq' as *;\n///  .element {\n///    @include mq($from: mobile) {\n///      color: red;\n///    }\n///    @include mq($until: tablet) {\n///      color: blue;\n///    }\n///    @include mq(mobile, tablet) {\n///      color: green;\n///    }\n///    @include mq($from: tablet, $and: '(orientation: landscape)') {\n///      color: teal;\n///    }\n///    @include mq(950px) {\n///      color: hotpink;\n///    }\n///    @include mq(tablet, $media-type: screen) {\n///      color: hotpink;\n///    }\n///    // Advanced use:\n///    $my-breakpoints: (L: 900px, XL: 1200px);\n///    @include mq(L, $breakpoints: $my-breakpoints) {\n///      color: hotpink;\n///    }\n///  }\n@mixin mq(\n  $from: false,\n  $until: false,\n  $and: false,\n  $media-type: $mq-media-type,\n  $breakpoints: $mq-breakpoints,\n  $silence-warning: false\n) {\n  $min-width: 0;\n  $max-width: 0;\n  $media-query: \"\";\n\n  @if not $silence-warning {\n    @include nhsuk-warning(\"mq\", \"mq is deprecated. Use nhsuk-media-query instead.\");\n  }\n\n  // From: this breakpoint (inclusive)\n  @if $from {\n    @if meta.type-of($from) == number {\n      $min-width: px2em($from);\n    } @else {\n      $min-width: px2em(get-breakpoint-width($from, $breakpoints));\n    }\n  }\n\n  // Until: that breakpoint (exclusive)\n  @if $until {\n    @if meta.type-of($until) == number {\n      $max-width: px2em($until);\n    } @else {\n      $max-width: px2em(get-breakpoint-width($until, $breakpoints)) - 0.01em;\n    }\n  }\n\n  @if $min-width != 0 {\n    $media-query: \"#{$media-query} and (min-width: #{$min-width})\";\n  }\n  @if $max-width != 0 {\n    $media-query: \"#{$media-query} and (max-width: #{$max-width})\";\n  }\n  @if $and {\n    $media-query: \"#{$media-query} and #{$and}\";\n  }\n\n  // Remove unnecessary media query prefix 'all and '\n  @if ($media-type == \"all\" and $media-query != \"\") {\n    $media-type: \"\";\n    $media-query: string.slice(string.unquote($media-query), 6);\n  }\n\n  @media #{$media-type + $media-query} {\n    @content;\n  }\n}\n\n/// Quick sort\n///\n/// @author Sam Richards\n/// @access private\n/// @param {List} $list - List to sort\n/// @returns {List} Sorted List\n@function _quick-sort($list) {\n  $less: ();\n  $equal: ();\n  $large: ();\n\n  @if length($list) > 1 {\n    $seed: list.nth($list, math.ceil(math.div(length($list), 2)));\n\n    @each $item in $list {\n      @if ($item == $seed) {\n        $equal: list.append($equal, $item);\n      } @else if ($item < $seed) {\n        $less: list.append($less, $item);\n      } @else if ($item > $seed) {\n        $large: list.append($large, $item);\n      }\n    }\n\n    @return join(join(_quick-sort($less), $equal), _quick-sort($large));\n  }\n\n  @return $list;\n}\n\n/// Sort a map by values (works with numbers only)\n///\n/// @access private\n/// @param {Map} $map - Map to sort\n/// @returns {Map} Map sorted by value\n@function _map-sort-by-value($map) {\n  $map-sorted: ();\n  $map-keys: map.keys($map);\n  $map-values: map.values($map);\n  $map-values-sorted: _quick-sort($map-values);\n\n  // Reorder key/value pairs based on key values\n  @each $value in $map-values-sorted {\n    $index: index($map-values, $value);\n    $key: list.nth($map-keys, $index);\n    $map-sorted: map.merge(\n      $map-sorted,\n      (\n        $key: $value\n      )\n    );\n\n    // Unset the value in $map-values to prevent the loop\n    // from finding the same index twice\n    $map-values: list.set-nth($map-values, $index, 0);\n  }\n\n  @return $map-sorted;\n}\n\n/// Add a breakpoint\n///\n/// @param {String} $name - Name of the breakpoint\n/// @param {Number} $width - Width of the breakpoint\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @example scss\n///  @include add-breakpoint(tvscreen, 1920px);\n///  @include mq(tvscreen) {}\n@mixin add-breakpoint($name, $width) {\n  $new-breakpoint: (\n    $name: $width\n  );\n  $mq-breakpoints: map.merge($mq-breakpoints, $new-breakpoint) !global;\n  $mq-breakpoints: _map-sort-by-value($mq-breakpoints) !global;\n}\n\n/// Show the active breakpoint in the top right corner of the viewport\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint\n///\n/// @param {List} $show-breakpoints [$mq-show-breakpoints] - List of breakpoints to show in the top right corner\n/// @param {Map} $breakpoints [$mq-breakpoints] - Breakpoint names and sizes\n///\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-show-breakpoints\n///\n/// @example scss\n///  // Show breakpoints using global settings\n///  @include show-breakpoints;\n///\n///  // Show breakpoints using custom settings\n///  @include show-breakpoints((L, XL), (S: 300px, L: 800px, XL: 1200px));\n@mixin show-breakpoints($show-breakpoints: $mq-show-breakpoints, $breakpoints: $mq-breakpoints) {\n  body:before {\n    background-color: #fcf8e3;\n    border-bottom: 1px solid #fbeed5;\n    border-left: 1px solid #fbeed5;\n    color: #c09853;\n    font: small-caption;\n    padding: 3px 6px;\n    pointer-events: none;\n    position: fixed;\n    right: 0;\n    top: 0;\n    z-index: 100;\n\n    // Loop through the breakpoints that should be shown\n    @each $show-breakpoint in $show-breakpoints {\n      $width: get-breakpoint-width($show-breakpoint, $breakpoints);\n      @include mq($show-breakpoint, $breakpoints: $breakpoints) {\n        content: \"#{$show-breakpoint} ≥ #{$width} (#{px2em($width)})\";\n      }\n    }\n  }\n}\n\n@if list.length($mq-show-breakpoints) > 0 {\n  @include show-breakpoints;\n}\n"]}