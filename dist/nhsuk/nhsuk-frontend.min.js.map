{"version":3,"file":"nhsuk-frontend.min.js","sources":["../../src/nhsuk/common/closest-attribute-value.mjs","../../src/nhsuk/common/nhsuk-frontend-version.mjs","../../src/nhsuk/common/index.mjs","../../src/nhsuk/common/configuration/normalise-string.mjs","../../src/nhsuk/common/configuration/extract-config-by-namespace.mjs","../../src/nhsuk/common/configuration/merge-configs.mjs","../../src/nhsuk/errors/index.mjs","../../src/nhsuk/common/configuration/normalise-options.mjs","../../src/nhsuk/component.mjs","../../src/nhsuk/configurable-component.mjs","../../src/nhsuk/common/configuration/normalise-dataset.mjs","../../src/nhsuk/components/button/button.mjs","../../src/nhsuk/i18n.mjs","../../src/nhsuk/components/character-count/character-count.mjs","../../src/nhsuk/common/configuration/validate-config.mjs","../../src/nhsuk/components/checkboxes/checkboxes.mjs","../../src/nhsuk/components/error-summary/error-summary.mjs","../../src/nhsuk/components/file-upload/file-upload.mjs","../../src/nhsuk/components/header/header.mjs","../../src/nhsuk/components/notification-banner/notification-banner.mjs","../../src/nhsuk/components/radios/radios.mjs","../../src/nhsuk/components/skip-link/skip-link.mjs","../../src/nhsuk/components/tabs/tabs.mjs","../../src/nhsuk/index.mjs"],"sourcesContent":["/**\n * Returns the value of the given attribute closest to the given element (including itself)\n *\n * @param {Element} $element - The element to start walking the DOM tree up\n * @param {string} attributeName - The name of the attribute\n * @returns {string | null} Attribute value\n */\nexport function closestAttributeValue($element, attributeName) {\n  const $closestElementWithAttribute = $element.closest(`[${attributeName}]`)\n  return $closestElementWithAttribute\n    ? $closestElementWithAttribute.getAttribute(attributeName)\n    : null\n}\n","/*\n * This variable is automatically overwritten during builds and releases.\n * It doesn't need to be updated manually.\n */\n\n/**\n * NHS.UK frontend release version\n *\n * {@link https://github.com/nhsuk/nhsuk-frontend/releases}\n */\nexport const version = 'development'\n","/**\n * Toggle a toggle a class on conditional content for an input based on checked state\n *\n * @param {Element | null} $input - input element\n * @param {string} className - class to toggle\n */\nexport function toggleConditionalInput($input, className) {\n  if (!$input || !($input instanceof HTMLInputElement) || !className) {\n    return\n  }\n\n  const targetId = $input.getAttribute('aria-controls')\n  if (!targetId) {\n    return\n  }\n\n  const target = document.getElementById(targetId)\n  if (!target) {\n    return\n  }\n\n  $input.setAttribute('aria-expanded', $input.checked.toString())\n  target.classList.toggle(className, !$input.checked)\n}\n\n/**\n * Get NHS.UK frontend breakpoint value from CSS custom property\n *\n * @param {string} name - Breakpoint name\n */\nexport function getBreakpoint(name) {\n  const property = `--nhsuk-breakpoint-${name}`\n\n  // Get value from `<html>` with breakpoints on CSS :root\n  const value = window\n    .getComputedStyle(document.documentElement)\n    .getPropertyValue(property)\n\n  return {\n    property,\n    value: value || undefined\n  }\n}\n\n/**\n * Move focus to element\n *\n * Sets tabindex to -1 to make the element programmatically focusable,\n * but removes it on blur as the element doesn't need to be focused again.\n *\n * Original code taken from GDS (Government Digital Service)\n * {@link https://github.com/alphagov/govuk-frontend}\n *\n * @template {HTMLElement} FocusElement\n * @param {FocusElement} $element - HTML element\n * @param {object} [options] - Handler options\n * @param {function(this: FocusElement): void} [options.onBeforeFocus] - Callback before focus\n * @param {function(this: FocusElement): void} [options.onBlur] - Callback on blur\n */\nexport function setFocus($element, options = {}) {\n  const isFocusable = $element.getAttribute('tabindex')\n\n  if (!isFocusable) {\n    $element.setAttribute('tabindex', '-1')\n  }\n\n  /**\n   * Handle element focus\n   */\n  function onFocus() {\n    $element.removeEventListener('focus', onFocus)\n    $element.addEventListener('blur', onBlur)\n  }\n\n  /**\n   * Handle element blur\n   */\n  function onBlur() {\n    $element.removeEventListener('blur', onBlur)\n\n    if (options.onBlur) {\n      options.onBlur.call($element)\n    }\n\n    if (!isFocusable) {\n      $element.removeAttribute('tabindex')\n    }\n  }\n\n  // Add listener to reset element on blur, after focus\n  $element.addEventListener('focus', onFocus)\n\n  // Focus element\n  if (options.onBeforeFocus) {\n    options.onBeforeFocus.call($element)\n  }\n\n  $element.focus()\n}\n\n/**\n * Checks if component is already initialised\n *\n * @param {Element} $root - HTML element to be checked\n * @param {string} moduleName - name of component module\n * @returns {boolean} Whether component is already initialised\n */\nexport function isInitialised($root, moduleName) {\n  return (\n    $root instanceof HTMLElement &&\n    $root.hasAttribute(`data-${moduleName}-init`)\n  )\n}\n\n/**\n * Checks if NHS.UK frontend is supported on this page\n *\n * Some browsers will load and run our JavaScript but NHS.UK frontend\n * won't be supported.\n *\n * @param {HTMLElement | null} [$scope] - (internal) `<body>` HTML element checked for browser support\n * @returns {boolean} Whether NHS.UK frontend is supported on this page\n */\nexport function isSupported($scope = document.body) {\n  if (!$scope) {\n    return false\n  }\n\n  return $scope.classList.contains('nhsuk-frontend-supported')\n}\n\n/**\n * Check for an object\n *\n * @template {Partial<Record<keyof ObjectType, unknown>>} ObjectType\n * @param {unknown | ObjectType} option - Option to check\n * @returns {option is ObjectType} Whether the option is an object\n */\nexport function isObject(option) {\n  return !!option && typeof option === 'object' && !Array.isArray(option)\n}\n\n/**\n * Check for valid scope\n *\n * @template {Element | Document} ScopeType\n * @param {unknown | ScopeType} $scope - Scope of the document to search within\n * @returns {$scope is ScopeType} Whether the scope can be queried\n */\nexport function isScope($scope) {\n  return !!$scope && ($scope instanceof Element || $scope instanceof Document)\n}\n\n/**\n * Format error message\n *\n * @param {CompatibleClass} Component - Component that threw the error\n * @param {string} message - Error message\n * @returns {string} - Formatted error message\n */\nexport function formatErrorMessage(Component, message) {\n  return `${Component.moduleName}: ${message}`\n}\n\nexport * from './closest-attribute-value.mjs'\nexport * from './nhsuk-frontend-version.mjs'\n\n/**\n * @import { CompatibleClass } from '../component.mjs'\n */\n","/**\n * Normalise string\n *\n * 'If it looks like a duck, and it quacks like a duckâ€¦' ðŸ¦†\n *\n * If the passed value looks like a boolean or a number, convert it to a boolean\n * or number.\n *\n * Designed to be used to convert config passed via data attributes (which are\n * always strings) into something sensible.\n *\n * @param {string | undefined} value - The value to normalise\n * @param {SchemaProperty} [property] - Component schema property\n * @returns Normalised data\n */\nexport function normaliseString(value, property) {\n  const trimmedValue = value ? value.trim() : ''\n\n  let output\n  let outputType = property?.type\n\n  // No schema type set? Determine automatically\n  if (!outputType) {\n    if (['true', 'false'].includes(trimmedValue)) {\n      outputType = 'boolean'\n    }\n\n    // Empty / whitespace-only strings are considered finite so we need to check\n    // the length of the trimmed string as well\n    if (trimmedValue.length > 0 && isFinite(Number(trimmedValue))) {\n      outputType = 'number'\n    }\n  }\n\n  switch (outputType) {\n    case 'boolean':\n      output = trimmedValue === 'true'\n      break\n\n    case 'number':\n      output = Number(trimmedValue)\n      break\n\n    default:\n      output = value\n  }\n\n  return output\n}\n\n/**\n * @import { SchemaProperty } from './index.mjs'\n */\n","import { isObject } from '../index.mjs'\n\nimport { normaliseString } from './normalise-string.mjs'\n\n/**\n * Extracts keys starting with a particular namespace from dataset ('data-*')\n * object, removing the namespace in the process, normalising all values\n *\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} ConfigurationType\n * @param {Schema<ConfigurationType>} schema - The schema of a component\n * @param {DOMStringMap} dataset - The object to extract key-value pairs from\n * @param {keyof ConfigurationType} namespace - The namespace to filter keys with\n * @returns {ObjectNested | undefined} Nested object with dot-separated key namespace removed\n */\nexport function extractConfigByNamespace(schema, dataset, namespace) {\n  const property = schema.properties[namespace]\n\n  // Only extract configs for object schema properties\n  if (property?.type !== 'object') {\n    return\n  }\n\n  // Add default empty config\n  const newObject = /** @type {Record<typeof namespace, ObjectNested>} */ ({\n    [namespace]: {}\n  })\n\n  for (const [key, value] of Object.entries(dataset)) {\n    /** @type {ObjectNested | ObjectNested[NestedKey]} */\n    let current = newObject\n\n    // Split the key into parts, using . as our namespace separator\n    const keyParts = key.split('.')\n\n    /**\n     * Create new level per part\n     *\n     * e.g. 'i18n.textareaDescription.other' becomes\n     * `{ i18n: { textareaDescription: { other } } }`\n     */\n    for (const [index, name] of keyParts.entries()) {\n      if (isObject(current)) {\n        // Drop down to nested object until the last part\n        if (index < keyParts.length - 1) {\n          // New nested object (optionally) replaces existing value\n          if (!isObject(current[name])) {\n            current[name] = {}\n          }\n\n          // Drop down into new or existing nested object\n          current = current[name]\n        } else if (key !== namespace) {\n          // Normalised value (optionally) replaces existing value\n          current[name] = normaliseString(value)\n        }\n      }\n    }\n  }\n\n  return newObject[namespace]\n}\n\n/**\n * Schema for component config\n *\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} ConfigurationType\n * @typedef {object} Schema\n * @property {Record<keyof ConfigurationType, SchemaProperty | undefined>} properties - Schema properties\n * @property {SchemaCondition<ConfigurationType>[]} [anyOf] - List of schema conditions\n */\n\n/**\n * Schema property for component config\n *\n * @typedef {object} SchemaProperty\n * @property {'string' | 'boolean' | 'number' | 'object'} type - Property type\n */\n\n/**\n * Schema condition for component config\n *\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} ConfigurationType\n * @typedef {object} SchemaCondition\n * @property {(keyof ConfigurationType)[]} required - List of required config fields\n * @property {string} errorMessage - Error message when required config fields not provided\n */\n\n/**\n * @typedef {keyof ObjectNested} NestedKey\n * @typedef {{ [key: string]: string | boolean | number | ObjectNested | undefined }} ObjectNested\n */\n","import { isObject } from '../index.mjs'\n\n/**\n * Config merging function\n *\n * Takes any number of objects and combines them together, with\n * greatest priority on the LAST item passed in.\n *\n * @param {...{ [key: string]: unknown }} configObjects - Config objects to merge\n * @returns A merged config object\n */\nexport function mergeConfigs(...configObjects) {\n  // Start with an empty object as our base\n  /** @type {{ [key: string]: unknown }} */\n  const formattedConfigObject = {}\n\n  // Loop through each of the passed objects\n  for (const configObject of configObjects) {\n    for (const key of Object.keys(configObject)) {\n      const option = formattedConfigObject[key]\n      const override = configObject[key]\n\n      // Push their keys one-by-one into formattedConfigObject. Any duplicate\n      // keys with object values will be merged, otherwise the new value will\n      // override the existing value.\n      if (isObject(option) && isObject(override)) {\n        formattedConfigObject[key] = mergeConfigs(option, override)\n      } else {\n        // Apply override\n        formattedConfigObject[key] = override\n      }\n    }\n  }\n\n  return formattedConfigObject\n}\n","import { formatErrorMessage } from '../common/index.mjs'\n\n/**\n * NHS.UK frontend error\n *\n * A base class for `Error`s thrown by NHS.UK frontend.\n *\n * It is meant to be extended into specific types of errors\n * to be thrown by our code.\n *\n * @example\n * ```js\n * class MissingRootError extends NHSUKFrontendError {\n *   // Setting an explicit name is important as extending the class will not\n *   // set a new `name` on the subclass. The `name` property is important\n *   // to ensure intelligible error names even if the class name gets\n *   // mangled by a minifier\n *   name = \"MissingRootError\"\n * }\n * ```\n * @abstract\n */\nexport class NHSUKFrontendError extends Error {\n  name = 'NHSUKFrontendError'\n}\n\n/**\n * Indicates that NHS.UK frontend is not supported\n */\nexport class SupportError extends NHSUKFrontendError {\n  name = 'SupportError'\n\n  /**\n   * Checks if NHS.UK frontend is supported on this page\n   *\n   * @param {HTMLElement | null} [$scope] - HTML element `<body>` checked for browser support\n   */\n  constructor($scope = document.body) {\n    const supportMessage =\n      'noModule' in HTMLScriptElement.prototype\n        ? 'NHS.UK frontend initialised without `<body class=\"nhsuk-frontend-supported\">` from template `<script>` snippet'\n        : 'NHS.UK frontend is not supported in this browser'\n\n    super(\n      $scope\n        ? supportMessage\n        : 'NHS.UK frontend initialised without `<script type=\"module\">`'\n    )\n  }\n}\n\n/**\n * Indicates that a component has received an illegal configuration\n */\nexport class ConfigError extends NHSUKFrontendError {\n  name = 'ConfigError'\n}\n\n/**\n * Indicates an issue with an element (possibly `null` or `undefined`)\n */\nexport class ElementError extends NHSUKFrontendError {\n  name = 'ElementError'\n\n  /**\n   * @param {ElementErrorOptions} options - Element error options\n   */\n  constructor(options) {\n    const { component, identifier, element, expectedType } = options\n\n    let message = identifier\n\n    // Append reason\n    message += element\n      ? ` is not of type ${expectedType ?? 'HTMLElement'}`\n      : ' not found'\n\n    // Prepend with module name (optional)\n    if (component) {\n      message = formatErrorMessage(component, message)\n    }\n\n    super(message)\n  }\n}\n\n/**\n * Indicates that a component is already initialised\n */\nexport class InitError extends NHSUKFrontendError {\n  name = 'InitError'\n\n  /**\n   * @param {CompatibleClass | string} componentOrMessage - Component or init error message\n   */\n  constructor(componentOrMessage) {\n    const message =\n      typeof componentOrMessage === 'string'\n        ? componentOrMessage\n        : formatErrorMessage(\n            componentOrMessage,\n            'Root element (`$root`) already initialised'\n          )\n\n    super(message)\n  }\n}\n\n/**\n * Element error options\n *\n * @typedef {object} ElementErrorOptions\n * @property {Element | Document | null} [element] - The element in error (optional)\n * @property {CompatibleClass} [component] - Component throwing the error (optional)\n * @property {string} identifier - An identifier that'll let the user understand which element has an error. This is whatever makes the most sense\n * @property {string} [expectedType] - The type that was expected for the identifier\n */\n\n/**\n * @import { CompatibleClass } from '../component.mjs'\n */\n","import { isObject, isScope } from '../index.mjs'\n\n/**\n * Normalise options passed to `initAll` or `createAll`\n *\n * @template {CompatibleClass} ComponentClass\n * @param {Config | CreateAllOptions<ComponentClass> | OnErrorCallback<ComponentClass> | Element | Document | null} [scopeOrOptions] - Scope of the document to search within, initialisation options or error callback function\n * @returns {CreateAllOptions<ComponentClass>} Normalised options\n */\nexport function normaliseOptions(scopeOrOptions) {\n  let /** @type {Element | Document | null} */ $scope = document\n  let /** @type {OnErrorCallback<ComponentClass> | undefined} */ onError\n\n  // Handle options object\n  if (isObject(scopeOrOptions)) {\n    const options = scopeOrOptions\n\n    // Scope must be valid or null\n    if (isScope(options.scope) || options.scope === null) {\n      $scope = options.scope\n    }\n\n    // Error handler must be a function\n    if (typeof options.onError === 'function') {\n      onError = options.onError\n    }\n  }\n\n  if (isScope(scopeOrOptions)) {\n    $scope = scopeOrOptions\n  } else if (scopeOrOptions === null) {\n    $scope = null\n  } else if (typeof scopeOrOptions === 'function') {\n    onError = scopeOrOptions\n  }\n\n  return {\n    scope: $scope,\n    onError\n  }\n}\n\n/**\n * @import { CompatibleClass } from '../../component.mjs'\n * @import { Config, CreateAllOptions, OnErrorCallback } from '../../index.mjs'\n */\n","/* eslint-disable es-x/no-global-this */\n\nimport { isInitialised, isSupported } from './common/index.mjs'\nimport { ElementError, InitError, SupportError } from './errors/index.mjs'\n\nconst _self =\n  typeof globalThis !== 'undefined'\n    ? globalThis // Modern browsers, Node.js\n    : self // Old browsers, web workers\n\n/**\n * Base component class\n *\n * Centralises the behaviours shared by our components\n *\n * @abstract\n * @template {Element} [RootElementType=HTMLElement]\n */\nexport class Component {\n  /**\n   * @type {typeof Element}\n   */\n  static elementType = _self.HTMLElement\n\n  /**\n   * @type {RootElementType}\n   */\n  $root\n\n  /**\n   * Constructs a new component, validating that NHS.UK frontend is supported\n   *\n   * @param {Element | null} $root - HTML element to use for component\n   */\n  constructor($root) {\n    const childConstructor = /** @type {ComponentConstructor} */ (\n      this.constructor\n    )\n\n    if (!$root || !($root instanceof childConstructor.elementType)) {\n      throw new ElementError({\n        element: $root,\n        component: childConstructor,\n        identifier: 'Root element (`$root`)',\n        expectedType: childConstructor.elementType.name\n      })\n    }\n\n    this.$root = /** @type {RootElementType} */ ($root)\n\n    childConstructor.checkSupport()\n\n    this.checkInitialised()\n\n    const { moduleName } = childConstructor\n    this.$root.setAttribute(`data-${moduleName}-init`, '')\n  }\n\n  /**\n   * Validates whether component is already initialised\n   *\n   * @throws {InitError} when component is already initialised\n   */\n  checkInitialised() {\n    const childConstructor = /** @type {ComponentConstructor} */ (\n      this.constructor\n    )\n\n    if (isInitialised(this.$root, childConstructor.moduleName)) {\n      throw new InitError(childConstructor)\n    }\n  }\n\n  /**\n   * Validates whether components are supported\n   *\n   * @throws {SupportError} when the components are not supported\n   */\n  static checkSupport() {\n    if (!isSupported()) {\n      throw new SupportError()\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes\n   */\n  static moduleName = 'nhsuk-component'\n}\n\n/* eslint-disable jsdoc/valid-types --\n * `{new(...args: any[] ): any}` is not recognised as valid\n * https://github.com/gajus/eslint-plugin-jsdoc/issues/145#issuecomment-1308722878\n * https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/issues/131\n **/\n\n/**\n * Component compatible class\n *\n * @template {typeof Component | typeof ConfigurableComponent} [ComponentType=typeof Component]\n * @typedef {{\n *   new(...args: ConstructorParameters<ComponentType>): InstanceType<ComponentType>,\n *   defaults?: ObjectNested,\n *   schema?: Schema<ObjectNested>,\n *   moduleName: string\n * }} CompatibleClass\n */\n\n/* eslint-enable jsdoc/valid-types */\n\n/**\n * Component constructor\n *\n * @template {typeof Component | typeof ConfigurableComponent} [ComponentType=typeof Component]\n * @typedef {CompatibleClass & ComponentType} ComponentConstructor\n */\n\n/**\n * Component initialisation options\n *\n * @typedef {object} InitOptions\n * @property {Element | Document | null} [scope] - Scope of the document to search within\n */\n\n/**\n * @import { ObjectNested, Schema } from './common/configuration/index.mjs'\n * @import { ConfigurableComponent } from './configurable-component.mjs'\n */\n","import {\n  mergeConfigs,\n  normaliseDataset\n} from './common/configuration/index.mjs'\nimport { formatErrorMessage, isObject } from './common/index.mjs'\nimport { Component } from './component.mjs'\nimport { ConfigError } from './errors/index.mjs'\n\n/**\n * Configurable base component class\n *\n * @abstract\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} [ConfigurationType=ObjectNested]\n * @template {HTMLElement} [RootElementType=HTMLElement]\n * @augments Component<RootElementType>\n */\nexport class ConfigurableComponent extends Component {\n  /**\n   * @type {ConfigurationType}\n   */\n  config\n\n  /**\n   * Constructs a new component, validating that NHS.UK frontend is supported\n   *\n   * @param {Element | null} $root - HTML element to use for component\n   * @param {ConfigurationType} [config] - HTML element to use for component\n   */\n  constructor($root, config) {\n    super($root)\n\n    const childConstructor =\n      /** @type {ComponentConstructor<typeof ConfigurableComponent>} */ (\n        this.constructor\n      )\n\n    if (!isObject(childConstructor.defaults)) {\n      throw new ConfigError(\n        formatErrorMessage(\n          childConstructor,\n          'Config passed as parameter into constructor but no defaults defined'\n        )\n      )\n    }\n\n    const datasetConfig = /** @type {ConfigurationType} */ (\n      normaliseDataset(childConstructor, this.$root.dataset)\n    )\n\n    // Override defaults with JavaScript config\n    this.config = /** @type {ConfigurationType} */ (\n      mergeConfigs(childConstructor.defaults, config ?? {})\n    )\n\n    // Override merged config with dataset config\n    this.config = /** @type {ConfigurationType} */ (\n      mergeConfigs(\n        this.config,\n        this.configOverride(datasetConfig),\n        datasetConfig\n      )\n    )\n  }\n\n  /**\n   * Config override\n   *\n   * It should take a subset of configuration as input and return\n   * a new configuration object with properties that should be\n   * overridden based on the root element's dataset\n   *\n   * @abstract\n   * @param {Partial<ConfigurationType>} _datasetConfig - Config specified by dataset\n   * @returns {Partial<ConfigurationType>} Config to override by dataset\n   */\n  configOverride(_datasetConfig = {}) {\n    return {}\n  }\n}\n\n/**\n * @import { ObjectNested } from './common/configuration/index.mjs'\n * @import { ComponentConstructor } from './component.mjs'\n */\n","import { ConfigError } from '../../errors/index.mjs'\nimport { formatErrorMessage, isObject } from '../index.mjs'\n\nimport { extractConfigByNamespace } from './extract-config-by-namespace.mjs'\nimport { normaliseString } from './normalise-string.mjs'\n\n/**\n * Normalise dataset\n *\n * Loop over an object and normalise each value using {@link normaliseString},\n * optionally expanding `data-i18n.property` nested values\n *\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} ConfigurationType\n * @template {[keyof ConfigurationType, SchemaProperty | undefined][]} SchemaEntryType\n * @param {CompatibleClass & { schema?: Schema<ConfigurationType> }} Component - Component class\n * @param {DOMStringMap} dataset - HTML element dataset\n * @returns {ObjectNested} Normalised dataset\n */\nexport function normaliseDataset(Component, dataset) {\n  if (!isObject(Component.schema)) {\n    throw new ConfigError(\n      formatErrorMessage(\n        Component,\n        'Config passed as parameter into constructor but no schema defined'\n      )\n    )\n  }\n\n  const out = /** @type {ObjectNested} */ ({})\n  const entries = /** @type {SchemaEntryType} */ (\n    Object.entries(Component.schema.properties)\n  )\n\n  // Normalise top-level dataset ('data-*') values using schema types\n  for (const entry of entries) {\n    const [namespace, property] = entry\n\n    // Cast the `namespace` to string so it can be used to access the dataset\n    const field = namespace.toString()\n\n    if (field in dataset) {\n      out[field] = normaliseString(dataset[field], property)\n    }\n\n    /**\n     * Extract and normalise nested object values automatically using\n     * {@link normaliseString} but only schema object types are allowed\n     */\n    if (property?.type === 'object') {\n      out[field] = extractConfigByNamespace(\n        Component.schema,\n        dataset,\n        namespace\n      )\n    }\n  }\n\n  return out\n}\n\n/**\n * @import { CompatibleClass } from '../../component.mjs'\n * @import { ObjectNested, Schema, SchemaProperty } from './index.mjs'\n */\n","import { normaliseOptions } from '../../common/configuration/index.mjs'\nimport { ConfigurableComponent } from '../../configurable-component.mjs'\n\nconst DEBOUNCE_TIMEOUT_IN_SECONDS = 1\n\n/**\n * Button component\n *\n * @augments ConfigurableComponent<ButtonConfig>\n */\nexport class Button extends ConfigurableComponent {\n  /**\n   * @type {number | null}\n   */\n  debounceFormSubmitTimer = null\n\n  /**\n   * @param {Element | null} $root - HTML element to use for component\n   * @param {ButtonConfig} [config] - Button config\n   */\n  constructor($root, config = {}) {\n    super($root, config)\n\n    /**\n     * Initialise an event listener for keydown at document level\n     * this will help listening for later inserted elements with a role=\"button\"\n     */\n    this.$root.addEventListener('keydown', (event) => this.handleKeyDown(event))\n    this.$root.addEventListener('click', (event) => this.debounce(event))\n  }\n\n  /**\n   * JavaScript 'shim' to trigger the click event of element(s) when the space key is pressed.\n   *\n   * Created since some Assistive Technologies (for example some Screenreaders)\n   * will tell a user to press space on a 'button', so this functionality needs to be shimmed\n   * See https://github.com/alphagov/govuk_elements/pull/272#issuecomment-233028270\n   *\n   * @param {KeyboardEvent} event - Keydown event\n   */\n  handleKeyDown(event) {\n    const target = event.target\n\n    // Handle space bar only\n    if (event.key !== ' ') {\n      return\n    }\n\n    // Handle elements with [role=\"button\"] only\n    if (\n      target instanceof HTMLElement &&\n      target.getAttribute('role') === 'button'\n    ) {\n      event.preventDefault()\n      target.click()\n    }\n  }\n\n  /**\n   * Debounce double-clicks\n   *\n   * If the click quickly succeeds a previous click then nothing will happen.\n   * This stops people accidentally causing multiple form submissions by\n   * double clicking buttons.\n   *\n   * @param {MouseEvent} event - Mouse click event\n   * @returns {undefined | false} Returns undefined, or false when debounced\n   */\n  debounce(event) {\n    // Check the button that was clicked has preventDoubleClick enabled\n    if (!this.config.preventDoubleClick) {\n      return\n    }\n\n    // If the timer is still running then we want to prevent the click from submitting the form\n    if (this.debounceFormSubmitTimer) {\n      event.preventDefault()\n      return false\n    }\n\n    this.debounceFormSubmitTimer = window.setTimeout(() => {\n      this.debounceFormSubmitTimer = null\n    }, DEBOUNCE_TIMEOUT_IN_SECONDS * 1000)\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes\n   */\n  static moduleName = 'nhsuk-button'\n\n  /**\n   * Button default config\n   *\n   * @see {@link ButtonConfig}\n   * @constant\n   * @type {ButtonConfig}\n   */\n  static defaults = Object.freeze({\n    preventDoubleClick: false\n  })\n\n  /**\n   * Button config schema\n   *\n   * @constant\n   * @satisfies {Schema<ButtonConfig>}\n   */\n  static schema = Object.freeze({\n    properties: {\n      preventDoubleClick: { type: 'boolean' }\n    }\n  })\n}\n\n/**\n * Initialise button component\n *\n * @deprecated Use {@link createAll | `createAll(Button, options)`} instead.\n * @param {InitOptions & ButtonConfig} [options]\n */\nexport function initButtons(options) {\n  const { scope: $scope } = normaliseOptions(options)\n\n  const $buttons = $scope?.querySelectorAll(\n    `[data-module=\"${Button.moduleName}\"]`\n  )\n\n  $buttons?.forEach(($root) => {\n    new Button($root, options)\n  })\n}\n\n/**\n * Button config\n *\n * @typedef {object} ButtonConfig\n * @property {boolean} [preventDoubleClick=false] - Prevent accidental double\n *   clicks on submit buttons from submitting forms multiple times.\n */\n\n/**\n * @import { createAll, InitOptions } from '../../index.mjs'\n * @import { Schema } from '../../common/configuration/index.mjs'\n */\n","import { isObject } from './common/index.mjs'\n\n/**\n * Internationalisation\n *\n * Adds support for selecting messages to render, with placeholder\n * interpolation and locale-aware number formatting and pluralisation\n */\nexport class I18n {\n  /**\n   * @param {{ [key: string]: string | TranslationPluralForms }} translations - Key-value pairs of the translation strings to use.\n   * @param {object} [config] - Configuration options for the function.\n   * @param {string | null} [config.locale] - An overriding locale for the PluralRules functionality.\n   */\n  constructor(translations = {}, config = {}) {\n    // Make list of translations available throughout function\n    this.translations = translations\n\n    // The locale to use for PluralRules and NumberFormat\n    this.locale = config.locale ?? (document.documentElement.lang || 'en')\n  }\n\n  /**\n   * The most used function - takes the key for a given piece of UI text and\n   * returns the appropriate string.\n   *\n   * @param {string} lookupKey - The lookup key of the string to use.\n   * @param {{ [key: string]: unknown }} [options] - Any options passed with the translation string, e.g: for string interpolation.\n   * @returns {string} The appropriate translation string.\n   * @throws {Error} Lookup key required\n   * @throws {Error} Options required for `${}` placeholders\n   */\n  t(lookupKey, options) {\n    if (!lookupKey) {\n      // Print a console error if no lookup key has been provided\n      throw new Error('i18n: lookup key missing')\n    }\n\n    // Fetch the translation for that lookup key\n    let translation = this.translations[lookupKey]\n\n    // If the `count` option is set, determine which plural suffix is needed and\n    // change the lookupKey to match. We check to see if it's numeric instead of\n    // falsy, as this could legitimately be 0.\n    if (typeof options?.count === 'number' && isObject(translation)) {\n      const translationPluralForm =\n        translation[this.getPluralSuffix(lookupKey, options.count)]\n\n      // Update translation with plural suffix\n      if (translationPluralForm) {\n        translation = translationPluralForm\n      }\n    }\n\n    if (typeof translation === 'string') {\n      // Check for ${} placeholders in the translation string\n      // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec\n      if (translation.match(/%{(.\\S+)}/)) {\n        if (!options) {\n          throw new Error(\n            'i18n: cannot replace placeholders in string if no option data provided'\n          )\n        }\n\n        return this.replacePlaceholders(translation, options)\n      }\n\n      return translation\n    }\n\n    // If the key wasn't found in our translations object,\n    // return the lookup key itself as the fallback\n    return lookupKey\n  }\n\n  /**\n   * Takes a translation string with placeholders, and replaces the placeholders\n   * with the provided data\n   *\n   * @param {string} translationString - The translation string\n   * @param {{ [key: string]: unknown }} options - Any options passed with the translation string, e.g: for string interpolation.\n   * @returns {string} The translation string to output, with $\\{\\} placeholders replaced\n   */\n  replacePlaceholders(translationString, options) {\n    const formatter = Intl.NumberFormat.supportedLocalesOf(this.locale).length\n      ? new Intl.NumberFormat(this.locale)\n      : undefined\n\n    return translationString.replace(\n      /%{(.\\S+)}/g,\n\n      /**\n       * Replace translation string placeholders\n       *\n       * @param {string} placeholderWithBraces - Placeholder with braces\n       * @param {string} placeholderKey - Placeholder key\n       * @returns {string} Placeholder value\n       */\n      function (placeholderWithBraces, placeholderKey) {\n        if (Object.prototype.hasOwnProperty.call(options, placeholderKey)) {\n          const placeholderValue = options[placeholderKey]\n\n          // If a user has passed `false` as the value for the placeholder\n          // treat it as though the value should not be displayed\n          if (\n            placeholderValue === false ||\n            (typeof placeholderValue !== 'number' &&\n              typeof placeholderValue !== 'string')\n          ) {\n            return ''\n          }\n\n          // If the placeholder's value is a number, localise the number formatting\n          if (typeof placeholderValue === 'number') {\n            return formatter\n              ? formatter.format(placeholderValue)\n              : `${placeholderValue}`\n          }\n\n          return placeholderValue\n        }\n\n        throw new Error(\n          `i18n: no data found to replace ${placeholderWithBraces} placeholder in string`\n        )\n      }\n    )\n  }\n\n  /**\n   * Check to see if the browser supports Intl.PluralRules\n   *\n   * It requires all conditions to be met in order to be supported:\n   * - The implementation of Intl supports PluralRules (NOT true in Safari 10â€“12)\n   * - The browser/OS has plural rules for the current locale (browser dependent)\n   *\n   * {@link https://browsersl.ist/#q=supports+es6-module+and+not+supports+intl-pluralrules}\n   *\n   * @returns {boolean} Returns true if all conditions are met. Returns false otherwise.\n   */\n  hasIntlPluralRulesSupport() {\n    return Boolean(\n      'PluralRules' in window.Intl &&\n        Intl.PluralRules.supportedLocalesOf(this.locale).length\n    )\n  }\n\n  /**\n   * Get the appropriate suffix for the plural form.\n   *\n   * Uses Intl.PluralRules (or our own fallback implementation) to get the\n   * 'preferred' form to use for the given count.\n   *\n   * Checks that a translation has been provided for that plural form â€“ if it\n   * hasn't, it'll fall back to the 'other' plural form (unless that doesn't exist\n   * either, in which case an error will be thrown)\n   *\n   * @param {string} lookupKey - The lookup key of the string to use.\n   * @param {number} count - Number used to determine which pluralisation to use.\n   * @returns {PluralRule} The suffix associated with the correct pluralisation for this locale.\n   * @throws {Error} Plural form `.other` required when preferred plural form is missing\n   */\n  getPluralSuffix(lookupKey, count) {\n    // Validate that the number is actually a number.\n    //\n    // Number(count) will turn anything that can't be converted to a Number type\n    // into 'NaN'. isFinite filters out NaN, as it isn't a finite number.\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-conversion\n    count = Number(count)\n    if (!isFinite(count)) {\n      return 'other'\n    }\n\n    // Fetch the translation for that lookup key\n    const translation = this.translations[lookupKey]\n\n    // Check to verify that all the requirements for Intl.PluralRules are met.\n    // If so, we can use that instead of our custom implementation. Otherwise,\n    // use the hardcoded fallback.\n    const preferredForm = this.hasIntlPluralRulesSupport()\n      ? new Intl.PluralRules(this.locale).select(count)\n      : 'other'\n\n    // Use the correct plural form if provided\n    if (isObject(translation)) {\n      if (preferredForm in translation) {\n        return preferredForm\n        // Fall back to `other` if the plural form is missing, but log a warning\n        // to the console\n      } else if ('other' in translation) {\n        console.warn(\n          `i18n: Missing plural form \".${preferredForm}\" for \"${this.locale}\" locale. Falling back to \".other\".`\n        )\n\n        return 'other'\n      }\n    }\n\n    // If the required `other` plural form is missing, all we can do is error\n    throw new Error(\n      `i18n: Plural form \".other\" is required for \"${this.locale}\" locale`\n    )\n  }\n}\n\n/**\n * Plural rule category mnemonic tags\n *\n * @typedef {'zero' | 'one' | 'two' | 'few' | 'many' | 'other'} PluralRule\n */\n\n/**\n * Translated message by plural rule they correspond to.\n *\n * Allows to group pluralised messages under a single key when passing\n * translations to a component's constructor\n *\n * @typedef {object} TranslationPluralForms\n * @property {string} [other] - General plural form\n * @property {string} [zero] - Plural form used with 0\n * @property {string} [one] - Plural form used with 1\n * @property {string} [two] - Plural form used with 2\n * @property {string} [few] - Plural form used for a few\n * @property {string} [many] - Plural form used for many\n */\n","import { closestAttributeValue } from '../../common/closest-attribute-value.mjs'\nimport {\n  normaliseOptions,\n  validateConfig\n} from '../../common/configuration/index.mjs'\nimport { formatErrorMessage } from '../../common/index.mjs'\nimport { ConfigurableComponent } from '../../configurable-component.mjs'\nimport { ConfigError, ElementError } from '../../errors/index.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * Character count component\n *\n * Tracks the number of characters or words in the `.nhsuk-js-character-count`\n * `<textarea>` inside the element. Displays a message with the remaining number\n * of characters/words available, or the number of characters/words in excess.\n *\n * You can configure the message to only appear after a certain percentage\n * of the available characters/words has been entered.\n *\n * @augments ConfigurableComponent<CharacterCountConfig>\n */\nexport class CharacterCount extends ConfigurableComponent {\n  /**\n   * @type {number | null}\n   */\n  lastInputTimestamp = null\n  lastInputValue = ''\n\n  /**\n   * @type {number | null}\n   */\n  valueChecker = null\n\n  /**\n   * @param {Element | null} $root - HTML element to use for component\n   * @param {CharacterCountConfig} [config] - Character count config\n   */\n  constructor($root, config = {}) {\n    super($root, config)\n\n    const $textarea = this.$root.querySelector('.nhsuk-js-character-count')\n    if (\n      !(\n        $textarea instanceof HTMLTextAreaElement ||\n        $textarea instanceof HTMLInputElement\n      )\n    ) {\n      throw new ElementError({\n        component: CharacterCount,\n        element: $textarea,\n        expectedType: 'HTMLTextareaElement or HTMLInputElement',\n        identifier: 'Form field (`.nhsuk-js-character-count`)'\n      })\n    }\n\n    // Check for valid config\n    const errors = validateConfig(CharacterCount.schema, this.config)\n    if (errors[0]) {\n      throw new ConfigError(formatErrorMessage(CharacterCount, errors[0]))\n    }\n\n    this.i18n = new I18n(this.config.i18n, {\n      // Read the fallback if necessary rather than have it set in the defaults\n      locale: closestAttributeValue(this.$root, 'lang')\n    })\n\n    // Determine the limit attribute (characters or words)\n    this.maxLength = this.config.maxwords ?? this.config.maxlength ?? Infinity\n\n    this.$textarea = $textarea\n\n    const textareaDescriptionId = `${this.$textarea.id}-info`\n    const $textareaDescription = document.getElementById(textareaDescriptionId)\n    if (!$textareaDescription) {\n      throw new ElementError({\n        component: CharacterCount,\n        element: $textareaDescription,\n        identifier: `Count message (\\`id=\"${textareaDescriptionId}\"\\`)`\n      })\n    }\n\n    // Pre-existing validation error rendered from server\n    this.$errorMessage = this.$root.querySelector('.nhsuk-error-message')\n\n    // Inject a description for the textarea if none is present already\n    // for when the component was rendered with no maxlength, maxwords\n    // nor custom textareaDescriptionText\n    if (/^\\s*$/.exec($textareaDescription.textContent)) {\n      $textareaDescription.textContent = this.i18n.t('textareaDescription', {\n        count: this.maxLength\n      })\n    }\n\n    // Move the textarea description to be immediately after the textarea\n    // Kept for backwards compatibility\n    this.$textarea.insertAdjacentElement('afterend', $textareaDescription)\n\n    // Create the *screen reader* specific live-updating counter\n    // This doesn't need any styling classes, as it is never visible\n    const $screenReaderCountMessage = document.createElement('div')\n    $screenReaderCountMessage.className =\n      'nhsuk-character-count__sr-status nhsuk-u-visually-hidden'\n    $screenReaderCountMessage.setAttribute('aria-live', 'polite')\n    this.$screenReaderCountMessage = $screenReaderCountMessage\n    $textareaDescription.insertAdjacentElement(\n      'afterend',\n      $screenReaderCountMessage\n    )\n\n    // Create our live-updating counter element, copying the classes from the\n    // textarea description for backwards compatibility as these may have been\n    // configured\n    const $visibleCountMessage = document.createElement('div')\n    $visibleCountMessage.className = $textareaDescription.className\n    $visibleCountMessage.classList.add('nhsuk-character-count__status')\n    $visibleCountMessage.setAttribute('aria-hidden', 'true')\n    this.$visibleCountMessage = $visibleCountMessage\n    $textareaDescription.insertAdjacentElement('afterend', $visibleCountMessage)\n\n    // Hide the textarea description\n    $textareaDescription.classList.add('nhsuk-u-visually-hidden')\n\n    // Remove hard limit if set\n    this.$textarea.removeAttribute('maxlength')\n\n    this.bindChangeEvents()\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event.\n    window.addEventListener('pageshow', () => this.updateCountMessage())\n\n    // Although we've set up handlers to sync state on the pageshow event, init\n    // could be called after those events have fired, for example if they are\n    // added to the page dynamically, so update now too.\n    this.updateCountMessage()\n  }\n\n  /**\n   * Character count config override\n   *\n   * To ensure data-attributes take complete precedence, even if they change\n   * the type of count, we need to reset the `maxlength` and `maxwords` from\n   * the JavaScript config.\n   *\n   * @param {Partial<CharacterCountConfig>} datasetConfig - Config specified by dataset\n   * @returns {Partial<CharacterCountConfig>} Config to override by dataset\n   */\n  configOverride(datasetConfig) {\n    let configOverrides = {}\n    if ('maxwords' in datasetConfig || 'maxlength' in datasetConfig) {\n      configOverrides = {\n        maxlength: undefined,\n        maxwords: undefined\n      }\n    }\n\n    return configOverrides\n  }\n\n  /**\n   * Count the number of characters (or words, if `config.maxwords` is set)\n   * in the given text\n   *\n   * @param {string} text - The text to count the characters of\n   * @returns {number} the number of characters (or words) in the text\n   */\n  count(text) {\n    if (this.config.maxwords) {\n      const tokens = text.match(/\\S+/g) ?? [] // Matches consecutive non-whitespace chars\n      return tokens.length\n    }\n\n    return text.length\n  }\n\n  /**\n   * Bind change events\n   *\n   * Set up event listeners on the $textarea so that the count messages update\n   * when the user types.\n   */\n  bindChangeEvents() {\n    this.$textarea.addEventListener('keyup', () => this.handleKeyUp())\n\n    // Bind focus/blur events to start/stop polling\n    this.$textarea.addEventListener('focus', () => this.handleFocus())\n    this.$textarea.addEventListener('blur', () => this.handleBlur())\n  }\n\n  /**\n   * Update count message if textarea value has changed\n   */\n  checkIfValueChanged() {\n    if (this.$textarea.value !== this.lastInputValue) {\n      this.lastInputValue = this.$textarea.value\n      this.updateCountMessage()\n    }\n  }\n\n  /**\n   * Update count message\n   *\n   * Helper function to update both the visible and screen reader-specific\n   * counters simultaneously (e.g. on init)\n   */\n  updateCountMessage() {\n    this.updateVisibleCountMessage()\n    this.updateScreenReaderCountMessage()\n  }\n\n  /**\n   * Update visible count message\n   */\n  updateVisibleCountMessage() {\n    const remainingNumber = this.maxLength - this.count(this.$textarea.value)\n    const isError = remainingNumber < 0\n\n    // If input is over the threshold, remove the disabled class which renders\n    // the counter invisible.\n    this.$visibleCountMessage.classList.toggle(\n      'nhsuk-character-count__message--disabled',\n      !this.isOverThreshold()\n    )\n\n    // Update styles\n    if (!this.$errorMessage) {\n      // Only toggle the textarea error class if there isn't an error message\n      // already, as it may be unrelated to the limit (eg: allowed characters)\n      // and would set the border colour back to black.\n      this.$textarea.classList.toggle('nhsuk-textarea--error', isError)\n    }\n    this.$visibleCountMessage.classList.toggle('nhsuk-error-message', isError)\n    this.$visibleCountMessage.classList.toggle('nhsuk-hint', !isError)\n\n    // Update message\n    this.$visibleCountMessage.textContent = this.formattedUpdateMessage()\n  }\n\n  /**\n   * Update screen reader count message\n   */\n  updateScreenReaderCountMessage() {\n    // If over the threshold, remove the aria-hidden attribute, allowing screen\n    // readers to announce the content of the element.\n    if (this.isOverThreshold()) {\n      this.$screenReaderCountMessage.removeAttribute('aria-hidden')\n    } else {\n      this.$screenReaderCountMessage.setAttribute('aria-hidden', 'true')\n    }\n\n    // Update message\n    this.$screenReaderCountMessage.textContent = this.formattedUpdateMessage()\n  }\n\n  /**\n   * Get count message\n   *\n   * @returns {string} Status message\n   */\n  formattedUpdateMessage() {\n    const remainingNumber = this.maxLength - this.count(this.$textarea.value)\n    const countType = this.config.maxwords ? 'words' : 'characters'\n    return this.formatCountMessage(remainingNumber, countType)\n  }\n\n  /**\n   * Formats the message shown to users according to what's counted\n   * and how many remain\n   *\n   * @param {number} remainingNumber - The number of words/characaters remaining\n   * @param {string} countType - \"words\" or \"characters\"\n   * @returns {string} Status message\n   */\n  formatCountMessage(remainingNumber, countType) {\n    if (remainingNumber === 0) {\n      return this.i18n.t(`${countType}AtLimit`)\n    }\n\n    const translationKeySuffix =\n      remainingNumber < 0 ? 'OverLimit' : 'UnderLimit'\n\n    return this.i18n.t(`${countType}${translationKeySuffix}`, {\n      count: Math.abs(remainingNumber)\n    })\n  }\n\n  /**\n   * Check if count is over threshold\n   *\n   * Checks whether the value is over the configured threshold for the input.\n   * If there is no configured threshold, it is set to 0 and this function will\n   * always return true.\n   *\n   * @returns {boolean} true if the current count is over the config.threshold\n   *   (or no threshold is set)\n   */\n  isOverThreshold() {\n    // No threshold means we're always above threshold so save some computation\n    if (!this.config.threshold) {\n      return true\n    }\n\n    // Determine the remaining number of characters/words\n    const currentLength = this.count(this.$textarea.value)\n    const maxLength = this.maxLength\n\n    const thresholdValue = (maxLength * this.config.threshold) / 100\n\n    return thresholdValue <= currentLength\n  }\n\n  /**\n   * Handle key up event\n   *\n   * Update the visible character counter and keep track of when the last update\n   * happened for each keypress\n   */\n  handleKeyUp() {\n    this.updateVisibleCountMessage()\n    this.lastInputTimestamp = Date.now()\n  }\n\n  /**\n   * Handle focus event\n   *\n   * Speech recognition software such as Dragon NaturallySpeaking will modify\n   * the fields by directly changing its `value`. These changes don't trigger\n   * events in JavaScript, so we need to poll to handle when and if they occur.\n   *\n   * Once the keyup event hasn't been detected for at least 1000 ms (1s), check\n   * if the textarea value has changed and update the count message if it has.\n   *\n   * This is so that the update triggered by the manual comparison doesn't\n   * conflict with debounced KeyboardEvent updates.\n   */\n  handleFocus() {\n    this.valueChecker = window.setInterval(() => {\n      if (\n        !this.lastInputTimestamp ||\n        Date.now() - 500 >= this.lastInputTimestamp\n      ) {\n        this.checkIfValueChanged()\n      }\n    }, 1000)\n  }\n\n  /**\n   * Handle blur event\n   *\n   * Stop checking the textarea value once the textarea no longer has focus\n   */\n  handleBlur() {\n    // Cancel value checking on blur\n    if (this.valueChecker) {\n      window.clearInterval(this.valueChecker)\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes\n   */\n  static moduleName = 'nhsuk-character-count'\n\n  /**\n   * Character count default config\n   *\n   * @see {@link CharacterCountConfig}\n   * @constant\n   * @type {CharacterCountConfig}\n   */\n  static defaults = Object.freeze({\n    threshold: 0,\n    i18n: {\n      // Characters\n      charactersUnderLimit: {\n        one: 'You have %{count} character remaining',\n        other: 'You have %{count} characters remaining'\n      },\n      charactersAtLimit: 'You have 0 characters remaining',\n      charactersOverLimit: {\n        one: 'You have %{count} character too many',\n        other: 'You have %{count} characters too many'\n      },\n      // Words\n      wordsUnderLimit: {\n        one: 'You have %{count} word remaining',\n        other: 'You have %{count} words remaining'\n      },\n      wordsAtLimit: 'You have 0 words remaining',\n      wordsOverLimit: {\n        one: 'You have %{count} word too many',\n        other: 'You have %{count} words too many'\n      },\n      textareaDescription: {\n        other: ''\n      }\n    }\n  })\n\n  /**\n   * Character count config schema\n   *\n   * @constant\n   * @satisfies {Schema<CharacterCountConfig>}\n   */\n  static schema = Object.freeze({\n    properties: {\n      i18n: { type: 'object' },\n      maxwords: { type: 'number' },\n      maxlength: { type: 'number' },\n      threshold: { type: 'number' }\n    },\n    anyOf: [\n      {\n        required: ['maxwords'],\n        errorMessage: 'Either \"maxlength\" or \"maxwords\" must be provided'\n      },\n      {\n        required: ['maxlength'],\n        errorMessage: 'Either \"maxlength\" or \"maxwords\" must be provided'\n      }\n    ]\n  })\n}\n\n/**\n * Initialise character count component\n *\n * @deprecated Use {@link createAll | `createAll(CharacterCount, options)`} instead.\n * @param {InitOptions & CharacterCountConfig} [options]\n */\nexport function initCharacterCounts(options) {\n  const { scope: $scope } = normaliseOptions(options)\n\n  const $characterCounts = $scope?.querySelectorAll(\n    `[data-module=\"${CharacterCount.moduleName}\"]`\n  )\n\n  $characterCounts?.forEach(($root) => {\n    new CharacterCount($root, options)\n  })\n}\n\n/**\n * Character count config\n *\n * @see {@link CharacterCount.defaults}\n * @typedef {object} CharacterCountConfig\n * @property {number} [maxlength] - The maximum number of characters.\n *   If maxwords is provided, the maxlength option will be ignored.\n * @property {number} [maxwords] - The maximum number of words. If maxwords is\n *   provided, the maxlength option will be ignored.\n * @property {number} [threshold=0] - The percentage value of the limit at\n *   which point the count message is displayed. If this attribute is set, the\n *   count message will be hidden by default.\n * @property {CharacterCountTranslations} [i18n=CharacterCount.defaults.i18n] - Character count translations\n */\n\n/**\n * Character count translations\n *\n * @see {@link CharacterCount.defaults.i18n}\n * @see {@link https://github.com/nhsuk/nhsuk-frontend/blob/main/docs/configuration/localisation.md}\n * @typedef {object} CharacterCountTranslations\n *\n * Messages shown to users as they type. It provides feedback on how many words\n * or characters they have remaining or if they are over the limit. This also\n * includes a message used as an accessible description for the textarea.\n * @property {TranslationPluralForms} [charactersUnderLimit] - Message displayed\n *   when the number of characters is under the configured maximum, `maxlength`.\n *   This message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining characters. This is a pluralised list of messages.\n * @property {string} [charactersAtLimit] - Message displayed when the number of\n *   characters reaches the configured maximum, `maxlength`. This message is\n *   displayed visually and through assistive technologies.\n * @property {TranslationPluralForms} [charactersOverLimit] - Message displayed\n *   when the number of characters is over the configured maximum, `maxlength`.\n *   This message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining characters. This is a pluralised list of messages.\n * @property {TranslationPluralForms} [wordsUnderLimit] - Message displayed when\n *   the number of words is under the configured maximum, `maxlength`. This\n *   message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining words. This is a pluralised list of messages.\n * @property {string} [wordsAtLimit] - Message displayed when the number of\n *   words reaches the configured maximum, `maxlength`. This message is\n *   displayed visually and through assistive technologies.\n * @property {TranslationPluralForms} [wordsOverLimit] - Message displayed when\n *   the number of words is over the configured maximum, `maxlength`. This\n *   message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining words. This is a pluralised list of messages.\n * @property {TranslationPluralForms} [textareaDescription] - Message made\n *   available to assistive technologies, if none is already present in the\n *   HTML, to describe that the component accepts only a limited amount of\n *   content. It is visible on the page when JavaScript is unavailable. The\n *   component will replace the `%{count}` placeholder with the value of the\n *   `maxlength` or `maxwords` parameter.\n */\n\n/**\n * @import { TranslationPluralForms } from '../../i18n.mjs'\n * @import { createAll, InitOptions } from '../../index.mjs'\n * @import { Schema } from '../../common/configuration/index.mjs'\n */\n","/**\n * Validate component config by schema\n *\n * Follows limited examples in JSON schema for wider support in future\n *\n * {@link https://ajv.js.org/json-schema.html#compound-keywords}\n * {@link https://ajv.js.org/packages/ajv-errors.html#single-message}\n *\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} ConfigurationType\n * @param {Schema<ConfigurationType>} schema - The schema of a component\n * @param {ConfigurationType} config - Component config\n * @returns {string[]} List of validation errors\n */\nexport function validateConfig(schema, config) {\n  const validationErrors = []\n\n  // Check errors for each schema\n  for (const [name, conditions] of Object.entries(schema)) {\n    const errors = []\n\n    // Check errors for each schema condition\n    if (Array.isArray(conditions)) {\n      for (const { required, errorMessage } of conditions) {\n        if (!required.every((key) => !!config[key])) {\n          errors.push(errorMessage) // Missing config key value\n        }\n      }\n\n      // Check one condition passes or add errors\n      if (name === 'anyOf' && !(conditions.length - errors.length >= 1)) {\n        validationErrors.push(...errors)\n      }\n    }\n  }\n\n  return validationErrors\n}\n\n/**\n * @import { Schema } from './index.mjs'\n */\n","import { normaliseOptions } from '../../common/configuration/index.mjs'\nimport { toggleConditionalInput } from '../../common/index.mjs'\nimport { Component } from '../../component.mjs'\nimport { ElementError } from '../../errors/index.mjs'\n\n/**\n * Checkboxes component\n *\n * Conditionally show content when a checkbox button is checked\n *\n * Test at {@link http://localhost:3000/nhsuk-frontend/components/checkboxes/with-conditional-content/}\n */\nexport class Checkboxes extends Component {\n  /**\n   * @param {Element | null} $root - HTML element to use for component\n   */\n  constructor($root) {\n    super($root)\n\n    const $inputs = this.$root.querySelectorAll('input[type=\"checkbox\"]')\n    if (!$inputs.length) {\n      throw new ElementError({\n        component: Checkboxes,\n        identifier: 'Form inputs (`<input type=\"checkbox\">`)'\n      })\n    }\n\n    this.$inputs = $inputs\n\n    this.$inputs.forEach(($input) => {\n      const targetId = $input.getAttribute('aria-controls')\n\n      // Skip checkboxes without aria-controls attributes\n      if (!targetId) {\n        return\n      }\n\n      // Throw if target conditional element does not exist.\n      if (!document.getElementById(targetId)) {\n        throw new ElementError({\n          component: Checkboxes,\n          identifier: `Conditional reveal (\\`id=\"${targetId}\"\\`)`\n        })\n      }\n    })\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event.\n    window.addEventListener('pageshow', () => this.syncAllConditionalReveals())\n\n    // Although we've set up handlers to sync state on the pageshow event, init\n    // could be called after those events have fired, for example if they are\n    // added to the page dynamically, so sync now too.\n    this.syncAllConditionalReveals()\n\n    // Handle events\n    this.$root.addEventListener('click', (event) => this.handleClick(event))\n  }\n\n  /**\n   * Sync the conditional reveal states for all checkboxes in this component.\n   */\n  syncAllConditionalReveals() {\n    this.$inputs.forEach(($input) =>\n      this.syncConditionalRevealWithInputState($input)\n    )\n  }\n\n  /**\n   * Sync conditional reveal with the input state\n   *\n   * Synchronise the visibility of the conditional reveal, and its accessible\n   * state, with the input's checked state.\n   *\n   * @param {HTMLInputElement} $input - Checkbox input\n   */\n  syncConditionalRevealWithInputState($input) {\n    toggleConditionalInput($input, 'nhsuk-checkboxes__conditional--hidden')\n  }\n\n  /**\n   * Uncheck other checkboxes\n   *\n   * Find any other checkbox inputs with the checkbox group value, and uncheck them.\n   * This is useful for when a â€œNone of these\" checkbox is checked.\n   *\n   * @param {HTMLInputElement} $input - Checkbox input\n   */\n  unCheckAllInputsExcept($input) {\n    const { checkboxExclusiveGroup: exclusiveGroup } = $input.dataset\n\n    const selectorGroup = exclusiveGroup\n      ? `[data-checkbox-exclusive-group=\"${exclusiveGroup}\"]`\n      : `[name=\"${$input.name}\"]`\n\n    const allInputsWithSameName = document.querySelectorAll(\n      `input[type=\"checkbox\"]${selectorGroup}`\n    )\n\n    allInputsWithSameName.forEach(($inputWithSameName) => {\n      const hasSameFormOwner = $input.form === $inputWithSameName.form\n\n      // Uncheck all with same exclusive group by default, otherwise fall back to\n      // GOV.UK Frontend behaviour to uncheck all with the same name attribute\n      if (hasSameFormOwner && $inputWithSameName !== $input) {\n        this.setInputState($inputWithSameName, false, exclusiveGroup)\n      }\n    })\n  }\n\n  /**\n   * Uncheck exclusive inputs\n   *\n   * Find any checkbox inputs with the same checkbox group value and the 'exclusive' behaviour,\n   * and uncheck them. This helps prevent someone checking both a regular checkbox and a\n   * \"None of these\" checkbox in the same fieldset.\n   *\n   * @param {HTMLInputElement} $input - Checkbox input\n   */\n  unCheckExclusiveInputs($input) {\n    const { checkboxExclusiveGroup: exclusiveGroup } = $input.dataset\n\n    const selectorGroup = exclusiveGroup\n      ? `[data-checkbox-exclusive-group=\"${exclusiveGroup}\"]`\n      : `[name=\"${$input.name}\"]`\n\n    const allInputsWithSameNameAndExclusiveBehaviour =\n      document.querySelectorAll(\n        `input[type=\"checkbox\"][data-checkbox-exclusive]${selectorGroup}`\n      )\n\n    allInputsWithSameNameAndExclusiveBehaviour.forEach(($exclusiveInput) => {\n      const hasSameFormOwner = $input.form === $exclusiveInput.form\n\n      // Uncheck the exclusive input only. When no group is set, fall back to\n      // GOV.UK Frontend behaviour and locate the exclusive input by name\n      if (hasSameFormOwner) {\n        this.setInputState($exclusiveInput, false, exclusiveGroup)\n      }\n    })\n  }\n\n  /**\n   * Set input state, optionally for matching exclusive group only\n   *\n   * @param {HTMLInputElement} $input - Checkbox input\n   * @param {boolean} checked - Checkbox checked state\n   * @param {string} [exclusiveGroup] - Set state for matching exclusive group only (optional)\n   */\n  setInputState($input, checked, exclusiveGroup) {\n    const { checkboxExclusiveGroup } = $input.dataset\n\n    // Skip input when exclusive group does not match\n    if (\n      exclusiveGroup &&\n      checkboxExclusiveGroup &&\n      checkboxExclusiveGroup !== exclusiveGroup\n    ) {\n      return\n    }\n\n    $input.checked = checked\n    this.syncConditionalRevealWithInputState($input)\n  }\n\n  /**\n   * Toggle classes and attributes\n   *\n   * @param {MouseEvent} event - Click event\n   */\n  handleClick(event) {\n    const $clickedInput = event.target\n\n    // Ignore clicks on things that aren't checkbox inputs\n    if (\n      !($clickedInput instanceof HTMLInputElement) ||\n      $clickedInput.type !== 'checkbox'\n    ) {\n      return\n    }\n\n    // If the checkbox conditionally-reveals some content, sync the state\n    const hasAriaControls = $clickedInput.getAttribute('aria-controls')\n    if (hasAriaControls) {\n      this.syncConditionalRevealWithInputState($clickedInput)\n    }\n\n    // No further behaviour needed for unchecking\n    if (!$clickedInput.checked) {\n      return\n    }\n\n    // Handle 'exclusive' checkbox behaviour (ie \"None of these\")\n    if ('checkboxExclusive' in $clickedInput.dataset) {\n      this.unCheckAllInputsExcept($clickedInput)\n    } else {\n      this.unCheckExclusiveInputs($clickedInput)\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes\n   */\n  static moduleName = 'nhsuk-checkboxes'\n}\n\n/**\n * Initialise checkboxes component\n *\n * @deprecated Use {@link createAll | `createAll(Checkboxes)`} instead.\n * @param {InitOptions} [options]\n */\nexport function initCheckboxes(options) {\n  const { scope: $scope } = normaliseOptions(options)\n\n  const $checkboxes = $scope?.querySelectorAll(\n    `[data-module=\"${Checkboxes.moduleName}\"]`\n  )\n\n  $checkboxes?.forEach(($root) => {\n    new Checkboxes($root)\n  })\n}\n\n/**\n * @import { createAll, InitOptions } from '../../index.mjs'\n */\n","import { normaliseOptions } from '../../common/configuration/index.mjs'\nimport { formatErrorMessage, setFocus } from '../../common/index.mjs'\nimport { ConfigurableComponent } from '../../configurable-component.mjs'\n\n/**\n * Error summary component\n *\n * Adapted from https://github.com/alphagov/govuk-frontend/blob/v2.13.0/src/components/error-summary/error-summary.js\n *\n * @augments ConfigurableComponent<ErrorSummaryConfig>\n */\nexport class ErrorSummary extends ConfigurableComponent {\n  /**\n   * @param {Element | null} $root - HTML element to use for component\n   * @param {ErrorSummaryConfig} [config] - Error summary config\n   */\n  constructor($root, config = {}) {\n    super($root, config)\n\n    /**\n     * Focus the error summary\n     */\n    if (!this.config.disableAutoFocus) {\n      setFocus(this.$root)\n    }\n\n    this.$root.addEventListener('click', (event) => this.handleClick(event))\n  }\n\n  /**\n   * Error summary config override\n   *\n   * @param {Partial<ErrorSummaryConfig>} _datasetConfig - Config specified by dataset\n   * @returns {Partial<ErrorSummaryConfig>} Config to override by dataset\n   */\n  configOverride(_datasetConfig) {\n    let configOverrides = /** @type {Partial<ErrorSummaryConfig>} */ ({})\n\n    if ('focusOnPageLoad' in this.config) {\n      console.warn(\n        formatErrorMessage(\n          ErrorSummary,\n          'Option `focusOnPageLoad` is deprecated. Use `disableAutoFocus` instead.'\n        )\n      )\n\n      configOverrides.disableAutoFocus = !this.config.focusOnPageLoad\n    }\n\n    return configOverrides\n  }\n\n  /**\n   * Get associated legend or label\n   *\n   * Returns the first element that exists from this list:\n   *\n   * - The `<legend>` associated with the closest `<fieldset>` ancestor, as long\n   *   as the top of it is no more than half a viewport height away from the\n   *   bottom of the input\n   * - The first `<label>` that is associated with the input using for=\"inputId\"\n   * - The closest parent `<label>`\n   *\n   * @param {Element} $input - The input\n   * @returns {Element | null} Associated legend or label, or null if no\n   *   associated legend or label can be found\n   */\n  getAssociatedLegendOrLabel($input) {\n    const $fieldset = $input.closest('fieldset')\n\n    if ($fieldset) {\n      const $legends = $fieldset.getElementsByTagName('legend')\n\n      if ($legends.length) {\n        const $candidateLegend = $legends[0]\n\n        // If the input type is radio or checkbox, always use the legend if\n        // there is one.\n        if (\n          $input instanceof HTMLInputElement &&\n          ($input.type === 'checkbox' || $input.type === 'radio')\n        ) {\n          return $candidateLegend\n        }\n\n        // For other input types, only scroll to the fieldsetâ€™s legend (instead\n        // of the label associated with the input) if the input would end up in\n        // the top half of the screen.\n        //\n        // This should avoid situations where the input either ends up off the\n        // screen, or obscured by a software keyboard.\n        const legendTop = $candidateLegend.getBoundingClientRect().top\n        const inputRect = $input.getBoundingClientRect()\n\n        // If the browser doesn't support Element.getBoundingClientRect().height\n        // or window.innerHeight (like IE8), bail and just link to the label.\n        if (inputRect.height && window.innerHeight) {\n          const inputBottom = inputRect.top + inputRect.height\n\n          if (inputBottom - legendTop < window.innerHeight / 2) {\n            return $candidateLegend\n          }\n        }\n      }\n    }\n\n    return (\n      document.querySelector(`label[for='${$input.getAttribute('id')}']`) ??\n      $input.closest('label')\n    )\n  }\n\n  /**\n   * Focus the target element\n   *\n   * By default, the browser will scroll the target into view. Because our\n   * labels or legends appear above the input, this means the user will be\n   * presented with an input without any context, as the label or legend will be\n   * off the top of the screen.\n   *\n   * Manually handling the click event, scrolling the question into view and\n   * then focussing the element solves this.\n   *\n   * This also results in the label and/or legend being announced correctly in\n   * NVDA (as tested in 2018.3.2) - without this only the field type is\n   * announced (e.g. \"Edit, has autocomplete\").\n   *\n   * @param {EventTarget} $target - Event target\n   * @returns {boolean} True if the target was able to be focussed\n   */\n  focusTarget($target) {\n    // If the element that was clicked was not a link, return early\n    if (!($target instanceof HTMLAnchorElement)) {\n      return false\n    }\n\n    const inputId = $target.hash.replace('#', '')\n    if (!inputId) {\n      return false\n    }\n\n    const $input = document.getElementById(inputId)\n    if (!$input) {\n      return false\n    }\n\n    const $legendOrLabel = this.getAssociatedLegendOrLabel($input)\n    if (!$legendOrLabel) {\n      return false\n    }\n\n    // Scroll the legend or label into view *before* calling focus on the input\n    // to avoid extra scrolling in browsers that don't support `preventScroll`\n    // (which at time of writing is most of them...)\n    $legendOrLabel.scrollIntoView()\n    $input.focus({ preventScroll: true })\n\n    return true\n  }\n\n  /**\n   * Click event handler\n   *\n   * @param {MouseEvent} event - Click event\n   */\n  handleClick(event) {\n    const $target = event.target\n    if ($target && this.focusTarget($target)) {\n      event.preventDefault()\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes\n   */\n  static moduleName = 'nhsuk-error-summary'\n\n  /**\n   * Error summary default config\n   *\n   * @see {@link ErrorSummaryConfig}\n   * @constant\n   * @type {ErrorSummaryConfig}\n   */\n  static defaults = Object.freeze({\n    disableAutoFocus: false\n  })\n\n  /**\n   * Error summary config schema\n   *\n   * @constant\n   * @satisfies {Schema<ErrorSummaryConfig>}\n   */\n  static schema = Object.freeze({\n    properties: {\n      focusOnPageLoad: { type: 'boolean' }, // Deprecated\n      disableAutoFocus: { type: 'boolean' }\n    }\n  })\n}\n\n/**\n * Initialise error summary component\n *\n * @deprecated Use {@link createAll | `createAll(ErrorSummary, options)`} instead.\n * @param {InitOptions & ErrorSummaryConfig} [options]\n */\nexport function initErrorSummary(options) {\n  const { scope: $scope } = normaliseOptions(options)\n\n  const $root = $scope?.querySelector(\n    `[data-module=\"${ErrorSummary.moduleName}\"]`\n  )\n\n  if (!$root) {\n    return\n  }\n\n  new ErrorSummary($root, options)\n}\n\n/**\n * Error summary config\n *\n * @see {@link ErrorSummary.defaults}\n * @typedef {object} ErrorSummaryConfig\n * @property {boolean} [focusOnPageLoad=true] - Deprecated. Use `disableAutoFocus` instead.\n * @property {boolean} [disableAutoFocus=false] - If set to `true` the error\n *   summary will not be focussed when the page loads.\n */\n\n/**\n * @import { createAll, InitOptions } from '../../index.mjs'\n * @import { Schema } from '../../common/configuration/index.mjs'\n */\n","import { closestAttributeValue } from '../../common/closest-attribute-value.mjs'\nimport { ConfigurableComponent } from '../../configurable-component.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * File upload component\n *\n * @augments ConfigurableComponent<FileUploadConfig>\n */\nexport class FileUpload extends ConfigurableComponent {\n  /**\n   * @type {boolean | undefined}\n   */\n  enteredAnotherElement\n\n  /**\n   * @param {Element | null} $root - File input element\n   * @param {FileUploadConfig} [config] - File Upload config\n   */\n  constructor($root, config = {}) {\n    super($root, config)\n\n    const $input = this.$root.querySelector('input')\n\n    if (!($input instanceof HTMLInputElement)) {\n      throw new ElementError({\n        component: FileUpload,\n        element: $input,\n        expectedType: 'HTMLInputElement',\n        identifier: 'Form field (`<input>`)'\n      })\n    }\n\n    if ($input.type !== 'file') {\n      throw new ElementError({\n        component: FileUpload,\n        element: $input,\n        identifier: 'Form field (`<input>`)',\n        expectedType: 'HTMLInputElement with attribute (`type=\"file\"`)'\n      })\n    }\n\n    this.$input = /** @type {HTMLFileInputElement} */ ($input)\n\n    if (!this.$input.id) {\n      throw new ElementError({\n        component: FileUpload,\n        identifier: 'File input (`<input type=\"file\">`) attribute (`id`)'\n      })\n    }\n\n    this.id = this.$input.id\n\n    this.i18n = new I18n(this.config.i18n, {\n      // Read the fallback if necessary rather than have it set in the defaults\n      locale: closestAttributeValue(this.$root, 'lang')\n    })\n\n    const $label = this.findLabel()\n    // Add an ID to the label if it doesn't have one already\n    // so it can be referenced by `aria-labelledby`\n    if (!$label.id) {\n      $label.id = `${this.id}-label`\n    }\n\n    // We need to copy the 'id' of the root element\n    // to the new button replacement element\n    // so that focus will work in the error summary\n    this.$input.id = `${this.id}-input`\n\n    // Hide the native input\n    this.$input.setAttribute('hidden', 'true')\n\n    // Create the file selection button\n    const $button = document.createElement('button')\n    $button.classList.add('nhsuk-file-upload-button')\n    $button.type = 'button'\n    $button.id = this.id\n    $button.classList.add('nhsuk-file-upload-button--empty')\n\n    // Copy `aria-describedby` if present so hints and errors\n    // are associated to the `<button>`\n    const ariaDescribedBy = this.$input.getAttribute('aria-describedby')\n    if (ariaDescribedBy) {\n      $button.setAttribute('aria-describedby', ariaDescribedBy)\n    }\n\n    // Create status element that shows what/how many files are selected\n    const $status = document.createElement('span')\n    $status.className = 'nhsuk-body nhsuk-file-upload-button__status'\n    $status.setAttribute('aria-live', 'polite')\n    $status.innerText = this.i18n.t('noFileChosen')\n\n    $button.appendChild($status)\n\n    const commaSpan = document.createElement('span')\n    commaSpan.className = 'nhsuk-u-visually-hidden'\n    commaSpan.innerText = ', '\n    commaSpan.id = `${this.id}-comma`\n\n    $button.appendChild(commaSpan)\n\n    const containerSpan = document.createElement('span')\n    containerSpan.className =\n      'nhsuk-file-upload-button__pseudo-button-container'\n\n    const buttonSpan = document.createElement('span')\n    buttonSpan.className =\n      'nhsuk-button nhsuk-button--secondary nhsuk-file-upload-button__pseudo-button'\n    buttonSpan.innerText = this.i18n.t('chooseFilesButton')\n\n    containerSpan.appendChild(buttonSpan)\n\n    // Add a space so the button and instruction read correctly\n    // when CSS is disabled\n    containerSpan.insertAdjacentText('beforeend', ' ')\n\n    const instructionSpan = document.createElement('span')\n    instructionSpan.className =\n      'nhsuk-body nhsuk-file-upload-button__instruction'\n    instructionSpan.innerText = this.i18n.t('dropInstruction')\n\n    containerSpan.appendChild(instructionSpan)\n\n    $button.appendChild(containerSpan)\n    $button.setAttribute(\n      'aria-labelledby',\n      `${$label.id} ${commaSpan.id} ${$button.id}`\n    )\n    $button.addEventListener('click', this.onClick.bind(this))\n    $button.addEventListener('dragover', (event) => {\n      // prevent default to allow drop\n      event.preventDefault()\n    })\n\n    // Assemble these all together\n    this.$root.insertAdjacentElement('afterbegin', $button)\n\n    this.$input.setAttribute('tabindex', '-1')\n    this.$input.setAttribute('aria-hidden', 'true')\n\n    // Make all these new variables available to the module\n    this.$button = $button\n    this.$status = $status\n\n    // Bind change event to the underlying input\n    this.$input.addEventListener('change', this.onChange.bind(this))\n\n    // Synchronise the `disabled` state between the button and underlying input\n    this.updateDisabledState()\n    this.observeDisabledState()\n\n    // Handle drop zone visibility\n    // A live region to announce when users enter or leave the drop zone\n    this.$announcements = document.createElement('span')\n    this.$announcements.classList.add('nhsuk-file-upload-announcements')\n    this.$announcements.classList.add('nhsuk-u-visually-hidden')\n    this.$announcements.setAttribute('aria-live', 'assertive')\n    this.$root.insertAdjacentElement('afterend', this.$announcements)\n\n    // if there is no CSS and input is hidden\n    // button will need to handle drop event\n    this.$button.addEventListener('drop', this.onDrop.bind(this))\n\n    // While user is dragging, it gets a little more complex because of Safari.\n    // Safari doesn't fill `relatedTarget` on `dragleave` (nor `dragenter`).\n    // This means we can't use `relatedTarget` to:\n    // - check if the user is still within the wrapper\n    //   (`relatedTarget` being a descendant of the wrapper)\n    // - check if the user is still over the viewport\n    //   (`relatedTarget` being null if outside)\n\n    // Thanks to `dragenter` bubbling, we can listen on the `document` with a\n    // single function and update the visibility based on whether we entered a\n    // node inside or outside the wrapper.\n    document.addEventListener(\n      'dragenter',\n      this.updateDropzoneVisibility.bind(this)\n    )\n\n    // To detect if we're outside the document, we can track if there was a\n    // `dragenter` event preceding a `dragleave`. If there wasn't, this means\n    // we're outside the document.\n    //\n    // The order of events is guaranteed by the HTML specs:\n    // https://html.spec.whatwg.org/multipage/dnd.html#drag-and-drop-processing-model\n    document.addEventListener('dragenter', () => {\n      this.enteredAnotherElement = true\n    })\n\n    document.addEventListener('dragleave', () => {\n      if (!this.enteredAnotherElement && !this.$button.disabled) {\n        this.hideDraggingState()\n        this.$announcements.innerText = this.i18n.t('leftDropZone')\n      }\n\n      this.enteredAnotherElement = false\n    })\n  }\n\n  /**\n   * Updates the visibility of the dropzone as users enters the various elements on the page\n   *\n   * @param {DragEvent} event - The `dragenter` event\n   */\n  updateDropzoneVisibility(event) {\n    if (this.$button.disabled) return\n\n    // DOM interfaces only type `event.target` as `EventTarget`\n    // so we first need to make sure it's a `Node`\n    if (event.target instanceof Node) {\n      if (this.$root.contains(event.target)) {\n        if (event.dataTransfer && isContainingFiles(event.dataTransfer)) {\n          // Only update the class and make the announcement if not already visible\n          // to avoid repeated announcements on NVDA (2024.4) + Firefox (133)\n          if (\n            !this.$button.classList.contains(\n              'nhsuk-file-upload-button--dragging'\n            )\n          ) {\n            this.showDraggingState()\n            this.$announcements.innerText = this.i18n.t('enteredDropZone')\n          }\n        }\n      } else {\n        // Only hide the dropzone if it is visible to prevent announcing user\n        // left the drop zone when they enter the page but haven't reached yet\n        // the file upload component\n        if (\n          this.$button.classList.contains('nhsuk-file-upload-button--dragging')\n        ) {\n          this.hideDraggingState()\n          this.$announcements.innerText = this.i18n.t('leftDropZone')\n        }\n      }\n    }\n  }\n\n  /**\n   * Show the drop zone visually\n   */\n  showDraggingState() {\n    this.$button.classList.add('nhsuk-file-upload-button--dragging')\n  }\n\n  /**\n   * Hides the drop zone visually\n   */\n  hideDraggingState() {\n    this.$button.classList.remove('nhsuk-file-upload-button--dragging')\n  }\n\n  /**\n   * Handles user dropping on the component\n   *\n   * @param {DragEvent} event - The `dragenter` event\n   */\n  onDrop(event) {\n    event.preventDefault()\n\n    if (event.dataTransfer && isContainingFiles(event.dataTransfer)) {\n      this.$input.files = event.dataTransfer.files\n\n      // Dispatch a `change` event so external code that would rely on the `<input>`\n      // dispatching an event when files are dropped still work.\n      // Use a `CustomEvent` so our events are distinguishable from browser's native events\n      this.$input.dispatchEvent(new CustomEvent('change'))\n\n      this.hideDraggingState()\n    }\n  }\n\n  /**\n   * Check if the value of the underlying input has changed\n   */\n  onChange() {\n    const fileCount = this.$input.files.length\n\n    if (fileCount === 0) {\n      // If there are no files, show the default selection text\n      this.$status.innerText = this.i18n.t('noFileChosen')\n      this.$button.classList.add('nhsuk-file-upload-button--empty')\n    } else {\n      if (\n        // If there is 1 file, just show the file name\n        fileCount === 1\n      ) {\n        this.$status.innerText = this.$input.files[0].name\n      } else {\n        // Otherwise, tell the user how many files are selected\n        this.$status.innerText = this.i18n.t('multipleFilesChosen', {\n          count: fileCount\n        })\n      }\n\n      this.$button.classList.remove('nhsuk-file-upload-button--empty')\n    }\n  }\n\n  /**\n   * Looks up the `<label>` element associated to the field\n   *\n   * @returns {HTMLElement} The `<label>` element associated to the field\n   * @throws {ElementError} If the `<label>` cannot be found\n   */\n  findLabel() {\n    // Use `label` in the selector so TypeScript knows the type fo `HTMLElement`\n    const $label = document.querySelector(`label[for=\"${this.$input.id}\"]`)\n\n    if (!$label) {\n      throw new ElementError({\n        component: FileUpload,\n        identifier: `Field label (\\`<label for=${this.$input.id}>\\`)`\n      })\n    }\n\n    return $label\n  }\n\n  /**\n   * When the button is clicked, emulate clicking the actual, hidden file input\n   */\n  onClick() {\n    this.$input.click()\n  }\n\n  /**\n   * Create a mutation observer to check if the input's attributes altered.\n   */\n  observeDisabledState() {\n    const observer = new MutationObserver((mutationList) => {\n      for (const mutation of mutationList) {\n        if (\n          mutation.type === 'attributes' &&\n          mutation.attributeName === 'disabled'\n        ) {\n          this.updateDisabledState()\n        }\n      }\n    })\n\n    observer.observe(this.$input, {\n      attributes: true\n    })\n  }\n\n  /**\n   * Synchronise the `disabled` state between the input and replacement button.\n   */\n  updateDisabledState() {\n    this.$button.disabled = this.$input.disabled\n\n    this.$root.classList.toggle(\n      'nhsuk-drop-zone--disabled',\n      this.$button.disabled\n    )\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'nhsuk-file-upload'\n\n  /**\n   * File upload default config\n   *\n   * @see {@link FileUploadConfig}\n   * @constant\n   * @type {FileUploadConfig}\n   */\n  static defaults = Object.freeze({\n    i18n: {\n      chooseFilesButton: 'Choose file',\n      dropInstruction: 'or drop file',\n      noFileChosen: 'No file chosen',\n      multipleFilesChosen: {\n        // the 'one' string isn't used as the component displays the filename\n        // instead, however it's here for coverage's sake\n        one: '%{count} file chosen',\n        other: '%{count} files chosen'\n      },\n      enteredDropZone: 'Entered drop zone',\n      leftDropZone: 'Left drop zone'\n    }\n  })\n\n  /**\n   * File upload config schema\n   *\n   * @constant\n   * @satisfies {Schema<FileUploadConfig>}\n   */\n  static schema = Object.freeze({\n    properties: {\n      i18n: { type: 'object' }\n    }\n  })\n}\n\n/**\n * Checks if the given `DataTransfer` contains files\n *\n * @param {DataTransfer} dataTransfer - The `DataTransfer` to check\n * @returns {boolean} - `true` if it contains files or we can't infer it, `false` otherwise\n */\nfunction isContainingFiles(dataTransfer) {\n  // Safari sometimes does not provide info about types :'(\n  // In which case best not to assume anything and try to set the files\n  const hasNoTypesInfo = dataTransfer.types.length === 0\n\n  // When dragging images, there's a mix of mime types + Files\n  // which we can't assign to the native input\n  const isDraggingFiles = dataTransfer.types.some((type) => type === 'Files')\n\n  return hasNoTypesInfo || isDraggingFiles\n}\n\n/**\n * @typedef {HTMLInputElement & {files: FileList}} HTMLFileInputElement\n */\n\n/**\n * File upload config\n *\n * @see {@link FileUpload.defaults}\n * @typedef {object} FileUploadConfig\n * @property {FileUploadTranslations} [i18n=FileUpload.defaults.i18n] - File upload translations\n */\n\n/**\n * File upload translations\n *\n * @see {@link FileUpload.defaults.i18n}\n * @typedef {object} FileUploadTranslations\n *\n * Messages used by the component\n * @property {string} [chooseFile] - The text of the button that opens the file picker\n * @property {string} [dropInstruction] - The text informing users they can drop files\n * @property {TranslationPluralForms} [multipleFilesChosen] - The text displayed when multiple files\n *   have been chosen by the user\n * @property {string} [noFileChosen] - The text to displayed when no file has been chosen by the user\n * @property {string} [enteredDropZone] - The text announced by assistive technology\n *   when user drags files and enters the drop zone\n * @property {string} [leftDropZone] - The text announced by assistive technology\n *   when user drags files and leaves the drop zone without dropping\n */\n\n/**\n * @import { Schema } from '../../common/configuration/index.mjs'\n * @import { TranslationPluralForms } from '../../i18n.mjs'\n */\n","import { normaliseOptions } from '../../common/configuration/index.mjs'\nimport { Component } from '../../component.mjs'\nimport { ElementError } from '../../errors/index.mjs'\n\n/**\n * Header component\n */\nexport class Header extends Component {\n  /** @type {HTMLElement | null} */\n  $navigation = null\n\n  /** @type {HTMLElement | null} */\n  $navigationList = null\n\n  /** @type {NodeListOf<HTMLElement> | null} */\n  $navigationItems = null\n\n  /** @type {HTMLElement | null} */\n  $menu = null\n\n  /** @type {HTMLButtonElement | null} */\n  $menuToggle = null\n\n  /** @type {HTMLElement | null} */\n  $menuList = null\n\n  width = 0\n\n  /**\n   * @type {{ element: HTMLElement, right: number }[]}\n   */\n  breakpoints = []\n\n  /**\n   * @type {number | null}\n   */\n  updateNavigationTimer = null\n\n  menuIsEnabled = false\n  menuIsOpen = false\n\n  /**\n   * @param {Element | null} $root - HTML element to use for component\n   */\n  constructor($root) {\n    super($root)\n\n    const $navigation = this.$root.querySelector('.nhsuk-header__navigation')\n    const $navigationList = this.$root.querySelector(\n      '.nhsuk-header__navigation-list'\n    )\n\n    const $navigationItems = /** @type {NodeListOf<HTMLElement>} */ (\n      this.$root.querySelectorAll('.nhsuk-header__navigation-item')\n    )\n\n    const $menu = this.$root.querySelector('.nhsuk-header__menu')\n    const $menuToggle = this.$root.querySelector('.nhsuk-header__menu-toggle')\n\n    // Check for navigation (optional)\n    if ($navigation) {\n      if (!($navigation instanceof HTMLElement)) {\n        throw new ElementError({\n          component: Header,\n          identifier: 'Navigation (`<nav class=\"nhsuk-header__navigation\">`)'\n        })\n      }\n\n      if (!$navigationList || !($navigationList instanceof HTMLElement)) {\n        throw new ElementError({\n          component: Header,\n          identifier: 'List (`<ul class=\"nhsuk-header__navigation-list\">`)'\n        })\n      }\n\n      if (!$navigationItems.length) {\n        throw new ElementError({\n          component: Header,\n          identifier:\n            'List items (`<li class=\"nhsuk-header__navigation-item\">`)'\n        })\n      }\n\n      if (!$menu || !($menu instanceof HTMLElement)) {\n        throw new ElementError({\n          component: Header,\n          identifier: 'Menu item (`<li class=\"nhsuk-header__menu\" hidden>`)'\n        })\n      }\n\n      if (!$menuToggle || !($menuToggle instanceof HTMLButtonElement)) {\n        throw new ElementError({\n          component: Header,\n          identifier:\n            'Menu button (`<button class=\"nhsuk-header__menu-toggle\">`)',\n          expectedType: 'HTMLButtonElement'\n        })\n      }\n\n      this.$navigation = $navigation\n      this.$navigationList = $navigationList\n      this.$navigationItems = $navigationItems\n      this.$menu = $menu\n      this.$menuToggle = $menuToggle\n      this.$menuList = document.createElement('ul')\n    }\n\n    // Save bound functions so we can remove event listeners when unnecessary\n    this.handleEscapeKey = this.onEscapeKey.bind(this)\n    this.handleUpdateNavigation = this.updateNavigation.bind(this)\n    this.handleToggleMenu = this.toggleMenu.bind(this)\n\n    this.setupNavigation()\n    this.updateNavigation()\n  }\n\n  /**\n   * Reset navigation\n   *\n   * Calculate available space by summing the width of each navigation item\n   */\n  resetNavigation() {\n    const { $menu, $navigationList } = this\n    if (!$menu || !$navigationList) {\n      return\n    }\n\n    let right = 0\n\n    // Reset and calculate widths on every resize\n    this.breakpoints.forEach((breakpoint) => {\n      $navigationList.insertBefore(breakpoint.element, $menu)\n\n      // Calculate widths\n      right += breakpoint.element.offsetWidth\n      breakpoint.right = right\n    })\n\n    // Reset space for menu button\n    this.width = $navigationList.offsetWidth\n  }\n\n  /**\n   * Add the breakpoints with default positions\n   */\n  setupNavigation() {\n    const { $navigationItems } = this\n\n    // Skip with no navigation items\n    if (!$navigationItems) {\n      return\n    }\n\n    $navigationItems.forEach((element) => {\n      this.breakpoints.push({ element, right: 0 })\n    })\n\n    // Add resize listener for next update\n    window.addEventListener('resize', () => {\n      if (this.updateNavigationTimer) {\n        window.clearTimeout(this.updateNavigationTimer)\n      }\n\n      this.updateNavigationTimer = window.setTimeout(\n        this.handleUpdateNavigation,\n        100\n      )\n    })\n  }\n\n  /**\n   * Add the menu to the DOM\n   */\n  setupMenu() {\n    const { $menu, $menuList } = this\n\n    // Skip with no menu or when already appended\n    if (!$menu || !$menuList || $menuList.parentElement) {\n      return\n    }\n\n    $menuList.classList.add('nhsuk-header__menu-list')\n    $menuList.setAttribute('hidden', '')\n    $menu.appendChild($menuList)\n  }\n\n  /**\n   * Enable the menu\n   */\n  enableMenu() {\n    const { $menu, $menuToggle } = this\n\n    // Skip with no menu or when already enabled\n    if (!$menu || !$menuToggle || this.menuIsEnabled) {\n      return\n    }\n\n    this.menuIsEnabled = true\n    $menu.removeAttribute('hidden')\n\n    // Add click listener to toggle menu\n    $menuToggle.addEventListener('click', this.handleToggleMenu)\n  }\n\n  /**\n   * Disable the menu\n   */\n  disableMenu() {\n    const { $menu, $menuToggle } = this\n\n    // Skip with no menu or when already disabled\n    if (!$menu || !$menuToggle || !this.menuIsEnabled) {\n      return\n    }\n\n    this.closeMenu()\n    this.menuIsEnabled = false\n    $menu.setAttribute('hidden', '')\n\n    // Remove click listener from toggle menu\n    $menuToggle.removeEventListener('click', this.handleToggleMenu)\n  }\n\n  /**\n   * Close the menu\n   *\n   * Closes the menu and updates accessibility state.\n   *\n   * Removes the bottom border from the navigation\n   */\n  closeMenu() {\n    const { $menuList, $menuToggle, $navigation } = this\n\n    // Skip with no menu or when already closed\n    if (\n      !$navigation ||\n      !$menuList ||\n      !$menuToggle ||\n      !this.menuIsEnabled ||\n      !this.menuIsOpen\n    ) {\n      return\n    }\n\n    this.menuIsOpen = false\n    $menuList.setAttribute('hidden', '')\n    $menuToggle.setAttribute('aria-expanded', 'false')\n    $navigation.style.removeProperty('border-bottom-width')\n\n    // Remove escape key listener to close menu\n    document.removeEventListener('keydown', this.handleEscapeKey)\n  }\n\n  /**\n   * Escape key handler\n   *\n   * This function is called when the user\n   * presses the escape key to close the menu.\n   *\n   * @param {KeyboardEvent} event - Key press event\n   */\n  onEscapeKey(event) {\n    if (event.key === 'Escape') {\n      this.closeMenu()\n    }\n  }\n\n  /**\n   * Open the menu\n   *\n   * Opens the menu and updates accessibility state.\n   *\n   * The menu is absolutely positioned, so it adds a border\n   * to the bottom of the navigation to prevent it from overlapping\n   *\n   * Adds event listeners for the close button,\n   */\n  openMenu() {\n    const { $menuList, $menuToggle, $navigation } = this\n\n    // Skip with no menu or when already open\n    if (\n      !$navigation ||\n      !$menuList ||\n      !$menuToggle ||\n      !this.menuIsEnabled ||\n      this.menuIsOpen\n    ) {\n      return\n    }\n\n    this.menuIsOpen = true\n    $menuList.removeAttribute('hidden')\n    $menuToggle.setAttribute('aria-expanded', 'true')\n    $navigation.style.setProperty(\n      'border-bottom-width',\n      `${$menuList.offsetHeight}px`\n    )\n\n    // Add escape key listener to close menu\n    document.addEventListener('keydown', this.handleEscapeKey)\n  }\n\n  /**\n   * Handle menu button click\n   *\n   * Toggles the menu between open and closed\n   */\n  toggleMenu() {\n    if (!this.menuIsEnabled) {\n      return\n    }\n\n    if (this.menuIsOpen) {\n      this.closeMenu()\n    } else {\n      this.openMenu()\n    }\n  }\n\n  /**\n   * Update navigation for the available space\n   *\n   * Moves all items that overflow the available space into the menu\n   */\n  updateNavigation() {\n    this.resetNavigation()\n\n    // Check for items that overflow\n    let menuItems = this.breakpoints.filter((breakpoint) => {\n      return breakpoint.right > this.width\n    })\n\n    // Disable menu if empty\n    if (!menuItems.length) {\n      this.disableMenu()\n      return\n    }\n\n    this.setupMenu()\n    this.enableMenu()\n\n    const { $menu, $menuList, $navigation } = this\n\n    // Skip when no menu or menu list\n    if (!$menu || !$menuList || !$navigation) {\n      return\n    }\n\n    // Subtract space for menu button\n    this.width -= $menu.offsetWidth\n\n    // Move items based on available width\n    this.breakpoints.forEach((breakpoint) => {\n      if (breakpoint.right > this.width) {\n        $menuList.insertAdjacentElement('beforeend', breakpoint.element)\n      }\n    })\n\n    // Update menu height if open\n    if (this.menuIsOpen) {\n      $navigation.style.setProperty(\n        'border-bottom-width',\n        `${$menuList.offsetHeight}px`\n      )\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes\n   */\n  static moduleName = 'nhsuk-header'\n}\n\n/**\n * Initialise header component\n *\n * @deprecated Use {@link createAll | `createAll(Header)`} instead.\n * @param {InitOptions} [options]\n */\nexport function initHeader(options) {\n  const { scope: $scope } = normaliseOptions(options)\n\n  const $root = $scope?.querySelector(`[data-module=\"${Header.moduleName}\"]`)\n\n  if (!$root) {\n    return\n  }\n\n  new Header($root)\n}\n\n/**\n * @import { createAll, InitOptions } from '../../index.mjs'\n */\n","import { normaliseOptions } from '../../common/configuration/index.mjs'\nimport { setFocus } from '../../common/index.mjs'\nimport { ConfigurableComponent } from '../../configurable-component.mjs'\n\n/**\n * Notification banner component\n *\n * Adapted from https://github.com/alphagov/govuk-frontend/blob/v5.10.2/packages/govuk-frontend/src/govuk/components/notification-banner/notification-banner.mjs\n *\n * @augments ConfigurableComponent<NotificationBannerConfig>\n */\nexport class NotificationBanner extends ConfigurableComponent {\n  /**\n   * @param {Element | null} $root - HTML element to use for component\n   * @param {NotificationBannerConfig} [config] - Notification banner config\n   */\n  constructor($root, config = {}) {\n    super($root, config)\n\n    /**\n     * Focus the notification banner\n     *\n     * If `role=\"alert\"` is set, focus the element to help some assistive\n     * technologies prioritise announcing it.\n     *\n     * You can turn off the auto-focus functionality by setting\n     * `data-disable-auto-focus=\"true\"` in the component HTML. You might wish to\n     * do this based on user research findings, or to avoid a clash with another\n     * element which should be focused when the page loads.\n     */\n    if (\n      this.$root.getAttribute('role') === 'alert' &&\n      !this.config.disableAutoFocus\n    ) {\n      setFocus(this.$root)\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'nhsuk-notification-banner'\n\n  /**\n   * Notification banner default config\n   *\n   * @see {@link NotificationBannerConfig}\n   * @constant\n   * @type {NotificationBannerConfig}\n   */\n  static defaults = Object.freeze({\n    disableAutoFocus: false\n  })\n\n  /**\n   * Notification banner config schema\n   *\n   * @constant\n   * @satisfies {Schema<NotificationBannerConfig>}\n   */\n  static schema = Object.freeze({\n    properties: {\n      disableAutoFocus: { type: 'boolean' }\n    }\n  })\n}\n\n/**\n * Initialise notification banner component\n *\n * @deprecated Use {@link createAll | `createAll(NotificationBanner, options)`} instead.\n * @param {InitOptions & NotificationBannerConfig} [options]\n */\nexport function initNotificationBanners(options) {\n  const { scope: $scope } = normaliseOptions(options)\n\n  const $notificationBanners = $scope?.querySelectorAll(\n    `[data-module=\"${NotificationBanner.moduleName}\"]`\n  )\n\n  $notificationBanners?.forEach(($notificationBanner) => {\n    new NotificationBanner($notificationBanner, options)\n  })\n}\n\n/**\n * Notification banner config\n *\n * @typedef {object} NotificationBannerConfig\n * @property {boolean} [disableAutoFocus=false] - If set to `true` the\n *   notification banner will not be focussed when the page loads. This only\n *   applies if the component has a `role` of `alert` â€“ in other cases the\n *   component will not be focused on page load, regardless of this option.\n */\n\n/**\n * @import { createAll, InitOptions } from '../../index.mjs'\n * @import { Schema } from '../../common/configuration/index.mjs'\n */\n","import { normaliseOptions } from '../../common/configuration/index.mjs'\nimport { toggleConditionalInput } from '../../common/index.mjs'\nimport { Component } from '../../component.mjs'\nimport { ElementError } from '../../errors/index.mjs'\n\n/**\n * Radios component\n *\n * Conditionally show content when a radio button is checked\n *\n * Test at {@link http://localhost:3000/nhsuk-frontend/components/radios/with-conditional-content/}\n */\nexport class Radios extends Component {\n  /**\n   * @param {Element | null} $root - HTML element to use for component\n   */\n  constructor($root) {\n    super($root)\n\n    const $inputs = this.$root.querySelectorAll('input[type=\"radio\"]')\n    if (!$inputs.length) {\n      throw new ElementError({\n        component: Radios,\n        identifier: 'Form inputs (`<input type=\"radio\">`)'\n      })\n    }\n\n    this.$inputs = $inputs\n\n    this.$inputs.forEach(($input) => {\n      const targetId = $input.getAttribute('aria-controls')\n\n      // Skip radios without aria-controls attributes\n      if (!targetId) {\n        return\n      }\n\n      // Throw if target conditional element does not exist.\n      if (!document.getElementById(targetId)) {\n        throw new ElementError({\n          component: Radios,\n          identifier: `Conditional reveal (\\`id=\"${targetId}\"\\`)`\n        })\n      }\n    })\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event.\n    window.addEventListener('pageshow', () => this.syncAllConditionalReveals())\n\n    // Although we've set up handlers to sync state on the pageshow event, init\n    // could be called after those events have fired, for example if they are\n    // added to the page dynamically, so sync now too.\n    this.syncAllConditionalReveals()\n\n    // Handle events\n    this.$root.addEventListener('click', (event) => this.handleClick(event))\n  }\n\n  /**\n   * Sync the conditional reveal states for all radio buttons in this component.\n   */\n  syncAllConditionalReveals() {\n    this.$inputs.forEach(($input) =>\n      this.syncConditionalRevealWithInputState($input)\n    )\n  }\n\n  /**\n   * Sync conditional reveal with the input state\n   *\n   * Synchronise the visibility of the conditional reveal, and its accessible\n   * state, with the input's checked state.\n   *\n   * @param {HTMLInputElement} $input - Radio input\n   */\n  syncConditionalRevealWithInputState($input) {\n    toggleConditionalInput($input, 'nhsuk-radios__conditional--hidden')\n  }\n\n  /**\n   * Toggle classes and attributes\n   *\n   * @param {MouseEvent} event - Click event\n   */\n  handleClick(event) {\n    const $clickedInput = event.target\n\n    // Ignore clicks on things that aren't radio buttons\n    if (\n      !($clickedInput instanceof HTMLInputElement) ||\n      $clickedInput.type !== 'radio'\n    ) {\n      return\n    }\n\n    // We only need to consider radios with conditional reveals, which will have\n    // aria-controls attributes.\n    const $allInputs = document.querySelectorAll(\n      'input[type=\"radio\"][aria-controls]'\n    )\n\n    const $clickedInputForm = $clickedInput.form\n    const $clickedInputName = $clickedInput.name\n\n    $allInputs.forEach(($input) => {\n      const hasSameFormOwner = $input.form === $clickedInputForm\n      const hasSameName = $input.name === $clickedInputName\n\n      if (hasSameName && hasSameFormOwner) {\n        this.syncConditionalRevealWithInputState($input)\n      }\n    })\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes\n   */\n  static moduleName = 'nhsuk-radios'\n}\n\n/**\n * Initialise radios component\n *\n * @deprecated Use {@link createAll | `createAll(Radios)`} instead.\n * @param {InitOptions} [options]\n */\nexport function initRadios(options) {\n  const { scope: $scope } = normaliseOptions(options)\n\n  const $radios = $scope?.querySelectorAll(\n    `[data-module=\"${Radios.moduleName}\"]`\n  )\n\n  $radios?.forEach(($root) => {\n    new Radios($root)\n  })\n}\n\n/**\n * @import { createAll, InitOptions } from '../../index.mjs'\n */\n","/* eslint-disable es-x/no-global-this */\n\nimport { normaliseOptions } from '../../common/configuration/index.mjs'\nimport { setFocus } from '../../common/index.mjs'\nimport { Component } from '../../component.mjs'\nimport { ElementError } from '../../errors/index.mjs'\n\nconst _self =\n  typeof globalThis !== 'undefined'\n    ? globalThis // Modern browsers, Node.js\n    : self // Old browsers, web workers\n\n/**\n * Skip link component\n *\n * When using VoiceOver on iOS, focus remains on the skip link anchor\n * when elected so the next focusable element is not at the jumped to area.\n *\n * @augments Component<HTMLAnchorElement>\n */\nexport class SkipLink extends Component {\n  static elementType = _self.HTMLAnchorElement\n\n  /**\n   * @param {Element | null} $root - HTML element to use for component\n   */\n  constructor($root) {\n    super($root)\n\n    const hash = this.$root.hash\n    const href = this.$root.getAttribute('href') ?? ''\n\n    const linkedElementId = hash.replace('#', '')\n    if (!linkedElementId) {\n      throw new ElementError({\n        component: SkipLink,\n        identifier: `Target link (\\`href=\"${href}\"\\`) hash fragment`\n      })\n    }\n\n    const $linkedElement = document.getElementById(linkedElementId)\n\n    // Check for linked element\n    if (!$linkedElement) {\n      throw new ElementError({\n        component: SkipLink,\n        element: $linkedElement,\n        identifier: `Target content (\\`id=\"${linkedElementId}\"\\`)`\n      })\n    }\n\n    /**\n     * Focus the linked element on click\n     *\n     * Adds a helper CSS class to hide native focus styles,\n     * but removes it on blur to restore native focus styles\n     */\n    this.$root.addEventListener('click', () =>\n      setFocus($linkedElement, {\n        onBeforeFocus() {\n          $linkedElement.classList.add('nhsuk-skip-link-focused-element')\n        },\n        onBlur() {\n          $linkedElement.classList.remove('nhsuk-skip-link-focused-element')\n        }\n      })\n    )\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes\n   */\n  static moduleName = 'nhsuk-skip-link'\n}\n\n/**\n * Initialise skip link component\n *\n * @deprecated Use {@link createAll | `createAll(SkipLink)`} instead.\n * @param {InitOptions} [options]\n */\nexport function initSkipLinks(options) {\n  const { scope: $scope } = normaliseOptions(options)\n\n  const $skipLinks = $scope?.querySelectorAll(\n    `[data-module=\"${SkipLink.moduleName}\"]`\n  )\n\n  $skipLinks?.forEach(($root) => {\n    new SkipLink($root)\n  })\n}\n\n/**\n * @import { createAll, InitOptions } from '../../index.mjs'\n */\n","import { normaliseOptions } from '../../common/configuration/index.mjs'\nimport { getBreakpoint } from '../../common/index.mjs'\nimport { Component } from '../../component.mjs'\nimport { ElementError } from '../../errors/index.mjs'\n\n/**\n * Tabs component\n */\nexport class Tabs extends Component {\n  jsHiddenClass = 'nhsuk-tabs__panel--hidden'\n  changingHash = false\n\n  /**\n   * @type {MediaQueryList | null}\n   */\n  mql = null\n\n  /**\n   * @param {Element | null} $root - HTML element to use for component\n   */\n  constructor($root) {\n    super($root)\n\n    const $tabs = this.$root.querySelectorAll('a.nhsuk-tabs__tab')\n    if (!$tabs.length) {\n      throw new ElementError({\n        component: Tabs,\n        identifier: 'Links (`<a class=\"nhsuk-tabs__tab\">`)'\n      })\n    }\n\n    this.$tabs = $tabs\n\n    // Save bound functions so we can remove event listeners during teardown\n    this.boundTabClick = this.onTabClick.bind(this)\n    this.boundTabKeydown = this.onTabKeydown.bind(this)\n    this.boundOnHashChange = this.onHashChange.bind(this)\n\n    const $tabList = this.$root.querySelector('.nhsuk-tabs__list')\n    const $tabListItems = this.$root.querySelectorAll('.nhsuk-tabs__list-item')\n\n    if (!$tabList) {\n      throw new ElementError({\n        component: Tabs,\n        identifier: 'List (`<ul class=\"nhsuk-tabs__list\">`)'\n      })\n    }\n\n    if (!$tabListItems.length) {\n      throw new ElementError({\n        component: Tabs,\n        identifier: 'List items (`<li class=\"nhsuk-tabs__list-item\">`)'\n      })\n    }\n\n    this.$tabList = $tabList\n    this.$tabListItems = $tabListItems\n\n    this.setupResponsiveChecks()\n  }\n\n  /**\n   * Setup viewport resize check\n   */\n  setupResponsiveChecks() {\n    const breakpoint = getBreakpoint('tablet')\n\n    if (!breakpoint.value) {\n      throw new ElementError({\n        component: Tabs,\n        identifier: `CSS custom property (\\`${breakpoint.property}\\`) on pseudo-class \\`:root\\``\n      })\n    }\n\n    // Media query list for NHS.UK frontend tablet breakpoint\n    this.mql = window.matchMedia(`(min-width: ${breakpoint.value})`)\n\n    // MediaQueryList.addEventListener isn't supported by Safari < 14 so we need\n    // to be able to fall back to the deprecated MediaQueryList.addListener\n    if ('addEventListener' in this.mql) {\n      this.mql.addEventListener('change', () => this.checkMode())\n    } else {\n      // @ts-expect-error Property 'addListener' does not exist\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      this.mql.addListener(() => this.checkMode())\n    }\n\n    this.checkMode()\n  }\n\n  /**\n   * Setup or teardown handler for viewport resize check\n   */\n  checkMode() {\n    if (this.mql?.matches) {\n      this.setup()\n    } else {\n      this.teardown()\n    }\n  }\n\n  /**\n   * Setup tab component\n   */\n  setup() {\n    this.$tabList.setAttribute('role', 'tablist')\n\n    this.$tabListItems.forEach(($item) => {\n      $item.setAttribute('role', 'presentation')\n    })\n\n    this.$tabs.forEach(($tab) => {\n      // Set HTML attributes\n      this.setAttributes($tab)\n\n      // Handle events\n      $tab.addEventListener('click', this.boundTabClick, true)\n      $tab.addEventListener('keydown', this.boundTabKeydown, true)\n\n      // Remove old active panels\n      this.hideTab($tab)\n    })\n\n    // Show either the active tab according to the URL's hash or the first tab\n    const $activeTab = this.getTab(window.location.hash) ?? this.$tabs[0]\n\n    this.showTab($activeTab)\n\n    // Handle hashchange events\n    window.addEventListener('hashchange', this.boundOnHashChange, true)\n  }\n\n  /**\n   * Teardown tab component\n   */\n  teardown() {\n    this.$tabList.removeAttribute('role')\n\n    this.$tabListItems.forEach(($item) => {\n      $item.removeAttribute('role')\n    })\n\n    this.$tabs.forEach(($tab) => {\n      // Remove events\n      $tab.removeEventListener('click', this.boundTabClick, true)\n      $tab.removeEventListener('keydown', this.boundTabKeydown, true)\n\n      // Unset HTML attributes\n      this.unsetAttributes($tab)\n    })\n\n    // Remove hashchange event handler\n    window.removeEventListener('hashchange', this.boundOnHashChange, true)\n  }\n\n  /**\n   * Handle hashchange event\n   */\n  onHashChange() {\n    const { hash } = window.location\n    const $tabWithHash = this.getTab(hash)\n    if (!$tabWithHash) {\n      return\n    }\n\n    // Prevent changing the hash\n    if (this.changingHash) {\n      this.changingHash = false\n      return\n    }\n\n    // Show either the active tab according to the URL's hash or the first tab\n    const $previousTab = this.getCurrentTab()\n    if (!$previousTab) {\n      return\n    }\n\n    this.hideTab($previousTab)\n    this.showTab($tabWithHash)\n    $tabWithHash.focus()\n  }\n\n  /**\n   * Hide panel for tab link\n   *\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  hideTab($tab) {\n    this.unhighlightTab($tab)\n    this.hidePanel($tab)\n  }\n\n  /**\n   * Show panel for tab link\n   *\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  showTab($tab) {\n    this.highlightTab($tab)\n    this.showPanel($tab)\n  }\n\n  /**\n   * Get tab link by hash\n   *\n   * @param {string} hash - Hash fragment including #\n   */\n  getTab(hash) {\n    return this.$root.querySelector(`a.nhsuk-tabs__tab[href=\"${hash}\"]`)\n  }\n\n  /**\n   * Set tab link and panel attributes\n   *\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  setAttributes($tab) {\n    const panelId = $tab.hash.replace('#', '')\n    if (!panelId) {\n      return\n    }\n\n    // set tab attributes\n    $tab.setAttribute('id', `tab_${panelId}`)\n    $tab.setAttribute('role', 'tab')\n    $tab.setAttribute('aria-controls', panelId)\n    $tab.setAttribute('aria-selected', 'false')\n    $tab.setAttribute('tabindex', '-1')\n\n    // set panel attributes\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.setAttribute('role', 'tabpanel')\n    $panel.setAttribute('aria-labelledby', $tab.id)\n    $panel.classList.add(this.jsHiddenClass)\n  }\n\n  /**\n   * Unset tab link and panel attributes\n   *\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  unsetAttributes($tab) {\n    // unset tab attributes\n    $tab.removeAttribute('id')\n    $tab.removeAttribute('role')\n    $tab.removeAttribute('aria-controls')\n    $tab.removeAttribute('aria-selected')\n    $tab.removeAttribute('tabindex')\n\n    // unset panel attributes\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.removeAttribute('role')\n    $panel.removeAttribute('aria-labelledby')\n    $panel.removeAttribute('tabindex')\n    $panel.classList.remove(this.jsHiddenClass)\n  }\n\n  /**\n   * Handle tab link clicks\n   *\n   * @param {MouseEvent} event - Mouse click event\n   */\n  onTabClick(event) {\n    const $currentTab = this.getCurrentTab()\n    const $newTab = event.currentTarget\n\n    if (!$currentTab || !($newTab instanceof HTMLAnchorElement)) {\n      return\n    }\n\n    event.preventDefault()\n\n    this.hideTab($currentTab)\n    this.showTab($newTab)\n    this.createHistoryEntry($newTab)\n  }\n\n  /**\n   * Update browser URL hash fragment for tab\n   *\n   * - Allows back/forward to navigate tabs\n   * - Avoids page jump when hash changes\n   *\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  createHistoryEntry($tab) {\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    // Save and restore the id\n    // so the page doesn't jump when a user clicks a tab (which changes the hash)\n    const panelId = $panel.id\n    $panel.id = ''\n    this.changingHash = true\n    window.location.hash = panelId\n    $panel.id = panelId\n  }\n\n  /**\n   * Handle tab keydown event\n   *\n   * - Press right/down arrow for next tab\n   * - Press left/up arrow for previous tab\n   *\n   * @param {KeyboardEvent} event - Keydown event\n   */\n  onTabKeydown(event) {\n    switch (event.key) {\n      // 'Left', 'Right', 'Up' and 'Down' required for Edge 16 support.\n      case 'ArrowLeft':\n      case 'ArrowUp':\n      case 'Left':\n      case 'Up':\n        this.activatePreviousTab()\n        event.preventDefault()\n        break\n      case 'ArrowRight':\n      case 'ArrowDown':\n      case 'Right':\n      case 'Down':\n        this.activateNextTab()\n        event.preventDefault()\n        break\n    }\n  }\n\n  /**\n   * Activate next tab\n   */\n  activateNextTab() {\n    const $currentTab = this.getCurrentTab()\n    if (!$currentTab?.parentElement) {\n      return\n    }\n\n    const $nextTabListItem = $currentTab.parentElement.nextElementSibling\n    if (!$nextTabListItem) {\n      return\n    }\n\n    const $nextTab = $nextTabListItem.querySelector('a.nhsuk-tabs__tab')\n    if (!$nextTab) {\n      return\n    }\n\n    this.hideTab($currentTab)\n    this.showTab($nextTab)\n    $nextTab.focus()\n    this.createHistoryEntry($nextTab)\n  }\n\n  /**\n   * Activate previous tab\n   */\n  activatePreviousTab() {\n    const $currentTab = this.getCurrentTab()\n    if (!$currentTab?.parentElement) {\n      return\n    }\n\n    const $previousTabListItem =\n      $currentTab.parentElement.previousElementSibling\n    if (!$previousTabListItem) {\n      return\n    }\n\n    const $previousTab = $previousTabListItem.querySelector('a.nhsuk-tabs__tab')\n    if (!$previousTab) {\n      return\n    }\n\n    this.hideTab($currentTab)\n    this.showTab($previousTab)\n    $previousTab.focus()\n    this.createHistoryEntry($previousTab)\n  }\n\n  /**\n   * Get tab panel for tab link\n   *\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  getPanel($tab) {\n    const panelId = $tab.hash.replace('#', '')\n    if (!panelId) {\n      return null\n    }\n\n    return this.$root.querySelector(`#${panelId}`)\n  }\n\n  /**\n   * Show tab panel for tab link\n   *\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  showPanel($tab) {\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.classList.remove(this.jsHiddenClass)\n  }\n\n  /**\n   * Hide tab panel for tab link\n   *\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  hidePanel($tab) {\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.classList.add(this.jsHiddenClass)\n  }\n\n  /**\n   * Unset 'selected' state for tab link\n   *\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  unhighlightTab($tab) {\n    if (!$tab.parentElement) {\n      return\n    }\n\n    $tab.setAttribute('aria-selected', 'false')\n    $tab.parentElement.classList.remove('nhsuk-tabs__list-item--selected')\n    $tab.setAttribute('tabindex', '-1')\n  }\n\n  /**\n   * Set 'selected' state for tab link\n   *\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  highlightTab($tab) {\n    if (!$tab.parentElement) {\n      return\n    }\n\n    $tab.setAttribute('aria-selected', 'true')\n    $tab.parentElement.classList.add('nhsuk-tabs__list-item--selected')\n    $tab.setAttribute('tabindex', '0')\n  }\n\n  /**\n   * Get current tab link\n   */\n  getCurrentTab() {\n    return this.$root.querySelector(\n      '.nhsuk-tabs__list-item--selected a.nhsuk-tabs__tab'\n    )\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes\n   */\n  static moduleName = 'nhsuk-tabs'\n}\n\n/**\n * Initialise tabs component\n *\n * @deprecated Use {@link createAll | `createAll(Tabs)`} instead.\n * @param {InitOptions} [options]\n */\nexport function initTabs(options) {\n  const { scope: $scope } = normaliseOptions(options)\n\n  const $tabs = $scope?.querySelectorAll(`[data-module=\"${Tabs.moduleName}\"]`)\n\n  $tabs?.forEach(($root) => {\n    new Tabs($root)\n  })\n}\n\n/**\n * @import { createAll, InitOptions } from '../../index.mjs'\n */\n","import { normaliseOptions } from './common/configuration/index.mjs'\nimport { isObject, isSupported } from './common/index.mjs'\nimport {\n  Button,\n  CharacterCount,\n  Checkboxes,\n  ErrorSummary,\n  FileUpload,\n  Header,\n  NotificationBanner,\n  Radios,\n  SkipLink,\n  Tabs\n} from './components/index.mjs'\nimport { ElementError, SupportError } from './errors/index.mjs'\n\n/**\n * Initialise all components\n *\n * Use the `data-module` attributes to find and initialise all of the\n * components provided as part of NHS.UK frontend.\n *\n * @overload\n * @param {Config} [config] - Config for all components (with optional scope)\n * @returns {void}\n */\n\n/**\n * @overload\n * @param {Element | Document | null} [$scope] - Scope of the document to search within\n * @returns {void}\n */\n\n/**\n * @param {Config | Element | Document | null} [scopeOrConfig]\n */\nexport function initAll(scopeOrConfig = {}) {\n  const config = isObject(scopeOrConfig) ? scopeOrConfig : {}\n\n  // Extract initialisation options\n  const options = normaliseOptions(scopeOrConfig)\n\n  try {\n    // Skip initialisation when NHS.UK frontend is not supported\n    if (!isSupported()) {\n      throw new SupportError()\n    }\n\n    // Users can initialise NHS.UK frontend in certain sections of the page\n    // unless the scope is null (for example, query selector not found)\n    if (options.scope === null) {\n      throw new ElementError({\n        element: options.scope,\n        identifier: 'NHS.UK frontend scope element (`$scope`)'\n      })\n    }\n  } catch (error) {\n    if (options.onError) {\n      options.onError(error, {\n        config\n      })\n    } else {\n      console.log(error)\n    }\n\n    return\n  }\n\n  const components = /** @type {const} */ ([\n    [Button, config.button],\n    [CharacterCount, config.characterCount],\n    [Checkboxes],\n    [ErrorSummary, config.errorSummary],\n    [FileUpload, config.fileUpload],\n    [Header],\n    [NotificationBanner, config.notificationBanner],\n    [Radios],\n    [SkipLink],\n    [Tabs]\n  ])\n\n  components.forEach(([Component, componentConfig]) => {\n    createAll(Component, componentConfig, options)\n  })\n}\n\n/**\n * Create all instances of a specific component on the page\n *\n * Uses the `data-module` attribute to find all elements matching the specified\n * component on the page, creating instances of the component object for each\n * of them.\n *\n * Any component errors will be caught and logged to the console.\n *\n * @template {CompatibleClass | CompatibleClass<typeof ConfigurableComponent>} ComponentClass\n * @overload\n * @param {ComponentClass} Component - Component class to initialise\n * @param {ComponentConfig<ComponentClass>} [config] - Config supplied to component\n * @param {CreateAllOptions<ComponentClass>} [options] - Options including scope of the document to search within and callback function if error throw by component on init\n * @returns {InstanceType<ComponentClass>[]} Array of initialised components\n */\n\n/**\n * @template {CompatibleClass | CompatibleClass<typeof ConfigurableComponent>} ComponentClass\n * @overload\n * @param {ComponentClass} Component - Component class to initialise\n * @param {ComponentConfig<ComponentClass>} [config] - Config supplied to component\n * @param {OnErrorCallback<ComponentClass>} [onError] - Initialisation error callback\n * @returns {InstanceType<ComponentClass>[]} Array of initialised components\n */\n\n/**\n * @template {CompatibleClass | CompatibleClass<typeof ConfigurableComponent>} ComponentClass\n * @overload\n * @param {ComponentClass} Component - Component class to initialise\n * @param {ComponentConfig<ComponentClass>} [config] - Config supplied to component\n * @param {Element | Document | null} [$scope] - Scope of the document to search within\n * @returns {InstanceType<ComponentClass>[]} Array of initialised components\n */\n\n/**\n * @template {CompatibleClass | CompatibleClass<typeof ConfigurableComponent>} ComponentClass\n * @param {ComponentClass} Component - Component class to initialise\n * @param {ComponentConfig<ComponentClass>} [config] - Config supplied to component\n * @param {CreateAllOptions<ComponentClass> | OnErrorCallback<ComponentClass> | Element | Document | null} [scopeOrOptions]\n */\nexport function createAll(Component, config, scopeOrOptions) {\n  let /** @type {NodeListOf<Element> | undefined} */ $elements\n\n  // Extract initialisation options\n  const options = normaliseOptions(scopeOrOptions)\n\n  try {\n    // Skip initialisation when NHS.UK frontend is not supported\n    if (!isSupported()) {\n      throw new SupportError()\n    }\n\n    // Users can initialise NHS.UK frontend in certain sections of the page\n    // unless the scope is null (for example, query selector not found)\n    if (options.scope === null) {\n      throw new ElementError({\n        element: options.scope,\n        component: Component,\n        identifier: 'Scope element (`$scope`)'\n      })\n    }\n\n    $elements = options.scope?.querySelectorAll(\n      `[data-module=\"${Component.moduleName}\"]`\n    )\n  } catch (error) {\n    if (options.onError) {\n      options.onError(error, {\n        component: Component,\n        config\n      })\n    } else {\n      console.log(error)\n    }\n\n    return []\n  }\n\n  return Array.from($elements ?? [])\n    .map(($element) => {\n      try {\n        return /** @type {InstanceType<ComponentClass>} */ (\n          // Only pass config to components that accept it\n          !!config && 'defaults' in Component\n            ? new Component($element, config)\n            : new Component($element)\n        )\n      } catch (error) {\n        if (options.onError) {\n          options.onError(error, {\n            element: $element,\n            component: Component,\n            config\n          })\n        } else {\n          console.log(error)\n        }\n\n        return null\n      }\n    })\n    .filter((instance) => !!instance) // Exclude components that errored\n}\n\nexport * from './i18n.mjs'\nexport * from './common/index.mjs'\nexport * from './components/index.mjs'\nexport * from './errors/index.mjs'\n\n/**\n * NHS.UK frontend config for all components via `initAll()`\n *\n * @typedef {object} Config\n * @property {Element | Document | null} [scope] - Scope of the document to search within\n * @property {OnErrorCallback<CompatibleClass>} [onError] - Initialisation error callback\n * @property {ComponentConfig<typeof Button>} [button] - Button config\n * @property {ComponentConfig<typeof CharacterCount>} [characterCount] - Character count config\n * @property {ComponentConfig<typeof ErrorSummary>} [errorSummary] - Error Summary config\n * @property {ComponentConfig<typeof FileUpload>} [fileUpload] - File upload config\n * @property {ComponentConfig<typeof NotificationBanner>} [notificationBanner] - Notification Banner config\n */\n\n/**\n * Component config\n *\n * @template {CompatibleClass} ComponentClass\n * @typedef {ConstructorParameters<ComponentClass>[1]} ComponentConfig\n */\n\n/**\n * Initialisation error context\n *\n * Contains the element, component class and configuration\n *\n * @template {CompatibleClass} ComponentClass\n * @typedef {object} ErrorContext\n * @property {Element} [element] - Element used for component module initialisation\n * @property {ComponentClass} [component] - Class of component\n * @property {Config | ComponentConfig<ComponentClass>} config - Config supplied to components\n */\n\n/**\n * Initialisation error callback\n *\n * @template {CompatibleClass} ComponentClass\n * @callback OnErrorCallback\n * @param {unknown} error - Thrown error\n * @param {ErrorContext<ComponentClass>} context - Object containing the element, component class and configuration\n */\n\n/**\n * Initialisation options\n *\n * @template {CompatibleClass} ComponentClass\n * @typedef {object} CreateAllOptions\n * @property {Element | Document | null} [scope] - Scope of the document to search within\n * @property {OnErrorCallback<ComponentClass>} [onError] - Initialisation error callback\n */\n\n/**\n * @import { CompatibleClass } from './component.mjs'\n * @import { ConfigurableComponent } from './configurable-component.mjs'\n */\n"],"names":["closestAttributeValue","$element","attributeName","$closestElementWithAttribute","closest","getAttribute","version","toggleConditionalInput","$input","className","HTMLInputElement","targetId","target","document","getElementById","setAttribute","checked","toString","classList","toggle","getBreakpoint","name","property","value","window","getComputedStyle","documentElement","getPropertyValue","undefined","setFocus","options","isFocusable","onBlur","removeEventListener","call","removeAttribute","addEventListener","onFocus","onBeforeFocus","focus","isInitialised","$root","moduleName","HTMLElement","hasAttribute","isSupported","$scope","body","contains","isObject","option","Array","isArray","isScope","Element","Document","formatErrorMessage","Component","message","normaliseString","trimmedValue","trim","output","outputType","type","includes","length","isFinite","Number","extractConfigByNamespace","schema","dataset","namespace","properties","newObject","key","Object","entries","current","keyParts","split","index","mergeConfigs","configObjects","formattedConfigObject","configObject","keys","override","NHSUKFrontendError","Error","constructor","args","super","this","SupportError","supportMessage","HTMLScriptElement","prototype","ConfigError","ElementError","component","identifier","element","expectedType","InitError","componentOrMessage","normaliseOptions","scopeOrOptions","onError","scope","_self","globalThis","self","childConstructor","elementType","checkSupport","checkInitialised","ConfigurableComponent","config","defaults","datasetConfig","out","entry","field","normaliseDataset","configOverride","_datasetConfig","Button","debounceFormSubmitTimer","event","handleKeyDown","debounce","preventDefault","click","preventDoubleClick","setTimeout","DEBOUNCE_TIMEOUT_IN_SECONDS","initButtons","$buttons","querySelectorAll","forEach","freeze","I18n","translations","_config$locale","locale","lang","t","lookupKey","translation","count","translationPluralForm","getPluralSuffix","match","replacePlaceholders","translationString","formatter","Intl","NumberFormat","supportedLocalesOf","replace","placeholderWithBraces","placeholderKey","hasOwnProperty","placeholderValue","format","hasIntlPluralRulesSupport","Boolean","PluralRules","preferredForm","select","console","warn","CharacterCount","_ref","_this$config$maxwords","lastInputTimestamp","lastInputValue","valueChecker","$textarea","querySelector","HTMLTextAreaElement","errors","validationErrors","conditions","required","errorMessage","every","push","validateConfig","i18n","maxLength","maxwords","maxlength","Infinity","textareaDescriptionId","id","$textareaDescription","$errorMessage","exec","textContent","insertAdjacentElement","$screenReaderCountMessage","createElement","$visibleCountMessage","add","bindChangeEvents","updateCountMessage","configOverrides","text","_text$match","handleKeyUp","handleFocus","handleBlur","checkIfValueChanged","updateVisibleCountMessage","updateScreenReaderCountMessage","isError","isOverThreshold","formattedUpdateMessage","remainingNumber","countType","formatCountMessage","translationKeySuffix","Math","abs","threshold","currentLength","Date","now","setInterval","clearInterval","initCharacterCounts","$characterCounts","charactersUnderLimit","one","other","charactersAtLimit","charactersOverLimit","wordsUnderLimit","wordsAtLimit","wordsOverLimit","textareaDescription","anyOf","Checkboxes","$inputs","syncAllConditionalReveals","handleClick","syncConditionalRevealWithInputState","unCheckAllInputsExcept","checkboxExclusiveGroup","exclusiveGroup","selectorGroup","$inputWithSameName","form","setInputState","unCheckExclusiveInputs","$exclusiveInput","$clickedInput","initCheckboxes","$checkboxes","ErrorSummary","disableAutoFocus","focusOnPageLoad","getAssociatedLegendOrLabel","_document$querySelect","$fieldset","$legends","getElementsByTagName","$candidateLegend","legendTop","getBoundingClientRect","top","inputRect","height","innerHeight","focusTarget","$target","HTMLAnchorElement","inputId","hash","$legendOrLabel","scrollIntoView","preventScroll","initErrorSummary","FileUpload","enteredAnotherElement","$label","findLabel","$button","ariaDescribedBy","$status","innerText","appendChild","commaSpan","containerSpan","buttonSpan","insertAdjacentText","instructionSpan","onClick","bind","onChange","updateDisabledState","observeDisabledState","$announcements","onDrop","updateDropzoneVisibility","disabled","hideDraggingState","Node","dataTransfer","isContainingFiles","showDraggingState","remove","files","dispatchEvent","CustomEvent","fileCount","MutationObserver","mutationList","mutation","observe","attributes","hasNoTypesInfo","types","isDraggingFiles","some","chooseFilesButton","dropInstruction","noFileChosen","multipleFilesChosen","enteredDropZone","leftDropZone","Header","$navigation","$navigationList","$navigationItems","$menu","$menuToggle","$menuList","width","breakpoints","updateNavigationTimer","menuIsEnabled","menuIsOpen","HTMLButtonElement","handleEscapeKey","onEscapeKey","handleUpdateNavigation","updateNavigation","handleToggleMenu","toggleMenu","setupNavigation","resetNavigation","right","breakpoint","insertBefore","offsetWidth","clearTimeout","setupMenu","parentElement","enableMenu","disableMenu","closeMenu","style","removeProperty","openMenu","setProperty","offsetHeight","filter","initHeader","NotificationBanner","initNotificationBanners","$notificationBanners","$notificationBanner","Radios","$allInputs","$clickedInputForm","$clickedInputName","hasSameFormOwner","initRadios","$radios","SkipLink","_this$$root$getAttrib","href","linkedElementId","$linkedElement","initSkipLinks","$skipLinks","Tabs","jsHiddenClass","changingHash","mql","$tabs","boundTabClick","onTabClick","boundTabKeydown","onTabKeydown","boundOnHashChange","onHashChange","$tabList","$tabListItems","setupResponsiveChecks","matchMedia","checkMode","addListener","_this$mql","matches","setup","teardown","_this$getTab","$item","$tab","setAttributes","hideTab","$activeTab","getTab","location","showTab","unsetAttributes","$tabWithHash","$previousTab","getCurrentTab","unhighlightTab","hidePanel","highlightTab","showPanel","panelId","$panel","getPanel","$currentTab","$newTab","currentTarget","createHistoryEntry","activatePreviousTab","activateNextTab","$nextTabListItem","nextElementSibling","$nextTab","$previousTabListItem","previousElementSibling","initTabs","initAll","scopeOrConfig","error","log","button","characterCount","errorSummary","fileUpload","notificationBanner","componentConfig","createAll","$elements","_options$scope","from","map","instance"],"mappings":"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"}