{"version":3,"file":"nhsuk-frontend.min.js","sources":["../../src/nhsuk/components/button/button.mjs","../../src/nhsuk/components/character-count/character-count.mjs","../../src/nhsuk/common.mjs","../../src/nhsuk/components/checkboxes/checkboxes.mjs","../../src/nhsuk/components/details/details.mjs","../../src/nhsuk/components/error-summary/error-summary.mjs","../../src/nhsuk/components/header/header.mjs","../../src/nhsuk/components/radios/radios.mjs","../../src/nhsuk/components/skip-link/skip-link.mjs","../../src/nhsuk/components/tabs/tabs.mjs","../../src/nhsuk/index.mjs"],"sourcesContent":["const KEY_SPACE = 32\nconst DEBOUNCE_TIMEOUT_IN_SECONDS = 1\n\n/**\n * Button component\n */\nexport class Button {\n  /**\n   * @param {Element | null} [$root] - HTML element to use for component\n   */\n  constructor($root) {\n    if (!$root || !($root instanceof HTMLElement)) {\n      return this\n    }\n\n    this.$root = $root\n    this.debounceFormSubmitTimer = null\n\n    /**\n     * Initialise an event listener for keydown at document level\n     * this will help listening for later inserted elements with a role=\"button\"\n     */\n    this.$root.addEventListener('keydown', this.handleKeyDown.bind(this))\n    this.$root.addEventListener('click', this.debounce.bind(this))\n  }\n\n  /**\n   * JavaScript 'shim' to trigger the click event of element(s) when the space key is pressed.\n   *\n   * Created since some Assistive Technologies (for example some Screenreaders)\n   * will tell a user to press space on a 'button', so this functionality needs to be shimmed\n   * See https://github.com/alphagov/govuk_elements/pull/272#issuecomment-233028270\n   *\n   * @param {KeyboardEvent} event - Keydown event\n   */\n  handleKeyDown(event) {\n    // get the target element\n\n    const { target } = event\n    // if the element has a role='button' and the pressed key is a space, we'll simulate a click\n    if (\n      target.getAttribute('role') === 'button' &&\n      event.keyCode === KEY_SPACE\n    ) {\n      event.preventDefault()\n      // trigger the target's click event\n      target.click()\n    }\n  }\n\n  /**\n   * If the click quickly succeeds a previous click then nothing will happen.\n   * This stops people accidentally causing multiple form submissions by\n   * double clicking buttons.\n   */\n  debounce(event) {\n    const { target } = event\n    // Check the button that is clicked on has the preventDoubleClick feature enabled\n    if (target.getAttribute('data-prevent-double-click') !== 'true') {\n      return\n    }\n\n    // If the timer is still running then we want to prevent the click from submitting the form\n    if (this.debounceFormSubmitTimer) {\n      event.preventDefault()\n      return false // eslint-disable-line consistent-return\n    }\n\n    this.debounceFormSubmitTimer = setTimeout(() => {\n      this.debounceFormSubmitTimer = null\n    }, DEBOUNCE_TIMEOUT_IN_SECONDS * 1000)\n  }\n}\n\n/**\n * Initialise button component\n *\n * @param {object} [options]\n * @param {Element | Document | null} [options.scope] - Scope of the document to search within\n */\nexport function initButtons(options = {}) {\n  const $scope = options.scope || document\n  const $buttons = $scope.querySelectorAll('[data-module=\"nhsuk-button\"]')\n\n  $buttons.forEach(($root) => {\n    new Button($root)\n  })\n}\n","/**\n * Character count component\n */\nexport class CharacterCount {\n  /**\n   * @param {Element | null} [$root] - HTML element to use for component\n   */\n  constructor($root) {\n    if (!$root || !($root instanceof HTMLElement)) {\n      return this\n    }\n\n    const $textarea = $root.querySelector('.nhsuk-js-character-count')\n    if (\n      !$textarea ||\n      !(\n        $textarea instanceof HTMLTextAreaElement ||\n        $textarea instanceof HTMLInputElement\n      )\n    ) {\n      return this\n    }\n\n    this.$root = $root\n    this.$textarea = $textarea\n    this.$visibleCountMessage = null\n    this.$screenReaderCountMessage = null\n    this.lastInputTimestamp = null\n\n    // Check for module\n    const $fallbackLimitMessage = document.getElementById(\n      `${this.$textarea.id}-info`\n    )\n\n    // Move the fallback count message to be immediately after the textarea\n    // Kept for backwards compatibility\n    this.$textarea.insertAdjacentElement('afterend', $fallbackLimitMessage)\n\n    // Create the *screen reader* specific live-updating counter\n    // This doesn't need any styling classes, as it is never visible\n    const $screenReaderCountMessage = document.createElement('div')\n    $screenReaderCountMessage.className =\n      'nhsuk-character-count__sr-status nhsuk-u-visually-hidden'\n    $screenReaderCountMessage.setAttribute('aria-live', 'polite')\n    this.$screenReaderCountMessage = $screenReaderCountMessage\n    $fallbackLimitMessage.insertAdjacentElement(\n      'afterend',\n      $screenReaderCountMessage\n    )\n\n    // Create our live-updating counter element, copying the classes from the\n    // fallback element for backwards compatibility as these may have been configured\n    const $visibleCountMessage = document.createElement('div')\n    $visibleCountMessage.className = $fallbackLimitMessage.className\n    $visibleCountMessage.classList.add('nhsuk-character-count__status')\n    $visibleCountMessage.setAttribute('aria-hidden', 'true')\n    this.$visibleCountMessage = $visibleCountMessage\n    $fallbackLimitMessage.insertAdjacentElement(\n      'afterend',\n      $visibleCountMessage\n    )\n\n    // Hide the fallback limit message\n    $fallbackLimitMessage.classList.add('nhsuk-u-visually-hidden')\n\n    // Read options set using dataset ('data-' values)\n    this.options = CharacterCount.getDataset(this.$root)\n\n    // Determine the limit attribute (characters or words)\n    let countAttribute = this.defaults.characterCountAttribute\n    if (this.options.maxwords) {\n      countAttribute = this.defaults.wordCountAttribute\n    }\n\n    // Save the element limit\n    this.maxLength = this.$root.getAttribute(countAttribute)\n\n    // Check for limit\n    if (!this.maxLength) {\n      return this\n    }\n\n    // Remove hard limit if set\n    this.$textarea.removeAttribute('maxlength')\n\n    this.bindChangeEvents()\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of the character count is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to manually update it after the pageshow event\n    // in browsers that support it.\n    if ('onpageshow' in window) {\n      window.addEventListener('pageshow', this.updateCountMessage.bind(this))\n    } else {\n      window.addEventListener(\n        'DOMContentLoaded',\n        this.updateCountMessage.bind(this)\n      )\n    }\n    this.updateCountMessage()\n  }\n\n  // Read data attributes\n  static getDataset(element) {\n    const dataset = {}\n    const { attributes } = element\n    if (attributes) {\n      // eslint-disable-next-line @typescript-eslint/prefer-for-of\n      for (let i = 0; i < attributes.length; i++) {\n        const attribute = attributes[i]\n        const match = attribute.name.match(/^data-(.+)/)\n        if (match) {\n          dataset[match[1]] = attribute.value\n        }\n      }\n    }\n    return dataset\n  }\n\n  // Counts characters or words in text\n  count(text) {\n    let length\n    if (this.options.maxwords) {\n      const tokens = text.match(/\\S+/g) || [] // Matches consecutive non-whitespace chars\n      length = tokens.length // eslint-disable-line prefer-destructuring\n    } else {\n      length = text.length // eslint-disable-line prefer-destructuring\n    }\n    return length\n  }\n\n  // Bind input propertychange to the elements and update based on the change\n  bindChangeEvents() {\n    const { $textarea } = this\n    $textarea.addEventListener('keyup', this.handleKeyUp.bind(this))\n\n    // Bind focus/blur events to start/stop polling\n    $textarea.addEventListener('focus', this.handleFocus.bind(this))\n    $textarea.addEventListener('blur', this.handleBlur.bind(this))\n  }\n\n  // Speech recognition software such as Dragon NaturallySpeaking will modify the\n  // fields by directly changing its `value`. These changes don't trigger events\n  // in JavaScript, so we need to poll to handle when and if they occur.\n  checkIfValueChanged() {\n    if (!this.$textarea.oldValue) {\n      this.$textarea.oldValue = ''\n    }\n    if (this.$textarea.value !== this.$textarea.oldValue) {\n      this.$textarea.oldValue = this.$textarea.value\n      this.updateCountMessage()\n    }\n  }\n\n  // Helper function to update both the visible and screen reader-specific\n  // counters simultaneously (e.g. on init)\n  updateCountMessage() {\n    this.updateVisibleCountMessage()\n    this.updateScreenReaderCountMessage()\n  }\n\n  // Update visible counter\n  updateVisibleCountMessage() {\n    const { $textarea } = this\n    const { $visibleCountMessage } = this\n    const remainingNumber = this.maxLength - this.count($textarea.value)\n\n    // If input is over the threshold, remove the disabled class which renders the\n    // counter invisible.\n    if (this.isOverThreshold()) {\n      $visibleCountMessage.classList.remove(\n        'nhsuk-character-count__message--disabled'\n      )\n    } else {\n      $visibleCountMessage.classList.add(\n        'nhsuk-character-count__message--disabled'\n      )\n    }\n\n    // Update styles\n    if (remainingNumber < 0) {\n      $textarea.classList.add('nhsuk-textarea--error')\n      $visibleCountMessage.classList.remove('nhsuk-hint')\n      $visibleCountMessage.classList.add('nhsuk-error-message')\n    } else {\n      $textarea.classList.remove('nhsuk-textarea--error')\n      $visibleCountMessage.classList.remove('nhsuk-error-message')\n      $visibleCountMessage.classList.add('nhsuk-hint')\n    }\n\n    // Update message\n    $visibleCountMessage.innerHTML = this.formattedUpdateMessage()\n  }\n\n  // Update screen reader-specific counter\n  updateScreenReaderCountMessage() {\n    const { $screenReaderCountMessage } = this\n\n    // If over the threshold, remove the aria-hidden attribute, allowing screen\n    // readers to announce the content of the element.\n    if (this.isOverThreshold()) {\n      $screenReaderCountMessage.removeAttribute('aria-hidden')\n    } else {\n      $screenReaderCountMessage.setAttribute('aria-hidden', true)\n    }\n\n    // Update message\n    $screenReaderCountMessage.innerHTML = this.formattedUpdateMessage()\n  }\n\n  // Format update message\n  formattedUpdateMessage() {\n    const { $textarea } = this\n    const { options } = this\n    const remainingNumber = this.maxLength - this.count($textarea.value)\n\n    let charVerb = 'remaining'\n    let charNoun = 'character'\n    let displayNumber = remainingNumber\n    if (options.maxwords) {\n      charNoun = 'word'\n    }\n    charNoun += remainingNumber === -1 || remainingNumber === 1 ? '' : 's'\n\n    charVerb = remainingNumber < 0 ? 'too many' : 'remaining'\n    displayNumber = Math.abs(remainingNumber)\n\n    return `You have ${displayNumber} ${charNoun} ${charVerb}`\n  }\n\n  // Checks whether the value is over the configured threshold for the input.\n  // If there is no configured threshold, it is set to 0 and this function will\n  // always return true.\n  isOverThreshold() {\n    const { $textarea } = this\n    const { options } = this\n\n    // Determine the remaining number of characters/words\n    const currentLength = this.count($textarea.value)\n    const { maxLength } = this\n\n    // Set threshold if presented in options\n    const thresholdPercent = options.threshold ? options.threshold : 0\n    const thresholdValue = (maxLength * thresholdPercent) / 100\n\n    return thresholdValue <= currentLength\n  }\n\n  // Update the visible character counter and keep track of when the last update\n  // happened for each keypress\n  handleKeyUp() {\n    this.updateVisibleCountMessage()\n    this.lastInputTimestamp = Date.now()\n  }\n\n  handleFocus() {\n    // If the field is focused, and a keyup event hasn't been detected for at\n    // least 1000 ms (1 second), then run the manual change check.\n    // This is so that the update triggered by the manual comparison doesn't\n    // conflict with debounced KeyboardEvent updates.\n    this.valueChecker = setInterval(() => {\n      if (\n        !this.lastInputTimestamp ||\n        Date.now() - 500 >= this.lastInputTimestamp\n      ) {\n        this.checkIfValueChanged()\n      }\n    }, 1000)\n  }\n\n  handleBlur() {\n    // Cancel value checking on blur\n    clearInterval(this.valueChecker)\n  }\n}\n\nCharacterCount.prototype.defaults = {\n  characterCountAttribute: 'data-maxlength',\n  wordCountAttribute: 'data-maxwords'\n}\n\n/**\n * Initialise character count component\n *\n * @param {object} [options]\n * @param {Element | Document | null} [options.scope] - Scope of the document to search within\n */\nexport function initCharacterCounts(options = {}) {\n  const $scope = options.scope || document\n  const $characterCounts = $scope.querySelectorAll(\n    '[data-module=\"nhsuk-character-count\"]'\n  )\n\n  $characterCounts.forEach(($root) => {\n    new CharacterCount($root)\n  })\n}\n","/**\n * Toggle a boolean attribute on a HTML element\n *\n * @param {HTMLElement} element\n * @param {string} attr\n */\nexport function toggleAttribute(element, attr) {\n  // Return without error if element or attr are missing\n  if (!element || !attr) return\n  // Toggle attribute value. Treat no existing attr same as when set to false\n  const value = element.getAttribute(attr) === 'true' ? 'false' : 'true'\n  element.setAttribute(attr, value)\n}\n\n/**\n * Toggle a toggle a class on conditional content for an input based on checked state\n *\n * @param {HTMLElement} input - input element\n * @param {string} className - class to toggle\n */\nexport function toggleConditionalInput(input, className) {\n  // Return without error if input or class are missing\n  if (!input || !className) return\n  // If the input has conditional content it had a data-aria-controls attribute\n  const conditionalId = input.getAttribute('aria-controls')\n  if (conditionalId) {\n    // Get the conditional element from the input data-aria-controls attribute\n    const conditionalElement = document.getElementById(conditionalId)\n    if (conditionalElement) {\n      if (input.checked) {\n        conditionalElement.classList.remove(className)\n        input.setAttribute('aria-expanded', 'true')\n      } else {\n        conditionalElement.classList.add(className)\n        input.setAttribute('aria-expanded', 'false')\n      }\n    }\n  }\n}\n\n/**\n * Used to generate a unique string, allows multiple instances of the component\n * without them conflicting with each other.\n * https://stackoverflow.com/a/8809472\n *\n * Original code taken from GDS (Government Digital Service)\n * {@link https://github.com/alphagov/govuk-frontend}\n */\nexport function generateUniqueID() {\n  let d = new Date().getTime()\n  if (\n    typeof window.performance !== 'undefined' &&\n    typeof window.performance.now === 'function'\n  ) {\n    d += window.performance.now() // use high-precision timer if available\n  }\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = (d + Math.random() * 16) % 16 | 0\n    d = Math.floor(d / 16)\n    return (c === 'x' ? r : (r & 0x3) | 0x8).toString(16)\n  })\n}\n\n/**\n * Move focus to element\n *\n * Sets tabindex to -1 to make the element programmatically focusable,\n * but removes it on blur as the element doesn't need to be focused again.\n *\n * Original code taken from GDS (Government Digital Service)\n * {@link https://github.com/alphagov/govuk-frontend}\n *\n * @template {HTMLElement} FocusElement\n * @param {FocusElement} $element - HTML element\n * @param {object} [options] - Handler options\n * @param {function(this: FocusElement): void} [options.onBeforeFocus] - Callback before focus\n * @param {function(this: FocusElement): void} [options.onBlur] - Callback on blur\n */\nexport function setFocus($element, options = {}) {\n  const isFocusable = $element.getAttribute('tabindex')\n\n  if (!isFocusable) {\n    $element.setAttribute('tabindex', '-1')\n  }\n\n  /**\n   * Handle element focus\n   */\n  function onFocus() {\n    $element.removeEventListener('focus', onFocus)\n    $element.addEventListener('blur', onBlur)\n  }\n\n  /**\n   * Handle element blur\n   */\n  function onBlur() {\n    $element.removeEventListener('blur', onBlur)\n\n    if (options.onBlur) {\n      options.onBlur.call($element)\n    }\n\n    if (!isFocusable) {\n      $element.removeAttribute('tabindex')\n    }\n  }\n\n  // Add listener to reset element on blur, after focus\n  $element.addEventListener('focus', onFocus)\n\n  // Focus element\n  if (options.onBeforeFocus) {\n    options.onBeforeFocus.call($element)\n  }\n\n  $element.focus()\n}\n","import { toggleConditionalInput } from '../../common.mjs'\n\n/**\n * Checkboxes component\n *\n * Conditionally show content when a checkbox button is checked\n * Test at http://localhost:3000/nhsuk-frontend/components/checkboxes/conditional.html\n */\nexport class Checkboxes {\n  /**\n   * @param {Element | null} [$root] - HTML element to use for component\n   */\n  constructor($root) {\n    if (!$root || !($root instanceof HTMLElement)) {\n      return this\n    }\n\n    this.$root = $root\n\n    const $inputs = this.$root.querySelectorAll('.nhsuk-checkboxes__input')\n    if (!$inputs.length) {\n      return this\n    }\n\n    this.$inputs = $inputs\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event in browsers\n    // that support it.\n    if ('onpageshow' in window) {\n      window.addEventListener('pageshow', () =>\n        this.syncAllConditionalReveals()\n      )\n    } else {\n      window.addEventListener('DOMContentLoaded', () =>\n        this.syncAllConditionalReveals()\n      )\n    }\n\n    // Although we've set up handlers to sync state on the pageshow or\n    // DOMContentLoaded event, init could be called after those events have fired,\n    // for example if they are added to the page dynamically, so sync now too.\n    this.syncAllConditionalReveals()\n\n    // Attach handleClick as click to inputs\n    this.$inputs.forEach((checkboxButton) => {\n      checkboxButton.addEventListener('change', this.handleClick.bind(this))\n    })\n  }\n\n  /**\n   * Update all conditional reveals to match checked state\n   */\n  syncAllConditionalReveals() {\n    this.$inputs.forEach((item) =>\n      toggleConditionalInput(item, 'nhsuk-checkboxes__conditional--hidden')\n    )\n  }\n\n  /**\n   * Uncheck other checkboxes\n   *\n   * Find any other checkbox inputs with the checkbox group value, and uncheck them.\n   * This is useful for when a “None of these\" checkbox is checked.\n   */\n  unCheckAllInputsExcept(input) {\n    const allInputsInSameExclusiveGroup = input.form.querySelectorAll(\n      `input[type=\"checkbox\"][data-checkbox-exclusive-group=\"${input.getAttribute('data-checkbox-exclusive-group')}\"]`\n    )\n\n    allInputsInSameExclusiveGroup.forEach((inputWithSameName) => {\n      const hasSameFormOwner = input.form === inputWithSameName.form\n      if (hasSameFormOwner && inputWithSameName !== input) {\n        inputWithSameName.checked = false // eslint-disable-line no-param-reassign\n      }\n    })\n\n    this.syncAllConditionalReveals()\n  }\n\n  /**\n   * Uncheck exclusive inputs\n   *\n   * Find any checkbox inputs with the same checkbox group value and the 'exclusive' behaviour,\n   * and uncheck them. This helps prevent someone checking both a regular checkbox and a\n   * \"None of these\" checkbox in the same fieldset.\n   */\n  unCheckExclusiveInputs(input) {\n    const allExclusiveInputsInSameExclusiveGroup = input.form.querySelectorAll(\n      `input[type=\"checkbox\"][data-checkbox-exclusive][data-checkbox-exclusive-group=\"${input.getAttribute(\n        'data-checkbox-exclusive-group'\n      )}\"]`\n    )\n\n    allExclusiveInputsInSameExclusiveGroup.forEach((exclusiveInput) => {\n      const hasSameFormOwner = input.form === exclusiveInput.form\n      if (hasSameFormOwner) {\n        exclusiveInput.checked = false // eslint-disable-line no-param-reassign\n      }\n    })\n\n    this.syncAllConditionalReveals()\n  }\n\n  /**\n   * Toggle classes and attributes\n   *\n   * @param {MouseEvent} event - Click event\n   */\n  handleClick(event) {\n    // Toggle conditional content based on checked state\n    toggleConditionalInput(\n      event.target,\n      'nhsuk-checkboxes__conditional--hidden'\n    )\n\n    if (!event.target.checked) {\n      return\n    }\n\n    // Handle 'exclusive' checkbox behaviour (ie \"None of these\")\n    if (event.target.hasAttribute('data-checkbox-exclusive')) {\n      this.unCheckAllInputsExcept(event.target)\n    } else {\n      this.unCheckExclusiveInputs(event.target)\n    }\n  }\n}\n\n/**\n * Initialise checkboxes component\n *\n * @param {object} [options]\n * @param {Element | Document | null} [options.scope] - Scope of the document to search within\n */\nexport function initCheckboxes(options = {}) {\n  const $scope = options.scope || document\n  const $checkboxes = $scope.querySelectorAll('.nhsuk-checkboxes')\n\n  $checkboxes.forEach(($root) => {\n    new Checkboxes($root)\n  })\n}\n","import { generateUniqueID, toggleAttribute } from '../../common.mjs'\n\n/**\n * Details component\n *\n * Ensure details component is cross browser and accessible\n * Test at http://localhost:3000/nhsuk-frontend/components/details/index.html\n */\nexport class Details {\n  /**\n   * @param {Element | null} [$root] - HTML element to use for component\n   */\n  constructor($root) {\n    if (!$root || !($root instanceof HTMLElement)) {\n      return this\n    }\n\n    this.$root = $root\n\n    // If there is native details support, we want to avoid running code to polyfill native behaviour.\n    const hasNativeDetails =\n      'HTMLDetailsElement' in window && this.$root instanceof HTMLDetailsElement\n\n    if (!hasNativeDetails) {\n      this.polyfillDetails()\n    }\n  }\n\n  /**\n   * Adds all necessary functionality to a details element\n   */\n  polyfillDetails() {\n    // Set content element and give it an ID if it doesn't already have one\n    const content = this.$root.querySelector('.nhsuk-details__text')\n    if (!content.id) {\n      content.setAttribute('id', `details-content-${generateUniqueID()}`)\n    }\n\n    // Set summary element\n    const summary = this.$root.querySelector('.nhsuk-details__summary')\n\n    // Set initial summary aria attributes\n    summary.setAttribute('role', 'button')\n    summary.setAttribute('aria-controls', content.id)\n    summary.setAttribute('tabIndex', '0')\n    const openAttr = this.$root.getAttribute('open') !== null\n    if (openAttr === true) {\n      summary.setAttribute('aria-expanded', 'true')\n      content.setAttribute('aria-hidden', 'false')\n    } else {\n      summary.setAttribute('aria-expanded', 'false')\n      content.setAttribute('aria-hidden', 'true')\n      content.style.display = 'none'\n    }\n\n    const toggleDetails = () => {\n      toggleAttribute(summary, 'aria-expanded')\n      toggleAttribute(content, 'aria-hidden')\n\n      content.style.display =\n        content.getAttribute('aria-hidden') === 'true' ? 'none' : ''\n      if (this.$root.hasAttribute('open')) {\n        this.$root.removeAttribute('open')\n      } else {\n        this.$root.setAttribute('open', 'open')\n      }\n    }\n\n    // Toggle details onclick\n    summary.addEventListener('click', toggleDetails)\n\n    // Call toggle details on enter and space key events\n    summary.addEventListener('keydown', (event) => {\n      if (event.keyCode === 13 || event.keyCode === 32) {\n        event.preventDefault()\n        summary.click()\n      }\n    })\n  }\n}\n\n/**\n * Initialise details component\n *\n * @param {object} [options]\n * @param {Element | Document | null} [options.scope] - Scope of the document to search within\n */\nexport function initDetails(options = {}) {\n  const $scope = options.scope || document\n  const $details = $scope.querySelectorAll('.nhsuk-details')\n\n  $details.forEach(($root) => {\n    new Details($root)\n  })\n}\n","/**\n * Error summary component\n *\n * Adapted from https://github.com/alphagov/govuk-frontend/blob/v2.13.0/src/components/error-summary/error-summary.js\n */\nexport class ErrorSummary {\n  /**\n   * @param {Element | null} [$root] - HTML element to use for component\n   * @param {ErrorSummaryConfig} [config] - Error summary config\n   */\n  constructor($root, config = {}) {\n    if (!$root || !($root instanceof HTMLElement)) {\n      return this\n    }\n\n    this.$root = $root\n    this.$root.addEventListener('click', this.handleClick.bind(this))\n\n    if (!config.disableAutoFocus) {\n      this.$root.focus()\n    }\n  }\n\n  /**\n   * Get associated legend or label\n   *\n   * Returns the first element that exists from this list:\n   *\n   * - The `<legend>` associated with the closest `<fieldset>` ancestor, as long\n   *   as the top of it is no more than half a viewport height away from the\n   *   bottom of the input\n   * - The first `<label>` that is associated with the input using for='inputId'\n   * - The closest parent `<label>`\n   */\n  getAssociatedLegendOrLabel(input) {\n    const fieldset = input.closest('fieldset')\n\n    if (fieldset) {\n      const legends = fieldset.getElementsByTagName('legend')\n\n      if (legends.length) {\n        const candidateLegend = legends[0] // eslint-disable-line prefer-destructuring\n\n        // If the input type is radio or checkbox, always use the legend if there\n        // is one.\n        if (input.type === 'checkbox' || input.type === 'radio') {\n          return candidateLegend\n        }\n\n        // For other input types, only scroll to the fieldset’s legend (instead of\n        // the label associated with the input) if the input would end up in the\n        // top half of the screen.\n        //\n        // This should avoid situations where the input either ends up off the\n        // screen, or obscured by a software keyboard.\n        const legendTop = candidateLegend.getBoundingClientRect().top\n        const inputRect = input.getBoundingClientRect()\n\n        // If the browser doesn't support Element.getBoundingClientRect().height\n        // or window.innerHeight (like IE8), bail and just link to the label.\n        if (inputRect.height && window.innerHeight) {\n          const inputBottom = inputRect.top + inputRect.height\n\n          if (inputBottom - legendTop < window.innerHeight / 2) {\n            return candidateLegend\n          }\n        }\n      }\n    }\n\n    return (\n      document.querySelector(`label[for='${input.getAttribute('id')}']`) ||\n      input.closest('label')\n    )\n  }\n\n  /**\n   * Focus the target element\n   *\n   * By default, the browser will scroll the target into view. Because our labels\n   * or legends appear above the input, this means the user will be presented with\n   * an input without any context, as the label or legend will be off the top of\n   * the screen.\n   *\n   * Manually handling the click event, scrolling the question into view and then\n   * focussing the element solves this.\n   *\n   * This also results in the label and/or legend being announced correctly in\n   * NVDA - without this only the field type is announced\n   * (e.g. 'Edit, has autocomplete').\n   */\n  focusTarget(target) {\n    // If the element that was clicked was not a link, return early\n    if (target.tagName !== 'A' || target.href === false) {\n      return false\n    }\n\n    const input = document.querySelector(target.hash)\n    if (!input) {\n      return false\n    }\n\n    const legendOrLabel = this.getAssociatedLegendOrLabel(input)\n    if (!legendOrLabel) {\n      return false\n    }\n\n    // Scroll the legend or label into view *before* calling focus on the input to\n    // avoid extra scrolling in browsers that don't support `preventScroll` (which\n    // at time of writing is most of them...)\n    legendOrLabel.scrollIntoView()\n    input.focus({ preventScroll: true })\n\n    return true\n  }\n\n  /**\n   * Handle click events on the error summary\n   */\n  handleClick(event) {\n    if (this.focusTarget(event.target)) {\n      event.preventDefault()\n    }\n  }\n}\n\n/**\n * Initialise error summary component\n *\n * @param {object} [options]\n * @param {Element | Document | null} [options.scope] - Scope of the document to search within\n * @param {boolean} [options.focusOnPageLoad] - If set to `false` the error\n *   summary will not be focussed when the page loads.\n */\nexport function initErrorSummary(options = {}) {\n  const $scope = options.scope || document\n  const $root = $scope.querySelector('.nhsuk-error-summary')\n\n  new ErrorSummary($root, {\n    disableAutoFocus: options.focusOnPageLoad === false\n  })\n}\n\n/**\n * Error summary config\n *\n * @typedef {object} ErrorSummaryConfig\n * @property {boolean} [disableAutoFocus=false] - If set to `true` the error\n *   summary will not be focussed when the page loads.\n */\n","/**\n * Header component\n */\nexport class Header {\n  /**\n   * @param {Element | null} [$root] - HTML element to use for component\n   */\n  constructor($root) {\n    if (!$root || !($root instanceof HTMLElement)) {\n      return this\n    }\n\n    this.$root = $root\n\n    this.navigation = this.$root.querySelector('.nhsuk-header__navigation')\n    this.navigationList = this.$root.querySelector(\n      '.nhsuk-header__navigation-list'\n    )\n    this.navigationItems = this.$root.querySelectorAll(\n      '.nhsuk-header__navigation-item'\n    )\n\n    this.menu = this.$root.querySelector('.nhsuk-header__menu')\n    this.menuToggle = this.$root.querySelector('.nhsuk-header__menu-toggle')\n\n    if (\n      !this.navigation ||\n      !this.navigationList ||\n      !this.navigationItems ||\n      !this.navigationItems.length ||\n      !this.menu ||\n      !this.menuToggle\n    ) {\n      return this\n    }\n\n    this.menuList = document.createElement('ul')\n\n    this.menuIsEnabled = false\n    this.menuIsOpen = false\n\n    this.handleEscapeKey = this.onEscapeKey.bind(this)\n    this.handleUpdateNavigation = this.debounce(this.updateNavigation)\n    this.handleToggleMenu = this.toggleMenu.bind(this)\n\n    this.setupNavigation()\n    this.updateNavigation()\n  }\n\n  debounce(func, timeout = 100) {\n    let timer\n    return (...args) => {\n      clearTimeout(timer)\n      timer = setTimeout(() => {\n        func.apply(this, args)\n      }, timeout)\n    }\n  }\n\n  /**\n   * Reset navigation\n   *\n   * Calculate available space by summing the width of each navigation item\n   */\n  resetNavigation() {\n    let right = 0\n\n    // Reset and calculate widths on every resize\n    this.breakpoints.forEach((breakpoint) => {\n      this.navigationList.insertBefore(breakpoint.element, this.menu)\n\n      // Calculate widths\n      right += breakpoint.element.offsetWidth\n      breakpoint.right = right\n    })\n\n    // Reset space for menu button\n    this.width = this.navigationList.offsetWidth\n  }\n\n  /**\n   * Add the breakpoints with default positions\n   */\n  setupNavigation() {\n    this.breakpoints = []\n\n    this.navigationItems.forEach((element) => {\n      this.breakpoints.push({ element, right: 0 })\n    })\n\n    // Add resize listener for next update\n    window.addEventListener('resize', this.handleUpdateNavigation)\n  }\n\n  /**\n   * Add the menu to the DOM\n   */\n  setupMenu() {\n    if (this.menuList.parentElement) {\n      return\n    }\n\n    this.menuList.classList.add('nhsuk-header__menu-list')\n    this.menuList.setAttribute('hidden', '')\n    this.menu.appendChild(this.menuList)\n  }\n\n  /**\n   * Enable the menu\n   */\n  enableMenu() {\n    if (this.menuIsEnabled) {\n      return\n    }\n\n    this.menuIsEnabled = true\n    this.menu.removeAttribute('hidden')\n\n    // Add click listener to toggle menu\n    this.menuToggle.addEventListener('click', this.handleToggleMenu)\n  }\n\n  /**\n   * Disable the menu\n   */\n  disableMenu() {\n    if (!this.menuIsEnabled) {\n      return\n    }\n\n    this.closeMenu()\n    this.menuIsEnabled = false\n    this.menu.setAttribute('hidden', '')\n\n    // Remove click listener from toggle menu\n    this.menuToggle.removeEventListener('click', this.handleToggleMenu)\n  }\n\n  /**\n   * Close the menu\n   *\n   * Closes the menu and updates accessibility state.\n   *\n   * Removes the bottom border from the navigation\n   */\n  closeMenu() {\n    if (!this.menuIsEnabled || !this.menuIsOpen) {\n      return\n    }\n\n    this.menuIsOpen = false\n    this.menuList.setAttribute('hidden', '')\n    this.menuToggle.setAttribute('aria-expanded', 'false')\n    this.navigation.style.removeProperty('border-bottom-width')\n\n    // Remove escape key listener to close menu\n    document.removeEventListener('keydown', this.handleEscapeKey)\n  }\n\n  /**\n   * Escape key handler\n   *\n   * This function is called when the user\n   * presses the escape key to close the menu.\n   *\n   * @param {KeyboardEvent} event - Key press event\n   */\n  onEscapeKey(event) {\n    if (event.key === 'Escape') {\n      this.closeMenu()\n    }\n  }\n\n  /**\n   * Open the menu\n   *\n   * Opens the menu and updates accessibility state.\n   *\n   * The menu is absolutely positioned, so it adds a border\n   * to the bottom of the navigation to prevent it from overlapping\n   *\n   * Adds event listeners for the close button,\n   */\n  openMenu() {\n    if (!this.menuIsEnabled || this.menuIsOpen) {\n      return\n    }\n\n    this.menuIsOpen = true\n    this.menuList.removeAttribute('hidden')\n    this.menuToggle.setAttribute('aria-expanded', 'true')\n    this.navigation.style.setProperty(\n      'border-bottom-width',\n      `${this.menuList.offsetHeight}px`\n    )\n\n    // Add escape key listener to close menu\n    document.addEventListener('keydown', this.handleEscapeKey)\n  }\n\n  /**\n   * Handle menu button click\n   *\n   * Toggles the menu between open and closed\n   */\n  toggleMenu() {\n    if (!this.menuIsEnabled) {\n      return\n    }\n\n    if (this.menuIsOpen) {\n      this.closeMenu()\n    } else {\n      this.openMenu()\n    }\n  }\n\n  /**\n   * Update navigation for the available space\n   *\n   * Moves all items that overflow the available space into the menu\n   */\n  updateNavigation() {\n    this.resetNavigation()\n\n    // Check for items that overflow\n    let menuItems = this.breakpoints.filter((breakpoint) => {\n      return breakpoint.right > this.width\n    })\n\n    // Disable menu if empty\n    if (!menuItems.length) {\n      this.disableMenu()\n      return\n    }\n\n    this.setupMenu()\n    this.enableMenu()\n\n    // Subtract space for menu button\n    this.width -= this.menu.offsetWidth\n\n    // Move items based on available width\n    this.breakpoints.forEach((breakpoint) => {\n      if (breakpoint.right > this.width) {\n        this.menuList.insertAdjacentElement('beforeend', breakpoint.element)\n      }\n    })\n\n    // Update menu height if open\n    if (this.menuIsOpen) {\n      this.navigation.style.setProperty(\n        'border-bottom-width',\n        `${this.menuList.offsetHeight}px`\n      )\n    }\n  }\n}\n\n/**\n * Initialise header component\n *\n * @param {object} [options]\n * @param {Element | Document | null} [options.scope] - Scope of the document to search within\n */\nexport function initHeader(options = {}) {\n  const $scope = options.scope || document\n  const $root = $scope.querySelector('.nhsuk-header')\n\n  new Header($root)\n}\n","import { toggleConditionalInput } from '../../common.mjs'\n\n/**\n * Radios component\n *\n * Conditionally show content when a radio button is checked\n * Test at http://localhost:3000/nhsuk-frontend/components/radios/conditional.html\n */\nexport class Radios {\n  constructor($root) {\n    if (!$root || !($root instanceof HTMLElement)) {\n      return this\n    }\n\n    this.$root = $root\n\n    const $inputs = this.$root.querySelectorAll('.nhsuk-radios__input')\n    if (!$inputs.length) {\n      return this\n    }\n\n    this.$inputs = $inputs\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event in browsers\n    // that support it.\n    if ('onpageshow' in window) {\n      window.addEventListener('pageshow', () =>\n        this.syncAllConditionalReveals()\n      )\n    } else {\n      window.addEventListener('DOMContentLoaded', () =>\n        this.syncAllConditionalReveals()\n      )\n    }\n\n    // Although we've set up handlers to sync state on the pageshow or\n    // DOMContentLoaded event, init could be called after those events have fired,\n    // for example if they are added to the page dynamically, so sync now too.\n\n    // Attach event handler to radioInputs\n    this.$inputs.forEach((radioButton) => {\n      radioButton.addEventListener('change', () =>\n        this.syncAllConditionalReveals()\n      )\n    })\n  }\n\n  /**\n   * Update all conditional reveals to match checked state\n   */\n  syncAllConditionalReveals() {\n    this.$inputs.forEach((input) =>\n      toggleConditionalInput(input, 'nhsuk-radios__conditional--hidden')\n    )\n  }\n}\n\n/**\n * Initialise radios component\n *\n * @param {object} [options]\n * @param {Element | Document | null} [options.scope] - Scope of the document to search within\n */\nexport function initRadios(options = {}) {\n  const $scope = options.scope || document\n  const $radios = $scope.querySelectorAll('.nhsuk-radios--conditional')\n\n  $radios.forEach(($root) => {\n    new Radios($root)\n  })\n}\n","/* eslint-disable @typescript-eslint/no-extraneous-class */\n\nimport { setFocus } from '../../common.mjs'\n\n/*\n * Skip link component\n *\n * When using VoiceOver on iOS, focus remains on the skip link anchor\n * when elected so the next focusable element is not at the jumped to area.\n */\nexport class SkipLink {\n  /**\n   * @param {Element | null} [$root] - HTML element to use for component\n   */\n  constructor($root) {\n    if (!$root || !($root instanceof HTMLAnchorElement)) {\n      return this\n    }\n\n    this.$root = $root\n\n    const linkedElementId = this.$root.hash.split('#').pop()\n    const $linkedElement = linkedElementId\n      ? document.getElementById(linkedElementId)\n      : null\n\n    // Check for linked element\n    if (!$linkedElement) {\n      return this\n    }\n\n    /**\n     * Focus the linked element on click\n     *\n     * Adds a helper CSS class to hide native focus styles,\n     * but removes it on blur to restore native focus styles\n     */\n    this.$root.addEventListener('click', () =>\n      setFocus($linkedElement, {\n        onBeforeFocus() {\n          $linkedElement.classList.add('nhsuk-skip-link-focused-element')\n        },\n        onBlur() {\n          $linkedElement.classList.remove('nhsuk-skip-link-focused-element')\n        }\n      })\n    )\n  }\n}\n\n/**\n * Initialise skip link component\n *\n * @param {object} [options]\n * @param {Element | Document | null} [options.scope] - Scope of the document to search within\n */\nexport function initSkipLinks(options = {}) {\n  const $scope = options.scope || document\n  const $skipLinks = $scope.querySelectorAll('.nhsuk-skip-link')\n\n  $skipLinks.forEach(($root) => {\n    new SkipLink($root)\n  })\n}\n","/**\n * Tabs component\n */\nexport class Tabs {\n  /**\n   * @param {Element | null} [$root] - HTML element to use for component\n   */\n  constructor($root) {\n    if (!$root || !($root instanceof HTMLElement)) {\n      return this\n    }\n\n    this.$root = $root\n\n    const $tabs = this.$root.querySelectorAll('.nhsuk-tabs__tab')\n    const $tabList = this.$root.querySelector('.nhsuk-tabs__list')\n    const $tabListItems = this.$root.querySelectorAll('.nhsuk-tabs__list-item')\n\n    if (!$tabs.length || !$tabList || !$tabListItems.length) {\n      return this\n    }\n\n    this.$tabs = $tabs\n    this.$tabList = $tabList\n    this.$tabListItems = $tabListItems\n\n    // Save bound functions so we can remove event listeners during teardown\n    this.boundTabClick = this.onTabClick.bind(this)\n    this.boundTabKeydown = this.onTabKeydown.bind(this)\n    this.boundOnHashChange = this.onHashChange.bind(this)\n\n    this.keys = {\n      down: 40,\n      left: 37,\n      right: 39,\n      up: 38\n    }\n\n    this.jsHiddenClass = 'nhsuk-tabs__panel--hidden'\n\n    this.showEvent = new CustomEvent('tab.show')\n    this.hideEvent = new CustomEvent('tab.hide')\n\n    if (typeof window.matchMedia === 'function') {\n      this.setupResponsiveChecks()\n    } else {\n      this.setup()\n    }\n  }\n\n  setupResponsiveChecks() {\n    // $nhsuk-breakpoints: (\n    // mobile: 320px,\n    // tablet: 641px,\n    // desktop: 769px,\n    // large-desktop: 990px\n    // );\n    this.mql = window.matchMedia('(min-width: 641px)')\n\n    // MediaQueryList.addEventListener isn't supported by Safari < 14 so we need\n    // to be able to fall back to the deprecated MediaQueryList.addListener\n    if ('addEventListener' in this.mql) {\n      this.mql.addEventListener('change', this.checkMode.bind(this))\n    } else {\n      // addListener is a deprecated function, however addEventListener\n      // isn't supported by Safari < 14. We therefore add this in as\n      // a fallback for those browsers\n      this.mql.addListener(this.checkMode.bind(this))\n    }\n\n    this.checkMode()\n  }\n\n  checkMode() {\n    if (this.mql.matches) {\n      this.setup()\n    } else {\n      this.teardown()\n    }\n  }\n\n  setup() {\n    this.$tabList.setAttribute('role', 'tablist')\n\n    this.$tabListItems.forEach(($item) => {\n      $item.setAttribute('role', 'presentation')\n    })\n\n    this.$tabs.forEach(($tab) => {\n      // Set HTML attributes\n      this.setAttributes($tab)\n\n      // Handle events\n      $tab.addEventListener('click', this.boundTabClick, true)\n      $tab.addEventListener('keydown', this.boundTabKeydown, true)\n\n      // Remove old active panels\n      this.hideTab($tab)\n    })\n\n    // Show either the active tab according to the URL's hash or the first tab\n    const $activeTab = this.getTab(window.location.hash) || this.$tabs[0]\n    this.showTab($activeTab)\n\n    // Handle hashchange events\n    window.addEventListener('hashchange', this.boundOnHashChange, true)\n  }\n\n  teardown() {\n    this.$tabList.removeAttribute('role')\n\n    this.$tabListItems.forEach(($item) => {\n      $item.removeAttribute('role', 'presentation')\n    })\n\n    this.$tabs.forEach(($tab) => {\n      // Remove events\n      $tab.removeEventListener('click', this.boundTabClick, true)\n      $tab.removeEventListener('keydown', this.boundTabKeydown, true)\n\n      // Unset HTML attributes\n      this.unsetAttributes($tab)\n    })\n\n    // Remove hashchange event handler\n    window.removeEventListener('hashchange', this.boundOnHashChange, true)\n  }\n\n  onHashChange() {\n    const { hash } = window.location\n    const $tabWithHash = this.getTab(hash)\n    if (!$tabWithHash) {\n      return\n    }\n\n    // Prevent changing the hash\n    if (this.changingHash) {\n      this.changingHash = false\n      return\n    }\n\n    // Show either the active tab according to the URL's hash or the first tab\n    const $previousTab = this.getCurrentTab()\n\n    this.hideTab($previousTab)\n    this.showTab($tabWithHash)\n    $tabWithHash.focus()\n  }\n\n  hideTab($tab) {\n    this.unhighlightTab($tab)\n    this.hidePanel($tab)\n  }\n\n  showTab($tab) {\n    this.highlightTab($tab)\n    this.showPanel($tab)\n  }\n\n  getTab(hash) {\n    return this.$root.querySelector(`.nhsuk-tabs__tab[href=\"${hash}\"]`)\n  }\n\n  setAttributes($tab) {\n    // set tab attributes\n    const panelId = Tabs.getHref($tab).slice(1)\n    $tab.setAttribute('id', `tab_${panelId}`)\n    $tab.setAttribute('role', 'tab')\n    $tab.setAttribute('aria-controls', panelId)\n    $tab.setAttribute('aria-selected', 'false')\n    $tab.setAttribute('tabindex', '-1')\n\n    // set panel attributes\n    const $panel = this.getPanel($tab)\n    $panel.setAttribute('role', 'tabpanel')\n    $panel.setAttribute('aria-labelledby', $tab.id)\n    $panel.classList.add(this.jsHiddenClass)\n  }\n\n  unsetAttributes($tab) {\n    // unset tab attributes\n    $tab.removeAttribute('id')\n    $tab.removeAttribute('role')\n    $tab.removeAttribute('aria-controls')\n    $tab.removeAttribute('aria-selected')\n    $tab.removeAttribute('tabindex')\n\n    // unset panel attributes\n    const $panel = this.getPanel($tab)\n    $panel.removeAttribute('role')\n    $panel.removeAttribute('aria-labelledby')\n    $panel.removeAttribute('tabindex')\n    $panel.classList.remove(this.jsHiddenClass)\n  }\n\n  onTabClick(e) {\n    const $currentTab = this.getCurrentTab()\n    const $newTab = e.currentTarget\n\n    if (!$currentTab || !($newTab instanceof HTMLAnchorElement)) {\n      return\n    }\n\n    e.preventDefault()\n\n    this.hideTab($currentTab)\n    this.showTab($newTab)\n    this.createHistoryEntry($newTab)\n  }\n\n  createHistoryEntry($tab) {\n    const $panel = this.getPanel($tab)\n\n    // Save and restore the id\n    // so the page doesn't jump when a user clicks a tab (which changes the hash)\n    const { id } = $panel\n    $panel.id = ''\n    this.changingHash = true\n    window.location.hash = Tabs.getHref($tab).slice(1)\n    $panel.id = id\n  }\n\n  onTabKeydown(e) {\n    switch (e.keyCode) {\n      case this.keys.left:\n      case this.keys.up:\n        this.activatePreviousTab()\n        e.preventDefault()\n        break\n      case this.keys.right:\n      case this.keys.down:\n        this.activateNextTab()\n        e.preventDefault()\n        break\n\n      default:\n    }\n  }\n\n  activateNextTab() {\n    const currentTab = this.getCurrentTab()\n    const nextTabListItem = currentTab.parentNode.nextElementSibling\n    let nextTab\n\n    if (nextTabListItem) {\n      nextTab = nextTabListItem.querySelector('.nhsuk-tabs__tab')\n    }\n    if (nextTab) {\n      this.hideTab(currentTab)\n      this.showTab(nextTab)\n      nextTab.focus()\n      this.createHistoryEntry(nextTab)\n    }\n  }\n\n  activatePreviousTab() {\n    const currentTab = this.getCurrentTab()\n    const previousTabListItem = currentTab.parentNode.previousElementSibling\n    let previousTab\n\n    if (previousTabListItem) {\n      previousTab = previousTabListItem.querySelector('.nhsuk-tabs__tab')\n    }\n    if (previousTab) {\n      this.hideTab(currentTab)\n      this.showTab(previousTab)\n      previousTab.focus()\n      this.createHistoryEntry(previousTab)\n    }\n  }\n\n  getPanel($tab) {\n    const $panel = this.$root.querySelector(Tabs.getHref($tab))\n    return $panel\n  }\n\n  showPanel($tab) {\n    const $panel = this.getPanel($tab)\n    $panel.classList.remove(this.jsHiddenClass)\n    $panel.dispatchEvent(this.showEvent)\n  }\n\n  hidePanel(tab) {\n    const $panel = this.getPanel(tab)\n    $panel.classList.add(this.jsHiddenClass)\n    $panel.dispatchEvent(this.hideEvent)\n  }\n\n  unhighlightTab($tab) {\n    $tab.setAttribute('aria-selected', 'false')\n    $tab.parentNode.classList.remove('nhsuk-tabs__list-item--selected')\n    $tab.setAttribute('tabindex', '-1')\n  }\n\n  highlightTab($tab) {\n    $tab.setAttribute('aria-selected', 'true')\n    $tab.parentNode.classList.add('nhsuk-tabs__list-item--selected')\n    $tab.setAttribute('tabindex', '0')\n  }\n\n  getCurrentTab() {\n    return this.$root.querySelector(\n      '.nhsuk-tabs__list-item--selected .nhsuk-tabs__tab'\n    )\n  }\n\n  // this is because IE doesn't always return the actual value but a relative full path\n  // should be a utility function most prob\n  // http://labs.thesedays.com/blog/2010/01/08/getting-the-href-value-with-jquery-in-ie/\n  static getHref($tab) {\n    const href = $tab.getAttribute('href')\n    const hash = href.slice(href.indexOf('#'), href.length)\n    return hash\n  }\n}\n\n/**\n * Initialise tabs component\n *\n * @param {object} [options]\n * @param {Element | Document | null} [options.scope] - Scope of the document to search within\n */\nexport function initTabs(options = {}) {\n  const $scope = options.scope || document\n  const $tabs = $scope.querySelectorAll('[data-module=\"nhsuk-tabs\"]')\n\n  $tabs.forEach(($root) => {\n    new Tabs($root)\n  })\n}\n","import {\n  initRadios,\n  initHeader,\n  initButtons,\n  initCharacterCounts,\n  initCheckboxes,\n  initDetails,\n  initErrorSummary,\n  initSkipLinks,\n  initTabs\n} from './components/index.mjs'\n\n/**\n * Use this function to initialise nhsuk-frontend components within a\n * given scope. This function is called by default with the document\n * element, but you can call it again later with a new DOM element\n * containing nhsuk-frontend components which you wish to initialise.\n *\n * @param {Element | Document | null} [$scope] - Scope of the document to search within\n */\nexport function initAll($scope) {\n  const options = {\n    scope: $scope || document\n  }\n\n  initHeader(options)\n  initSkipLinks(options)\n  initButtons(options)\n  initCharacterCounts(options)\n  initCheckboxes(options)\n  initDetails(options)\n  initErrorSummary(options)\n  initRadios(options)\n  initTabs(options)\n}\n\nexport * from './components/index.mjs'\n"],"names":["Button","constructor","$root","HTMLElement","this","debounceFormSubmitTimer","addEventListener","handleKeyDown","bind","debounce","event","target","getAttribute","keyCode","preventDefault","click","setTimeout","DEBOUNCE_TIMEOUT_IN_SECONDS","initButtons","options","scope","document","querySelectorAll","forEach","CharacterCount","$textarea","querySelector","HTMLTextAreaElement","HTMLInputElement","$visibleCountMessage","$screenReaderCountMessage","lastInputTimestamp","$fallbackLimitMessage","getElementById","id","insertAdjacentElement","createElement","className","setAttribute","classList","add","getDataset","countAttribute","defaults","characterCountAttribute","maxwords","wordCountAttribute","maxLength","removeAttribute","bindChangeEvents","window","updateCountMessage","element","dataset","attributes","i","length","attribute","match","name","value","count","text","handleKeyUp","handleFocus","handleBlur","checkIfValueChanged","oldValue","updateVisibleCountMessage","updateScreenReaderCountMessage","remainingNumber","isOverThreshold","remove","innerHTML","formattedUpdateMessage","charVerb","charNoun","displayNumber","Math","abs","currentLength","threshold","Date","now","valueChecker","setInterval","clearInterval","initCharacterCounts","toggleAttribute","attr","toggleConditionalInput","input","conditionalId","conditionalElement","checked","prototype","Checkboxes","$inputs","syncAllConditionalReveals","checkboxButton","handleClick","item","unCheckAllInputsExcept","form","inputWithSameName","unCheckExclusiveInputs","exclusiveInput","hasAttribute","initCheckboxes","Details","HTMLDetailsElement","polyfillDetails","content","d","getTime","performance","replace","c","r","random","floor","toString","generateUniqueID","summary","style","display","toggleDetails","initDetails","ErrorSummary","config","disableAutoFocus","focus","getAssociatedLegendOrLabel","fieldset","closest","legends","getElementsByTagName","candidateLegend","type","legendTop","getBoundingClientRect","top","inputRect","height","innerHeight","focusTarget","tagName","href","hash","legendOrLabel","scrollIntoView","preventScroll","initErrorSummary","focusOnPageLoad","Header","navigation","navigationList","navigationItems","menu","menuToggle","menuList","menuIsEnabled","menuIsOpen","handleEscapeKey","onEscapeKey","handleUpdateNavigation","updateNavigation","handleToggleMenu","toggleMenu","setupNavigation","func","timeout","timer","args","clearTimeout","apply","resetNavigation","right","breakpoints","breakpoint","insertBefore","offsetWidth","width","push","setupMenu","parentElement","appendChild","enableMenu","disableMenu","closeMenu","removeEventListener","removeProperty","key","openMenu","setProperty","offsetHeight","filter","initHeader","Radios","radioButton","initRadios","SkipLink","HTMLAnchorElement","linkedElementId","split","pop","$linkedElement","$element","isFocusable","onBlur","call","onFocus","onBeforeFocus","setFocus","initSkipLinks","Tabs","$tabs","$tabList","$tabListItems","boundTabClick","onTabClick","boundTabKeydown","onTabKeydown","boundOnHashChange","onHashChange","keys","down","left","up","jsHiddenClass","showEvent","CustomEvent","hideEvent","matchMedia","setupResponsiveChecks","setup","mql","checkMode","addListener","matches","teardown","$item","$tab","setAttributes","hideTab","$activeTab","getTab","location","showTab","unsetAttributes","$tabWithHash","changingHash","$previousTab","getCurrentTab","unhighlightTab","hidePanel","highlightTab","showPanel","panelId","getHref","slice","$panel","getPanel","e","$currentTab","$newTab","currentTarget","createHistoryEntry","activatePreviousTab","activateNextTab","currentTab","nextTabListItem","parentNode","nextElementSibling","nextTab","previousTabListItem","previousElementSibling","previousTab","dispatchEvent","tab","indexOf","initTabs","initAll","$scope"],"mappings":"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"}