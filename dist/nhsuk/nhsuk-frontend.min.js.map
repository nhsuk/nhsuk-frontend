{"version":3,"file":"nhsuk-frontend.min.js","sources":["../../src/nhsuk/common/nhsuk-frontend-version.mjs","../../src/nhsuk/common/index.mjs","../../src/nhsuk/errors/index.mjs","../../src/nhsuk/component.mjs","../../src/nhsuk/components/button/button.mjs","../../src/nhsuk/components/character-count/character-count.mjs","../../src/nhsuk/components/checkboxes/checkboxes.mjs","../../src/nhsuk/components/error-summary/error-summary.mjs","../../src/nhsuk/components/header/header.mjs","../../src/nhsuk/components/notification-banner/notification-banner.mjs","../../src/nhsuk/components/radios/radios.mjs","../../src/nhsuk/components/skip-link/skip-link.mjs","../../src/nhsuk/components/tabs/tabs.mjs","../../src/nhsuk/index.mjs"],"sourcesContent":["/*\n * This variable is automatically overwritten during builds and releases.\n * It doesn't need to be updated manually.\n */\n\n/**\n * NHS.UK frontend release version\n *\n * {@link https://github.com/nhsuk/nhsuk-frontend/releases}\n */\nexport const version = 'development'\n","/**\n * Toggle a toggle a class on conditional content for an input based on checked state\n *\n * @param {Element | null} $input - input element\n * @param {string} className - class to toggle\n */\nexport function toggleConditionalInput($input, className) {\n  if (!$input || !($input instanceof HTMLInputElement) || !className) {\n    return\n  }\n\n  const targetId = $input.getAttribute('aria-controls')\n  if (!targetId) {\n    return\n  }\n\n  const target = document.getElementById(targetId)\n  if (!target) {\n    return\n  }\n\n  $input.setAttribute('aria-expanded', $input.checked.toString())\n  target.classList.toggle(className, !$input.checked)\n}\n\n/**\n * Get NHS.UK frontend breakpoint value from CSS custom property\n *\n * @param {string} name - Breakpoint name\n */\nexport function getBreakpoint(name) {\n  const property = `--nhsuk-breakpoint-${name}`\n\n  // Get value from `<html>` with breakpoints on CSS :root\n  const value = window\n    .getComputedStyle(document.documentElement)\n    .getPropertyValue(property)\n\n  return {\n    property,\n    value: value || undefined\n  }\n}\n\n/**\n * Move focus to element\n *\n * Sets tabindex to -1 to make the element programmatically focusable,\n * but removes it on blur as the element doesn't need to be focused again.\n *\n * Original code taken from GDS (Government Digital Service)\n * {@link https://github.com/alphagov/govuk-frontend}\n *\n * @template {HTMLElement} FocusElement\n * @param {FocusElement} $element - HTML element\n * @param {object} [options] - Handler options\n * @param {function(this: FocusElement): void} [options.onBeforeFocus] - Callback before focus\n * @param {function(this: FocusElement): void} [options.onBlur] - Callback on blur\n */\nexport function setFocus($element, options = {}) {\n  const isFocusable = $element.getAttribute('tabindex')\n\n  if (!isFocusable) {\n    $element.setAttribute('tabindex', '-1')\n  }\n\n  /**\n   * Handle element focus\n   */\n  function onFocus() {\n    $element.removeEventListener('focus', onFocus)\n    $element.addEventListener('blur', onBlur)\n  }\n\n  /**\n   * Handle element blur\n   */\n  function onBlur() {\n    $element.removeEventListener('blur', onBlur)\n\n    if (options.onBlur) {\n      options.onBlur.call($element)\n    }\n\n    if (!isFocusable) {\n      $element.removeAttribute('tabindex')\n    }\n  }\n\n  // Add listener to reset element on blur, after focus\n  $element.addEventListener('focus', onFocus)\n\n  // Focus element\n  if (options.onBeforeFocus) {\n    options.onBeforeFocus.call($element)\n  }\n\n  $element.focus()\n}\n\n/**\n * Checks if component is already initialised\n *\n * @param {Element} $root - HTML element to be checked\n * @param {string} moduleName - name of component module\n * @returns {boolean} Whether component is already initialised\n */\nexport function isInitialised($root, moduleName) {\n  return (\n    $root instanceof HTMLElement &&\n    $root.hasAttribute(`data-${moduleName}-init`)\n  )\n}\n\n/**\n * Checks if NHS.UK frontend is supported on this page\n *\n * Some browsers will load and run our JavaScript but NHS.UK frontend\n * won't be supported.\n *\n * @param {HTMLElement | null} [$scope] - (internal) `<body>` HTML element checked for browser support\n * @returns {boolean} Whether NHS.UK frontend is supported on this page\n */\nexport function isSupported($scope = document.body) {\n  if (!$scope) {\n    return false\n  }\n\n  return $scope.classList.contains('nhsuk-frontend-supported')\n}\n\n/**\n * Format error message\n *\n * @param {ComponentConstructor} Component - Component that threw the error\n * @param {string} message - Error message\n * @returns {string} - Formatted error message\n */\nexport function formatErrorMessage(Component, message) {\n  return `${Component.moduleName}: ${message}`\n}\n\nexport * from './nhsuk-frontend-version.mjs'\n\n/**\n * @import { ComponentConstructor } from '../component.mjs'\n */\n","import { formatErrorMessage } from '../common/index.mjs'\n\n/**\n * NHS.UK frontend error\n *\n * A base class for `Error`s thrown by NHS.UK frontend.\n *\n * It is meant to be extended into specific types of errors\n * to be thrown by our code.\n *\n * @example\n * ```js\n * class MissingRootError extends NHSUKFrontendError {\n *   // Setting an explicit name is important as extending the class will not\n *   // set a new `name` on the subclass. The `name` property is important\n *   // to ensure intelligible error names even if the class name gets\n *   // mangled by a minifier\n *   name = \"MissingRootError\"\n * }\n * ```\n * @abstract\n */\nexport class NHSUKFrontendError extends Error {\n  name = 'NHSUKFrontendError'\n}\n\n/**\n * Indicates that NHS.UK frontend is not supported\n */\nexport class SupportError extends NHSUKFrontendError {\n  name = 'SupportError'\n\n  /**\n   * Checks if NHS.UK frontend is supported on this page\n   *\n   * @param {HTMLElement | null} [$scope] - HTML element `<body>` checked for browser support\n   */\n  constructor($scope = document.body) {\n    const supportMessage =\n      'noModule' in HTMLScriptElement.prototype\n        ? 'NHS.UK frontend initialised without `<body class=\"nhsuk-frontend-supported\">` from template `<script>` snippet'\n        : 'NHS.UK frontend is not supported in this browser'\n\n    super(\n      $scope\n        ? supportMessage\n        : 'NHS.UK frontend initialised without `<script type=\"module\">`'\n    )\n  }\n}\n\n/**\n * Indicates an issue with an element (possibly `null` or `undefined`)\n */\nexport class ElementError extends NHSUKFrontendError {\n  name = 'ElementError'\n\n  /**\n   * @param {ElementErrorOptions} options - Element error options\n   */\n  constructor(options) {\n    const { component, identifier, element, expectedType } = options\n\n    let message = identifier\n\n    // Append reason\n    message += element\n      ? ` is not of type ${expectedType ?? 'HTMLElement'}`\n      : ' not found'\n\n    super(formatErrorMessage(component, message))\n  }\n}\n\n/**\n * Indicates that a component is already initialised\n */\nexport class InitError extends NHSUKFrontendError {\n  name = 'InitError'\n\n  /**\n   * @param {ComponentConstructor | string} componentOrMessage - Component or init error message\n   */\n  constructor(componentOrMessage) {\n    const message =\n      typeof componentOrMessage === 'string'\n        ? componentOrMessage\n        : formatErrorMessage(\n            componentOrMessage,\n            'Root element (`$root`) already initialised'\n          )\n\n    super(message)\n  }\n}\n\n/**\n * Element error options\n *\n * @typedef {object} ElementErrorOptions\n * @property {Element | null} [element] - The element in error\n * @property {ComponentConstructor} component - Component throwing the error\n * @property {string} identifier - An identifier that'll let the user understand which element has an error. This is whatever makes the most sense\n * @property {string} [expectedType] - The type that was expected for the identifier\n */\n\n/**\n * @import { ComponentConstructor } from '../component.mjs'\n */\n","import { isInitialised, isSupported } from './common/index.mjs'\nimport { ElementError, InitError, SupportError } from './errors/index.mjs'\n\n/**\n * Base component class\n *\n * Centralises the behaviours shared by our components\n *\n * @abstract\n * @template {Element} [RootElementType=HTMLElement]\n */\nexport class Component {\n  /**\n   * @type {typeof Element}\n   */\n  static elementType = HTMLElement\n\n  /**\n   * @type {RootElementType}\n   */\n  $root\n\n  /**\n   * Constructs a new component, validating that NHS.UK frontend is supported\n   *\n   * @param {Element | null} [$root] - HTML element to use for component\n   */\n  constructor($root) {\n    const ComponentClass = /** @type {ComponentConstructor} */ (\n      this.constructor\n    )\n\n    if (!$root || !($root instanceof ComponentClass.elementType)) {\n      throw new ElementError({\n        element: $root,\n        component: ComponentClass,\n        identifier: 'Root element (`$root`)',\n        expectedType: ComponentClass.elementType.name\n      })\n    }\n\n    this.$root = /** @type {RootElementType} */ ($root)\n\n    ComponentClass.checkSupport()\n\n    this.checkInitialised()\n\n    const { moduleName } = ComponentClass\n    this.$root.setAttribute(`data-${moduleName}-init`, '')\n  }\n\n  /**\n   * Validates whether component is already initialised\n   *\n   * @throws {InitError} when component is already initialised\n   */\n  checkInitialised() {\n    const ComponentClass = /** @type {ComponentConstructor} */ (\n      this.constructor\n    )\n\n    if (isInitialised(this.$root, ComponentClass.moduleName)) {\n      throw new InitError(ComponentClass)\n    }\n  }\n\n  /**\n   * Validates whether components are supported\n   *\n   * @throws {SupportError} when the components are not supported\n   */\n  static checkSupport() {\n    if (!isSupported()) {\n      throw new SupportError()\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes\n   */\n  static moduleName = 'nhsuk-component'\n}\n\n/**\n * @template {Element} [RootElementType=HTMLElement]\n * @typedef {typeof Component<RootElementType>} ComponentConstructor\n */\n","import { Component } from '../../component.mjs'\n\nconst DEBOUNCE_TIMEOUT_IN_SECONDS = 1\n\n/**\n * Button component\n */\nexport class Button extends Component {\n  /**\n   * @type {number | null}\n   */\n  debounceFormSubmitTimer = null\n\n  /**\n   * @param {Element | null} [$root] - HTML element to use for component\n   */\n  constructor($root) {\n    super($root)\n\n    /**\n     * Initialise an event listener for keydown at document level\n     * this will help listening for later inserted elements with a role=\"button\"\n     */\n    this.$root.addEventListener('keydown', (event) => this.handleKeyDown(event))\n    this.$root.addEventListener('click', (event) => this.debounce(event))\n  }\n\n  /**\n   * JavaScript 'shim' to trigger the click event of element(s) when the space key is pressed.\n   *\n   * Created since some Assistive Technologies (for example some Screenreaders)\n   * will tell a user to press space on a 'button', so this functionality needs to be shimmed\n   * See https://github.com/alphagov/govuk_elements/pull/272#issuecomment-233028270\n   *\n   * @param {KeyboardEvent} event - Keydown event\n   */\n  handleKeyDown(event) {\n    const target = event.target\n\n    // Handle space bar only\n    if (event.key !== ' ') {\n      return\n    }\n\n    // Handle elements with [role=\"button\"] only\n    if (\n      target instanceof HTMLElement &&\n      target.getAttribute('role') === 'button'\n    ) {\n      event.preventDefault()\n      target.click()\n    }\n  }\n\n  /**\n   * Debounce double-clicks\n   *\n   * If the click quickly succeeds a previous click then nothing will happen.\n   * This stops people accidentally causing multiple form submissions by\n   * double clicking buttons.\n   *\n   * @param {MouseEvent} event - Mouse click event\n   * @returns {undefined | false} Returns undefined, or false when debounced\n   */\n  debounce(event) {\n    // Check the button that is clicked on has the preventDoubleClick feature enabled\n    if (\n      !(event.target instanceof HTMLElement) ||\n      event.target.dataset.preventDoubleClick !== 'true'\n    ) {\n      return\n    }\n\n    // If the timer is still running then we want to prevent the click from submitting the form\n    if (this.debounceFormSubmitTimer) {\n      event.preventDefault()\n      return false\n    }\n\n    this.debounceFormSubmitTimer = window.setTimeout(() => {\n      this.debounceFormSubmitTimer = null\n    }, DEBOUNCE_TIMEOUT_IN_SECONDS * 1000)\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes\n   */\n  static moduleName = 'nhsuk-button'\n}\n\n/**\n * Initialise button component\n *\n * @param {object} [options]\n * @param {Element | Document | null} [options.scope] - Scope of the document to search within\n */\nexport function initButtons(options = {}) {\n  const $scope = options.scope ?? document\n  const $buttons = $scope.querySelectorAll(\n    `[data-module=\"${Button.moduleName}\"]`\n  )\n\n  $buttons.forEach(($root) => {\n    new Button($root)\n  })\n}\n","import { Component } from '../../component.mjs'\nimport { ElementError } from '../../errors/index.mjs'\n\n/**\n * Character count component\n */\nexport class CharacterCount extends Component {\n  /**\n   * @type {number | null}\n   */\n  lastInputTimestamp = null\n  lastInputValue = ''\n\n  /**\n   * @type {number | null}\n   */\n  valueChecker = null\n\n  /**\n   * @param {Element | null} [$root] - HTML element to use for component\n   */\n  constructor($root) {\n    super($root)\n\n    const $textarea = this.$root.querySelector('.nhsuk-js-character-count')\n    if (\n      !$textarea ||\n      !(\n        $textarea instanceof HTMLTextAreaElement ||\n        $textarea instanceof HTMLInputElement\n      )\n    ) {\n      throw new ElementError({\n        component: CharacterCount,\n        element: $textarea,\n        expectedType: 'HTMLTextareaElement or HTMLInputElement',\n        identifier: 'Form field (`.nhsuk-js-character-count`)'\n      })\n    }\n\n    this.$textarea = $textarea\n\n    const fallbackLimitMessageId = `${this.$textarea.id}-info`\n    const $fallbackLimitMessage = document.getElementById(\n      fallbackLimitMessageId\n    )\n\n    if (!$fallbackLimitMessage) {\n      throw new ElementError({\n        component: CharacterCount,\n        element: $fallbackLimitMessage,\n        identifier: `Count message (\\`id=\"${fallbackLimitMessageId}\"\\`)`\n      })\n    }\n\n    // Pre-existing validation error rendered from server\n    this.$errorMessage = this.$root.querySelector('.nhsuk-error-message')\n\n    // Move the fallback count message to be immediately after the textarea\n    // Kept for backwards compatibility\n    this.$textarea.insertAdjacentElement('afterend', $fallbackLimitMessage)\n\n    // Create the *screen reader* specific live-updating counter\n    // This doesn't need any styling classes, as it is never visible\n    const $screenReaderCountMessage = document.createElement('div')\n    $screenReaderCountMessage.className =\n      'nhsuk-character-count__sr-status nhsuk-u-visually-hidden'\n    $screenReaderCountMessage.setAttribute('aria-live', 'polite')\n    this.$screenReaderCountMessage = $screenReaderCountMessage\n    $fallbackLimitMessage.insertAdjacentElement(\n      'afterend',\n      $screenReaderCountMessage\n    )\n\n    // Create our live-updating counter element, copying the classes from the\n    // fallback element for backwards compatibility as these may have been configured\n    const $visibleCountMessage = document.createElement('div')\n    $visibleCountMessage.className = $fallbackLimitMessage.className\n    $visibleCountMessage.classList.add('nhsuk-character-count__status')\n    $visibleCountMessage.setAttribute('aria-hidden', 'true')\n    this.$visibleCountMessage = $visibleCountMessage\n    $fallbackLimitMessage.insertAdjacentElement(\n      'afterend',\n      $visibleCountMessage\n    )\n\n    // Hide the fallback limit message\n    $fallbackLimitMessage.classList.add('nhsuk-u-visually-hidden')\n\n    /**\n     * Read config set using dataset ('data-' values)\n     *\n     * @type {CharacterCountConfig}\n     */\n    this.config = Object.assign(\n      {},\n      CharacterCount.defaults,\n      CharacterCount.getDataset(this.$root)\n    )\n\n    // Determine the limit attribute (characters or words)\n    this.maxLength = this.config.maxwords ?? this.config.maxlength ?? Infinity\n\n    // Remove hard limit if set\n    this.$textarea.removeAttribute('maxlength')\n\n    this.bindChangeEvents()\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event.\n    window.addEventListener('pageshow', () => this.updateCountMessage())\n\n    // Although we've set up handlers to sync state on the pageshow event, init\n    // could be called after those events have fired, for example if they are\n    // added to the page dynamically, so update now too.\n    this.updateCountMessage()\n  }\n\n  /**\n   * Read data attributes\n   *\n   * @param {HTMLElement} $element - HTML element\n   */\n  static getDataset($element) {\n    const dataset = /** @type {CharacterCountConfig} */ ({})\n\n    for (const [key, value] of Object.entries($element.dataset)) {\n      if (key === 'maxlength' || key === 'maxwords' || key === 'threshold') {\n        dataset[key] = Number(value)\n      }\n    }\n\n    return dataset\n  }\n\n  /**\n   * Counts characters or words in text\n   *\n   * @param {string} text\n   */\n  count(text) {\n    let length\n    if (this.config.maxwords) {\n      const tokens = text.match(/\\S+/g) ?? [] // Matches consecutive non-whitespace chars\n      length = tokens.length\n    } else {\n      length = text.length\n    }\n    return length\n  }\n\n  /**\n   * Bind input propertychange to the elements and update based on the change\n   */\n  bindChangeEvents() {\n    this.$textarea.addEventListener('keyup', () => this.handleKeyUp())\n\n    // Bind focus/blur events to start/stop polling\n    this.$textarea.addEventListener('focus', () => this.handleFocus())\n    this.$textarea.addEventListener('blur', () => this.handleBlur())\n  }\n\n  /**\n   * Speech recognition software such as Dragon NaturallySpeaking will modify the\n   * fields by directly changing its `value`. These changes don't trigger events\n   * in JavaScript, so we need to poll to handle when and if they occur\n   */\n  checkIfValueChanged() {\n    if (this.$textarea.value !== this.lastInputValue) {\n      this.lastInputValue = this.$textarea.value\n      this.updateCountMessage()\n    }\n  }\n\n  /**\n   * Helper function to update both the visible and screen reader-specific\n   * counters simultaneously (e.g. on init)\n   */\n  updateCountMessage() {\n    this.updateVisibleCountMessage()\n    this.updateScreenReaderCountMessage()\n  }\n\n  /**\n   * Update visible counter\n   */\n  updateVisibleCountMessage() {\n    const remainingNumber = this.maxLength - this.count(this.$textarea.value)\n    const isError = remainingNumber < 0\n\n    // If input is over the threshold, remove the disabled class which renders the\n    // counter invisible.\n    this.$visibleCountMessage.classList.toggle(\n      'nhsuk-character-count__message--disabled',\n      !this.isOverThreshold()\n    )\n\n    // Update styles\n    if (!this.$errorMessage) {\n      // Only toggle the textarea error class if there isn't an error message\n      // already, as it may be unrelated to the limit (eg: allowed characters)\n      // and would set the border colour back to black.\n      this.$textarea.classList.toggle('nhsuk-textarea--error', isError)\n    }\n    this.$visibleCountMessage.classList.toggle('nhsuk-error-message', isError)\n    this.$visibleCountMessage.classList.toggle('nhsuk-hint', !isError)\n\n    // Update message\n    this.$visibleCountMessage.innerHTML = this.formattedUpdateMessage()\n  }\n\n  /**\n   * Update screen reader-specific counter\n   */\n  updateScreenReaderCountMessage() {\n    // If over the threshold, remove the aria-hidden attribute, allowing screen\n    // readers to announce the content of the element.\n    if (this.isOverThreshold()) {\n      this.$screenReaderCountMessage.removeAttribute('aria-hidden')\n    } else {\n      this.$screenReaderCountMessage.setAttribute('aria-hidden', 'true')\n    }\n\n    // Update message\n    this.$screenReaderCountMessage.innerHTML = this.formattedUpdateMessage()\n  }\n\n  /**\n   * Format update message\n   */\n  formattedUpdateMessage() {\n    const remainingNumber = this.maxLength - this.count(this.$textarea.value)\n\n    let charVerb = 'remaining'\n    let charNoun = 'character'\n    let displayNumber = remainingNumber\n    if (this.config.maxwords) {\n      charNoun = 'word'\n    }\n    charNoun += remainingNumber === -1 || remainingNumber === 1 ? '' : 's'\n\n    charVerb = remainingNumber < 0 ? 'too many' : 'remaining'\n    displayNumber = Math.abs(remainingNumber)\n\n    return `You have ${displayNumber} ${charNoun} ${charVerb}`\n  }\n\n  /**\n   * Check if count is over threshold\n   *\n   * Checks whether the value is over the configured threshold for the input.\n   * If there is no configured threshold, it is set to 0 and this function will\n   * always return true\n   */\n  isOverThreshold() {\n    // Determine the remaining number of characters/words\n    const currentLength = this.count(this.$textarea.value)\n\n    // Set threshold if presented in config\n    const thresholdPercent = this.config.threshold ?? 0\n    const thresholdValue = (this.maxLength * thresholdPercent) / 100\n\n    return thresholdValue <= currentLength\n  }\n\n  /**\n   * Handle key up event\n   *\n   * Update the visible character counter and keep track of when the last update\n   * happened for each keypress\n   */\n  handleKeyUp() {\n    this.updateVisibleCountMessage()\n    this.lastInputTimestamp = Date.now()\n  }\n\n  /**\n   * Handle focus event\n   */\n  handleFocus() {\n    // If the field is focused, and a keyup event hasn't been detected for at\n    // least 1000 ms (1 second), then run the manual change check.\n    // This is so that the update triggered by the manual comparison doesn't\n    // conflict with debounced KeyboardEvent updates.\n    this.valueChecker = window.setInterval(() => {\n      if (\n        !this.lastInputTimestamp ||\n        Date.now() - 500 >= this.lastInputTimestamp\n      ) {\n        this.checkIfValueChanged()\n      }\n    }, 1000)\n  }\n\n  /**\n   * Handle blur event\n   *\n   * Stop checking the textarea value once the textarea no longer has focus\n   */\n  handleBlur() {\n    // Cancel value checking on blur\n    if (this.valueChecker) {\n      window.clearInterval(this.valueChecker)\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes\n   */\n  static moduleName = 'nhsuk-character-count'\n\n  /**\n   * Character count default config\n   *\n   * @see {@link CharacterCountConfig}\n   * @constant\n   * @type {CharacterCountConfig}\n   */\n  static defaults = Object.freeze({\n    threshold: 0\n  })\n}\n\n/**\n * Initialise character count component\n *\n * @param {object} [options]\n * @param {Element | Document | null} [options.scope] - Scope of the document to search within\n */\nexport function initCharacterCounts(options = {}) {\n  const $scope = options.scope ?? document\n  const $characterCounts = $scope.querySelectorAll(\n    `[data-module=\"${CharacterCount.moduleName}\"]`\n  )\n\n  $characterCounts.forEach(($root) => {\n    new CharacterCount($root)\n  })\n}\n\n/**\n * Character count config\n *\n * @see {@link CharacterCount.defaults}\n * @typedef {object} CharacterCountConfig\n * @property {number} [maxlength] - The maximum number of characters.\n *   If maxwords is provided, the maxlength option will be ignored.\n * @property {number} [maxwords] - The maximum number of words. If maxwords is\n *   provided, the maxlength option will be ignored.\n * @property {number} [threshold=0] - The percentage value of the limit at\n *   which point the count message is displayed. If this attribute is set, the\n *   count message will be hidden by default.\n */\n","import { toggleConditionalInput } from '../../common/index.mjs'\nimport { Component } from '../../component.mjs'\nimport { ElementError } from '../../errors/index.mjs'\n\n/**\n * Checkboxes component\n *\n * Conditionally show content when a checkbox button is checked\n *\n * Test at {@link http://localhost:3000/nhsuk-frontend/components/checkboxes/with-conditional-content/}\n */\nexport class Checkboxes extends Component {\n  /**\n   * @param {Element | null} [$root] - HTML element to use for component\n   */\n  constructor($root) {\n    super($root)\n\n    const $inputs = this.$root.querySelectorAll('input[type=\"checkbox\"]')\n    if (!$inputs.length) {\n      throw new ElementError({\n        component: Checkboxes,\n        identifier: 'Form inputs (`<input type=\"checkbox\">`)'\n      })\n    }\n\n    this.$inputs = $inputs\n\n    this.$inputs.forEach(($input) => {\n      const targetId = $input.getAttribute('aria-controls')\n\n      // Skip checkboxes without aria-controls attributes\n      if (!targetId) {\n        return\n      }\n\n      // Throw if target conditional element does not exist.\n      if (!document.getElementById(targetId)) {\n        throw new ElementError({\n          component: Checkboxes,\n          identifier: `Conditional reveal (\\`id=\"${targetId}\"\\`)`\n        })\n      }\n    })\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event.\n    window.addEventListener('pageshow', () => this.syncAllConditionalReveals())\n\n    // Although we've set up handlers to sync state on the pageshow event, init\n    // could be called after those events have fired, for example if they are\n    // added to the page dynamically, so sync now too.\n    this.syncAllConditionalReveals()\n\n    // Handle events\n    this.$root.addEventListener('click', (event) => this.handleClick(event))\n  }\n\n  /**\n   * Sync the conditional reveal states for all checkboxes in this component.\n   */\n  syncAllConditionalReveals() {\n    this.$inputs.forEach(($input) =>\n      this.syncConditionalRevealWithInputState($input)\n    )\n  }\n\n  /**\n   * Sync conditional reveal with the input state\n   *\n   * Synchronise the visibility of the conditional reveal, and its accessible\n   * state, with the input's checked state.\n   *\n   * @param {HTMLInputElement} $input - Checkbox input\n   */\n  syncConditionalRevealWithInputState($input) {\n    toggleConditionalInput($input, 'nhsuk-checkboxes__conditional--hidden')\n  }\n\n  /**\n   * Uncheck other checkboxes\n   *\n   * Find any other checkbox inputs with the checkbox group value, and uncheck them.\n   * This is useful for when a “None of these\" checkbox is checked.\n   *\n   * @param {HTMLInputElement} $input - Checkbox input\n   */\n  unCheckAllInputsExcept($input) {\n    const { checkboxExclusiveGroup: exclusiveGroup } = $input.dataset\n\n    const allInputsWithSameName = document.querySelectorAll(\n      `input[type=\"checkbox\"][name=\"${$input.name}\"]`\n    )\n\n    allInputsWithSameName.forEach(($inputWithSameName) => {\n      const hasSameFormOwner = $input.form === $inputWithSameName.form\n\n      // Uncheck all with same exclusive group by default, otherwise fall back to\n      // GOV.UK Frontend behaviour to uncheck all with the same name attribute\n      if (hasSameFormOwner && $inputWithSameName !== $input) {\n        this.setInputState($inputWithSameName, false, exclusiveGroup)\n      }\n    })\n  }\n\n  /**\n   * Uncheck exclusive inputs\n   *\n   * Find any checkbox inputs with the same checkbox group value and the 'exclusive' behaviour,\n   * and uncheck them. This helps prevent someone checking both a regular checkbox and a\n   * \"None of these\" checkbox in the same fieldset.\n   *\n   * @param {HTMLInputElement} $input - Checkbox input\n   */\n  unCheckExclusiveInputs($input) {\n    const { checkboxExclusiveGroup: exclusiveGroup } = $input.dataset\n\n    const allInputsWithSameNameAndExclusiveBehaviour =\n      document.querySelectorAll(\n        `input[type=\"checkbox\"][data-checkbox-exclusive][name=\"${$input.name}\"]`\n      )\n\n    allInputsWithSameNameAndExclusiveBehaviour.forEach(($exclusiveInput) => {\n      const hasSameFormOwner = $input.form === $exclusiveInput.form\n\n      // Uncheck the exclusive input only. When no group is set, fall back to\n      // GOV.UK Frontend behaviour and locate the exclusive input by name\n      if (hasSameFormOwner) {\n        this.setInputState($exclusiveInput, false, exclusiveGroup)\n      }\n    })\n  }\n\n  /**\n   * Set input state, optionally for matching exclusive group only\n   *\n   * @param {HTMLInputElement} $input - Checkbox input\n   * @param {boolean} checked - Checkbox checked state\n   * @param {string} [exclusiveGroup] - Set state for matching exclusive group only (optional)\n   */\n  setInputState($input, checked, exclusiveGroup) {\n    const { checkboxExclusiveGroup } = $input.dataset\n\n    // Skip input when exclusive group does not match\n    if (\n      exclusiveGroup &&\n      checkboxExclusiveGroup &&\n      checkboxExclusiveGroup !== exclusiveGroup\n    ) {\n      return\n    }\n\n    $input.checked = checked\n    this.syncConditionalRevealWithInputState($input)\n  }\n\n  /**\n   * Toggle classes and attributes\n   *\n   * @param {MouseEvent} event - Click event\n   */\n  handleClick(event) {\n    const $clickedInput = event.target\n\n    // Ignore clicks on things that aren't checkbox inputs\n    if (\n      !($clickedInput instanceof HTMLInputElement) ||\n      $clickedInput.type !== 'checkbox'\n    ) {\n      return\n    }\n\n    // If the checkbox conditionally-reveals some content, sync the state\n    const hasAriaControls = $clickedInput.getAttribute('aria-controls')\n    if (hasAriaControls) {\n      this.syncConditionalRevealWithInputState($clickedInput)\n    }\n\n    // No further behaviour needed for unchecking\n    if (!$clickedInput.checked) {\n      return\n    }\n\n    // Handle 'exclusive' checkbox behaviour (ie \"None of these\")\n    if ('checkboxExclusive' in $clickedInput.dataset) {\n      this.unCheckAllInputsExcept($clickedInput)\n    } else {\n      this.unCheckExclusiveInputs($clickedInput)\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes\n   */\n  static moduleName = 'nhsuk-checkboxes'\n}\n\n/**\n * Initialise checkboxes component\n *\n * @param {object} [options]\n * @param {Element | Document | null} [options.scope] - Scope of the document to search within\n */\nexport function initCheckboxes(options = {}) {\n  const $scope = options.scope ?? document\n  const $checkboxes = $scope.querySelectorAll(\n    `[data-module=\"${Checkboxes.moduleName}\"]`\n  )\n\n  $checkboxes.forEach(($root) => {\n    new Checkboxes($root)\n  })\n}\n","import { Component } from '../../component.mjs'\n\n/**\n * Error summary component\n *\n * Adapted from https://github.com/alphagov/govuk-frontend/blob/v2.13.0/src/components/error-summary/error-summary.js\n */\nexport class ErrorSummary extends Component {\n  /**\n   * @param {Element | null} [$root] - HTML element to use for component\n   * @param {ErrorSummaryConfig} [config] - Error summary config\n   */\n  constructor($root, config = {}) {\n    super($root)\n\n    if (!config.disableAutoFocus) {\n      this.$root.focus()\n    }\n\n    this.$root.addEventListener('click', (event) => this.handleClick(event))\n  }\n\n  /**\n   * Get associated legend or label\n   *\n   * Returns the first element that exists from this list:\n   *\n   * - The `<legend>` associated with the closest `<fieldset>` ancestor, as long\n   *   as the top of it is no more than half a viewport height away from the\n   *   bottom of the input\n   * - The first `<label>` that is associated with the input using for='inputId'\n   * - The closest parent `<label>`\n   *\n   * @param {Element} $input - The input\n   * @returns {Element | null} Associated legend or label, or null if no\n   *   associated legend or label can be found\n   */\n  getAssociatedLegendOrLabel($input) {\n    const $fieldset = $input.closest('fieldset')\n\n    if ($fieldset) {\n      const $legends = $fieldset.getElementsByTagName('legend')\n\n      if ($legends.length) {\n        const $candidateLegend = $legends[0]\n\n        // If the input type is radio or checkbox, always use the legend if there\n        // is one.\n        if (\n          $input instanceof HTMLInputElement &&\n          ($input.type === 'checkbox' || $input.type === 'radio')\n        ) {\n          return $candidateLegend\n        }\n\n        // For other input types, only scroll to the fieldset’s legend (instead of\n        // the label associated with the input) if the input would end up in the\n        // top half of the screen.\n        //\n        // This should avoid situations where the input either ends up off the\n        // screen, or obscured by a software keyboard.\n        const legendTop = $candidateLegend.getBoundingClientRect().top\n        const inputRect = $input.getBoundingClientRect()\n\n        // If the browser doesn't support Element.getBoundingClientRect().height\n        // or window.innerHeight (like IE8), bail and just link to the label.\n        if (inputRect.height && window.innerHeight) {\n          const inputBottom = inputRect.top + inputRect.height\n\n          if (inputBottom - legendTop < window.innerHeight / 2) {\n            return $candidateLegend\n          }\n        }\n      }\n    }\n\n    return (\n      document.querySelector(`label[for='${$input.getAttribute('id')}']`) ??\n      $input.closest('label')\n    )\n  }\n\n  /**\n   * Focus the target element\n   *\n   * By default, the browser will scroll the target into view. Because our labels\n   * or legends appear above the input, this means the user will be presented with\n   * an input without any context, as the label or legend will be off the top of\n   * the screen.\n   *\n   * Manually handling the click event, scrolling the question into view and then\n   * focussing the element solves this.\n   *\n   * This also results in the label and/or legend being announced correctly in\n   * NVDA - without this only the field type is announced\n   * (e.g. 'Edit, has autocomplete').\n   *\n   * @param {EventTarget} $target - Event target\n   * @returns {boolean} True if the target was able to be focussed\n   */\n  focusTarget($target) {\n    // If the element that was clicked was not a link, return early\n    if (!($target instanceof HTMLAnchorElement)) {\n      return false\n    }\n\n    const inputId = $target.hash.replace('#', '')\n    if (!inputId) {\n      return false\n    }\n\n    const $input = document.getElementById(inputId)\n    if (!$input) {\n      return false\n    }\n\n    const $legendOrLabel = this.getAssociatedLegendOrLabel($input)\n    if (!$legendOrLabel) {\n      return false\n    }\n\n    // Scroll the legend or label into view *before* calling focus on the input to\n    // avoid extra scrolling in browsers that don't support `preventScroll` (which\n    // at time of writing is most of them...)\n    $legendOrLabel.scrollIntoView()\n    $input.focus({ preventScroll: true })\n\n    return true\n  }\n\n  /**\n   * Click event handler\n   *\n   * @param {MouseEvent} event - Click event\n   */\n  handleClick(event) {\n    const $target = event.target\n    if ($target && this.focusTarget($target)) {\n      event.preventDefault()\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes\n   */\n  static moduleName = 'nhsuk-error-summary'\n}\n\n/**\n * Initialise error summary component\n *\n * @param {object} [options]\n * @param {Element | Document | null} [options.scope] - Scope of the document to search within\n * @param {boolean} [options.focusOnPageLoad] - If set to `false` the error\n *   summary will not be focussed when the page loads.\n */\nexport function initErrorSummary(options = {}) {\n  const $scope = options.scope ?? document\n  const $root = $scope.querySelector(\n    `[data-module=\"${ErrorSummary.moduleName}\"]`\n  )\n\n  if (!$root) {\n    return\n  }\n\n  new ErrorSummary($root, {\n    disableAutoFocus: options.focusOnPageLoad === false\n  })\n}\n\n/**\n * Error summary config\n *\n * @typedef {object} ErrorSummaryConfig\n * @property {boolean} [disableAutoFocus=false] - If set to `true` the error\n *   summary will not be focussed when the page loads.\n */\n","import { Component } from '../../component.mjs'\nimport { ElementError } from '../../errors/index.mjs'\n\n/**\n * Header component\n */\nexport class Header extends Component {\n  /** @type {HTMLElement | null} */\n  $navigation = null\n\n  /** @type {HTMLElement | null} */\n  $navigationList = null\n\n  /** @type {NodeListOf<HTMLElement> | null} */\n  $navigationItems = null\n\n  /** @type {HTMLElement | null} */\n  $menu = null\n\n  /** @type {HTMLButtonElement | null} */\n  $menuToggle = null\n\n  /** @type {HTMLElement | null} */\n  $menuList = null\n\n  width = 0\n\n  /**\n   * @type {{ element: HTMLElement, right: number }[]}\n   */\n  breakpoints = []\n\n  /**\n   * @type {number | null}\n   */\n  updateNavigationTimer = null\n\n  menuIsEnabled = false\n  menuIsOpen = false\n\n  /**\n   * @param {Element | null} [$root] - HTML element to use for component\n   */\n  constructor($root) {\n    super($root)\n\n    const $navigation = this.$root.querySelector('.nhsuk-header__navigation')\n    const $navigationList = this.$root.querySelector(\n      '.nhsuk-header__navigation-list'\n    )\n\n    const $navigationItems = /** @type {NodeListOf<HTMLElement>} */ (\n      this.$root.querySelectorAll('.nhsuk-header__navigation-item')\n    )\n\n    const $menu = this.$root.querySelector('.nhsuk-header__menu')\n    const $menuToggle = this.$root.querySelector('.nhsuk-header__menu-toggle')\n\n    // Check for navigation (optional)\n    if ($navigation) {\n      if (!($navigation instanceof HTMLElement)) {\n        throw new ElementError({\n          component: Header,\n          identifier: 'Navigation (`<nav class=\"nhsuk-header__navigation\">`)'\n        })\n      }\n\n      if (!$navigationList || !($navigationList instanceof HTMLElement)) {\n        throw new ElementError({\n          component: Header,\n          identifier: 'List (`<ul class=\"nhsuk-header__navigation-list\">`)'\n        })\n      }\n\n      if (!$navigationItems.length) {\n        throw new ElementError({\n          component: Header,\n          identifier:\n            'List items (`<li class=\"nhsuk-header__navigation-item\">`)'\n        })\n      }\n\n      if (!$menu || !($menu instanceof HTMLElement)) {\n        throw new ElementError({\n          component: Header,\n          identifier: 'Menu item (`<li class=\"nhsuk-header__menu\" hidden>`)'\n        })\n      }\n\n      if (!$menuToggle || !($menuToggle instanceof HTMLButtonElement)) {\n        throw new ElementError({\n          component: Header,\n          identifier:\n            'Menu button (`<button class=\"nhsuk-header__menu-toggle\">`)',\n          expectedType: 'HTMLButtonElement'\n        })\n      }\n\n      this.$navigation = $navigation\n      this.$navigationList = $navigationList\n      this.$navigationItems = $navigationItems\n      this.$menu = $menu\n      this.$menuToggle = $menuToggle\n      this.$menuList = document.createElement('ul')\n    }\n\n    // Save bound functions so we can remove event listeners when unnecessary\n    this.handleEscapeKey = this.onEscapeKey.bind(this)\n    this.handleUpdateNavigation = this.updateNavigation.bind(this)\n    this.handleToggleMenu = this.toggleMenu.bind(this)\n\n    this.setupNavigation()\n    this.updateNavigation()\n  }\n\n  /**\n   * Reset navigation\n   *\n   * Calculate available space by summing the width of each navigation item\n   */\n  resetNavigation() {\n    const { $menu, $navigationList } = this\n    if (!$menu || !$navigationList) {\n      return\n    }\n\n    let right = 0\n\n    // Reset and calculate widths on every resize\n    this.breakpoints.forEach((breakpoint) => {\n      $navigationList.insertBefore(breakpoint.element, $menu)\n\n      // Calculate widths\n      right += breakpoint.element.offsetWidth\n      breakpoint.right = right\n    })\n\n    // Reset space for menu button\n    this.width = $navigationList.offsetWidth\n  }\n\n  /**\n   * Add the breakpoints with default positions\n   */\n  setupNavigation() {\n    const { $navigationItems } = this\n\n    // Skip with no navigation items\n    if (!$navigationItems) {\n      return\n    }\n\n    $navigationItems.forEach((element) => {\n      this.breakpoints.push({ element, right: 0 })\n    })\n\n    // Add resize listener for next update\n    window.addEventListener('resize', () => {\n      if (this.updateNavigationTimer) {\n        window.clearTimeout(this.updateNavigationTimer)\n      }\n\n      this.updateNavigationTimer = window.setTimeout(\n        this.handleUpdateNavigation,\n        100\n      )\n    })\n  }\n\n  /**\n   * Add the menu to the DOM\n   */\n  setupMenu() {\n    const { $menu, $menuList } = this\n\n    // Skip with no menu or when already appended\n    if (!$menu || !$menuList || $menuList.parentElement) {\n      return\n    }\n\n    $menuList.classList.add('nhsuk-header__menu-list')\n    $menuList.setAttribute('hidden', '')\n    $menu.appendChild($menuList)\n  }\n\n  /**\n   * Enable the menu\n   */\n  enableMenu() {\n    const { $menu, $menuToggle } = this\n\n    // Skip with no menu or when already enabled\n    if (!$menu || !$menuToggle || this.menuIsEnabled) {\n      return\n    }\n\n    this.menuIsEnabled = true\n    $menu.removeAttribute('hidden')\n\n    // Add click listener to toggle menu\n    $menuToggle.addEventListener('click', this.handleToggleMenu)\n  }\n\n  /**\n   * Disable the menu\n   */\n  disableMenu() {\n    const { $menu, $menuToggle } = this\n\n    // Skip with no menu or when already disabled\n    if (!$menu || !$menuToggle || !this.menuIsEnabled) {\n      return\n    }\n\n    this.closeMenu()\n    this.menuIsEnabled = false\n    $menu.setAttribute('hidden', '')\n\n    // Remove click listener from toggle menu\n    $menuToggle.removeEventListener('click', this.handleToggleMenu)\n  }\n\n  /**\n   * Close the menu\n   *\n   * Closes the menu and updates accessibility state.\n   *\n   * Removes the bottom border from the navigation\n   */\n  closeMenu() {\n    const { $menuList, $menuToggle, $navigation } = this\n\n    // Skip with no menu or when already closed\n    if (\n      !$navigation ||\n      !$menuList ||\n      !$menuToggle ||\n      !this.menuIsEnabled ||\n      !this.menuIsOpen\n    ) {\n      return\n    }\n\n    this.menuIsOpen = false\n    $menuList.setAttribute('hidden', '')\n    $menuToggle.setAttribute('aria-expanded', 'false')\n    $navigation.style.removeProperty('border-bottom-width')\n\n    // Remove escape key listener to close menu\n    document.removeEventListener('keydown', this.handleEscapeKey)\n  }\n\n  /**\n   * Escape key handler\n   *\n   * This function is called when the user\n   * presses the escape key to close the menu.\n   *\n   * @param {KeyboardEvent} event - Key press event\n   */\n  onEscapeKey(event) {\n    if (event.key === 'Escape') {\n      this.closeMenu()\n    }\n  }\n\n  /**\n   * Open the menu\n   *\n   * Opens the menu and updates accessibility state.\n   *\n   * The menu is absolutely positioned, so it adds a border\n   * to the bottom of the navigation to prevent it from overlapping\n   *\n   * Adds event listeners for the close button,\n   */\n  openMenu() {\n    const { $menuList, $menuToggle, $navigation } = this\n\n    // Skip with no menu or when already open\n    if (\n      !$navigation ||\n      !$menuList ||\n      !$menuToggle ||\n      !this.menuIsEnabled ||\n      this.menuIsOpen\n    ) {\n      return\n    }\n\n    this.menuIsOpen = true\n    $menuList.removeAttribute('hidden')\n    $menuToggle.setAttribute('aria-expanded', 'true')\n    $navigation.style.setProperty(\n      'border-bottom-width',\n      `${$menuList.offsetHeight}px`\n    )\n\n    // Add escape key listener to close menu\n    document.addEventListener('keydown', this.handleEscapeKey)\n  }\n\n  /**\n   * Handle menu button click\n   *\n   * Toggles the menu between open and closed\n   */\n  toggleMenu() {\n    if (!this.menuIsEnabled) {\n      return\n    }\n\n    if (this.menuIsOpen) {\n      this.closeMenu()\n    } else {\n      this.openMenu()\n    }\n  }\n\n  /**\n   * Update navigation for the available space\n   *\n   * Moves all items that overflow the available space into the menu\n   */\n  updateNavigation() {\n    this.resetNavigation()\n\n    // Check for items that overflow\n    let menuItems = this.breakpoints.filter((breakpoint) => {\n      return breakpoint.right > this.width\n    })\n\n    // Disable menu if empty\n    if (!menuItems.length) {\n      this.disableMenu()\n      return\n    }\n\n    this.setupMenu()\n    this.enableMenu()\n\n    const { $menu, $menuList, $navigation } = this\n\n    // Skip when no menu or menu list\n    if (!$menu || !$menuList || !$navigation) {\n      return\n    }\n\n    // Subtract space for menu button\n    this.width -= $menu.offsetWidth\n\n    // Move items based on available width\n    this.breakpoints.forEach((breakpoint) => {\n      if (breakpoint.right > this.width) {\n        $menuList.insertAdjacentElement('beforeend', breakpoint.element)\n      }\n    })\n\n    // Update menu height if open\n    if (this.menuIsOpen) {\n      $navigation.style.setProperty(\n        'border-bottom-width',\n        `${$menuList.offsetHeight}px`\n      )\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes\n   */\n  static moduleName = 'nhsuk-header'\n}\n\n/**\n * Initialise header component\n *\n * @param {object} [options]\n * @param {Element | Document | null} [options.scope] - Scope of the document to search within\n */\nexport function initHeader(options = {}) {\n  const $scope = options.scope ?? document\n  const $root = $scope.querySelector(`[data-module=\"${Header.moduleName}\"]`)\n\n  if (!$root) {\n    return\n  }\n\n  new Header($root)\n}\n","import { setFocus } from '../../common/index.mjs'\nimport { Component } from '../../component.mjs'\n\n/**\n * Notification banner component\n *\n * Adapted from https://github.com/alphagov/govuk-frontend/blob/v5.10.2/packages/govuk-frontend/src/govuk/components/notification-banner/notification-banner.mjs\n */\nexport class NotificationBanner extends Component {\n  /**\n   * @param {Element | null} [$root] - HTML element to use for notification banner\n   */\n  constructor($root) {\n    super($root)\n\n    /**\n     * Read config set using dataset ('data-' values)\n     *\n     * @type {NotificationBannerConfig}\n     */\n    this.config = Object.assign(\n      {},\n      NotificationBanner.defaults,\n      NotificationBanner.getDataset(this.$root)\n    )\n\n    /**\n     * Focus the notification banner\n     *\n     * If `role=\"alert\"` is set, focus the element to help some assistive\n     * technologies prioritise announcing it.\n     *\n     * You can turn off the auto-focus functionality by setting\n     * `data-disable-auto-focus=\"true\"` in the component HTML. You might wish to\n     * do this based on user research findings, or to avoid a clash with another\n     * element which should be focused when the page loads.\n     */\n    if (\n      this.$root.getAttribute('role') === 'alert' &&\n      !this.config.disableAutoFocus\n    ) {\n      setFocus(this.$root)\n    }\n  }\n\n  /**\n   * Read data attributes\n   *\n   * @param {HTMLElement} element - HTML element\n   */\n  static getDataset(element) {\n    const dataset = /** @type {NotificationBannerConfig} */ ({})\n\n    for (const [key, value] of Object.entries(element.dataset)) {\n      if (key === 'disableAutoFocus') {\n        dataset[key] = Boolean(value)\n      }\n    }\n\n    return dataset\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'nhsuk-notification-banner'\n\n  /**\n   * Notification banner default config\n   *\n   * @see {@link NotificationBannerConfig}\n   * @constant\n   * @type {NotificationBannerConfig}\n   */\n  static defaults = Object.freeze({\n    disableAutoFocus: false\n  })\n}\n\n/**\n * Initialise notification banner component\n *\n * @param {object} [options]\n * @param {Element | Document | null} [options.scope] - Scope of the document to search within\n */\nexport function initNotificationBanners(options = {}) {\n  const $scope = options.scope ?? document\n  const $notificationBanners = $scope.querySelectorAll(\n    `[data-module=\"${NotificationBanner.moduleName}\"]`\n  )\n\n  $notificationBanners.forEach(($notificationBanner) => {\n    new NotificationBanner($notificationBanner)\n  })\n}\n\n/**\n * Notification banner config\n *\n * @typedef {object} NotificationBannerConfig\n * @property {boolean} [disableAutoFocus=false] - If set to `true` the\n *   notification banner will not be focussed when the page loads. This only\n *   applies if the component has a `role` of `alert` – in other cases the\n *   component will not be focused on page load, regardless of this option.\n */\n","import { toggleConditionalInput } from '../../common/index.mjs'\nimport { Component } from '../../component.mjs'\nimport { ElementError } from '../../errors/index.mjs'\n\n/**\n * Radios component\n *\n * Conditionally show content when a radio button is checked\n *\n * Test at {@link http://localhost:3000/nhsuk-frontend/components/radios/with-conditional-content/}\n */\nexport class Radios extends Component {\n  /**\n   * @param {Element | null} [$root] - HTML element to use for component\n   */\n  constructor($root) {\n    super($root)\n\n    const $inputs = this.$root.querySelectorAll('input[type=\"radio\"]')\n    if (!$inputs.length) {\n      throw new ElementError({\n        component: Radios,\n        identifier: 'Form inputs (`<input type=\"radio\">`)'\n      })\n    }\n\n    this.$inputs = $inputs\n\n    this.$inputs.forEach(($input) => {\n      const targetId = $input.getAttribute('aria-controls')\n\n      // Skip radios without aria-controls attributes\n      if (!targetId) {\n        return\n      }\n\n      // Throw if target conditional element does not exist.\n      if (!document.getElementById(targetId)) {\n        throw new ElementError({\n          component: Radios,\n          identifier: `Conditional reveal (\\`id=\"${targetId}\"\\`)`\n        })\n      }\n    })\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event.\n    window.addEventListener('pageshow', () => this.syncAllConditionalReveals())\n\n    // Although we've set up handlers to sync state on the pageshow event, init\n    // could be called after those events have fired, for example if they are\n    // added to the page dynamically, so sync now too.\n    this.syncAllConditionalReveals()\n\n    // Handle events\n    this.$root.addEventListener('click', (event) => this.handleClick(event))\n  }\n\n  /**\n   * Sync the conditional reveal states for all radio buttons in this component.\n   */\n  syncAllConditionalReveals() {\n    this.$inputs.forEach(($input) =>\n      this.syncConditionalRevealWithInputState($input)\n    )\n  }\n\n  /**\n   * Sync conditional reveal with the input state\n   *\n   * Synchronise the visibility of the conditional reveal, and its accessible\n   * state, with the input's checked state.\n   *\n   * @private\n   * @param {HTMLInputElement} $input - Radio input\n   */\n  syncConditionalRevealWithInputState($input) {\n    toggleConditionalInput($input, 'nhsuk-radios__conditional--hidden')\n  }\n\n  /**\n   * Toggle classes and attributes\n   *\n   * @param {MouseEvent} event - Click event\n   */\n  handleClick(event) {\n    const $clickedInput = event.target\n\n    // Ignore clicks on things that aren't radio buttons\n    if (\n      !($clickedInput instanceof HTMLInputElement) ||\n      $clickedInput.type !== 'radio'\n    ) {\n      return\n    }\n\n    // We only need to consider radios with conditional reveals, which will have\n    // aria-controls attributes.\n    const $allInputs = document.querySelectorAll(\n      'input[type=\"radio\"][aria-controls]'\n    )\n\n    const $clickedInputForm = $clickedInput.form\n    const $clickedInputName = $clickedInput.name\n\n    $allInputs.forEach(($input) => {\n      const hasSameFormOwner = $input.form === $clickedInputForm\n      const hasSameName = $input.name === $clickedInputName\n\n      if (hasSameName && hasSameFormOwner) {\n        this.syncConditionalRevealWithInputState($input)\n      }\n    })\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes\n   */\n  static moduleName = 'nhsuk-radios'\n}\n\n/**\n * Initialise radios component\n *\n * @param {object} [options]\n * @param {Element | Document | null} [options.scope] - Scope of the document to search within\n */\nexport function initRadios(options = {}) {\n  const $scope = options.scope ?? document\n  const $radios = $scope.querySelectorAll(\n    `[data-module=\"${Radios.moduleName}\"]`\n  )\n\n  $radios.forEach(($root) => {\n    new Radios($root)\n  })\n}\n","import { setFocus } from '../../common/index.mjs'\nimport { Component } from '../../component.mjs'\nimport { ElementError } from '../../errors/index.mjs'\n\n/**\n * Skip link component\n *\n * When using VoiceOver on iOS, focus remains on the skip link anchor\n * when elected so the next focusable element is not at the jumped to area.\n *\n * @augments Component<HTMLAnchorElement>\n */\nexport class SkipLink extends Component {\n  static elementType = HTMLAnchorElement\n\n  /**\n   * @param {Element | null} [$root] - HTML element to use for component\n   */\n  constructor($root) {\n    super($root)\n\n    const hash = this.$root.hash\n    const href = this.$root.getAttribute('href') ?? ''\n\n    const linkedElementId = hash.replace('#', '')\n    if (!linkedElementId) {\n      throw new ElementError({\n        component: SkipLink,\n        identifier: `Target link (\\`href=\"${href}\"\\`) hash fragment`\n      })\n    }\n\n    const $linkedElement = document.getElementById(linkedElementId)\n\n    // Check for linked element\n    if (!$linkedElement) {\n      throw new ElementError({\n        component: SkipLink,\n        element: $linkedElement,\n        identifier: `Target content (\\`id=\"${linkedElementId}\"\\`)`\n      })\n    }\n\n    /**\n     * Focus the linked element on click\n     *\n     * Adds a helper CSS class to hide native focus styles,\n     * but removes it on blur to restore native focus styles\n     */\n    this.$root.addEventListener('click', () =>\n      setFocus($linkedElement, {\n        onBeforeFocus() {\n          $linkedElement.classList.add('nhsuk-skip-link-focused-element')\n        },\n        onBlur() {\n          $linkedElement.classList.remove('nhsuk-skip-link-focused-element')\n        }\n      })\n    )\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes\n   */\n  static moduleName = 'nhsuk-skip-link'\n}\n\n/**\n * Initialise skip link component\n *\n * @param {object} [options]\n * @param {Element | Document | null} [options.scope] - Scope of the document to search within\n */\nexport function initSkipLinks(options = {}) {\n  const $scope = options.scope ?? document\n  const $skipLinks = $scope.querySelectorAll(\n    `[data-module=\"${SkipLink.moduleName}\"]`\n  )\n\n  $skipLinks.forEach(($root) => {\n    new SkipLink($root)\n  })\n}\n","import { getBreakpoint } from '../../common/index.mjs'\nimport { Component } from '../../component.mjs'\nimport { ElementError } from '../../errors/index.mjs'\n\n/**\n * Tabs component\n */\nexport class Tabs extends Component {\n  jsHiddenClass = 'nhsuk-tabs__panel--hidden'\n  changingHash = false\n\n  /**\n   * @type {MediaQueryList | null}\n   */\n  mql = null\n\n  /**\n   * @param {Element | null} [$root] - HTML element to use for component\n   */\n  constructor($root) {\n    super($root)\n\n    const $tabs = this.$root.querySelectorAll('a.nhsuk-tabs__tab')\n    if (!$tabs.length) {\n      throw new ElementError({\n        component: Tabs,\n        identifier: 'Links (`<a class=\"nhsuk-tabs__tab\">`)'\n      })\n    }\n\n    this.$tabs = $tabs\n\n    // Save bound functions so we can remove event listeners during teardown\n    this.boundTabClick = this.onTabClick.bind(this)\n    this.boundTabKeydown = this.onTabKeydown.bind(this)\n    this.boundOnHashChange = this.onHashChange.bind(this)\n\n    const $tabList = this.$root.querySelector('.nhsuk-tabs__list')\n    const $tabListItems = this.$root.querySelectorAll('.nhsuk-tabs__list-item')\n\n    if (!$tabList) {\n      throw new ElementError({\n        component: Tabs,\n        identifier: 'List (`<ul class=\"nhsuk-tabs__list\">`)'\n      })\n    }\n\n    if (!$tabListItems.length) {\n      throw new ElementError({\n        component: Tabs,\n        identifier: 'List items (`<li class=\"nhsuk-tabs__list-item\">`)'\n      })\n    }\n\n    this.$tabList = $tabList\n    this.$tabListItems = $tabListItems\n\n    this.setupResponsiveChecks()\n  }\n\n  /**\n   * Setup viewport resize check\n   */\n  setupResponsiveChecks() {\n    const breakpoint = getBreakpoint('tablet')\n\n    if (!breakpoint.value) {\n      throw new ElementError({\n        component: Tabs,\n        identifier: `CSS custom property (\\`${breakpoint.property}\\`) on pseudo-class \\`:root\\``\n      })\n    }\n\n    // Media query list for NHS.UK frontend tablet breakpoint\n    this.mql = window.matchMedia(`(min-width: ${breakpoint.value})`)\n\n    // MediaQueryList.addEventListener isn't supported by Safari < 14 so we need\n    // to be able to fall back to the deprecated MediaQueryList.addListener\n    if ('addEventListener' in this.mql) {\n      this.mql.addEventListener('change', () => this.checkMode())\n    } else {\n      // @ts-expect-error Property 'addListener' does not exist\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      this.mql.addListener(() => this.checkMode())\n    }\n\n    this.checkMode()\n  }\n\n  /**\n   * Setup or teardown handler for viewport resize check\n   */\n  checkMode() {\n    if (this.mql?.matches) {\n      this.setup()\n    } else {\n      this.teardown()\n    }\n  }\n\n  /**\n   * Setup tab component\n   */\n  setup() {\n    this.$tabList.setAttribute('role', 'tablist')\n\n    this.$tabListItems.forEach(($item) => {\n      $item.setAttribute('role', 'presentation')\n    })\n\n    this.$tabs.forEach(($tab) => {\n      // Set HTML attributes\n      this.setAttributes($tab)\n\n      // Handle events\n      $tab.addEventListener('click', this.boundTabClick, true)\n      $tab.addEventListener('keydown', this.boundTabKeydown, true)\n\n      // Remove old active panels\n      this.hideTab($tab)\n    })\n\n    // Show either the active tab according to the URL's hash or the first tab\n    const $activeTab = this.getTab(window.location.hash) ?? this.$tabs[0]\n\n    this.showTab($activeTab)\n\n    // Handle hashchange events\n    window.addEventListener('hashchange', this.boundOnHashChange, true)\n  }\n\n  /**\n   * Teardown tab component\n   */\n  teardown() {\n    this.$tabList.removeAttribute('role')\n\n    this.$tabListItems.forEach(($item) => {\n      $item.removeAttribute('role')\n    })\n\n    this.$tabs.forEach(($tab) => {\n      // Remove events\n      $tab.removeEventListener('click', this.boundTabClick, true)\n      $tab.removeEventListener('keydown', this.boundTabKeydown, true)\n\n      // Unset HTML attributes\n      this.unsetAttributes($tab)\n    })\n\n    // Remove hashchange event handler\n    window.removeEventListener('hashchange', this.boundOnHashChange, true)\n  }\n\n  /**\n   * Handle hashchange event\n   */\n  onHashChange() {\n    const { hash } = window.location\n    const $tabWithHash = this.getTab(hash)\n    if (!$tabWithHash) {\n      return\n    }\n\n    // Prevent changing the hash\n    if (this.changingHash) {\n      this.changingHash = false\n      return\n    }\n\n    // Show either the active tab according to the URL's hash or the first tab\n    const $previousTab = this.getCurrentTab()\n    if (!$previousTab) {\n      return\n    }\n\n    this.hideTab($previousTab)\n    this.showTab($tabWithHash)\n    $tabWithHash.focus()\n  }\n\n  /**\n   * Hide panel for tab link\n   *\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  hideTab($tab) {\n    this.unhighlightTab($tab)\n    this.hidePanel($tab)\n  }\n\n  /**\n   * Show panel for tab link\n   *\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  showTab($tab) {\n    this.highlightTab($tab)\n    this.showPanel($tab)\n  }\n\n  /**\n   * Get tab link by hash\n   *\n   * @param {string} hash - Hash fragment including #\n   */\n  getTab(hash) {\n    return this.$root.querySelector(`a.nhsuk-tabs__tab[href=\"${hash}\"]`)\n  }\n\n  /**\n   * Set tab link and panel attributes\n   *\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  setAttributes($tab) {\n    const panelId = $tab.hash.replace('#', '')\n    if (!panelId) {\n      return\n    }\n\n    // set tab attributes\n    $tab.setAttribute('id', `tab_${panelId}`)\n    $tab.setAttribute('role', 'tab')\n    $tab.setAttribute('aria-controls', panelId)\n    $tab.setAttribute('aria-selected', 'false')\n    $tab.setAttribute('tabindex', '-1')\n\n    // set panel attributes\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.setAttribute('role', 'tabpanel')\n    $panel.setAttribute('aria-labelledby', $tab.id)\n    $panel.classList.add(this.jsHiddenClass)\n  }\n\n  /**\n   * Unset tab link and panel attributes\n   *\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  unsetAttributes($tab) {\n    // unset tab attributes\n    $tab.removeAttribute('id')\n    $tab.removeAttribute('role')\n    $tab.removeAttribute('aria-controls')\n    $tab.removeAttribute('aria-selected')\n    $tab.removeAttribute('tabindex')\n\n    // unset panel attributes\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.removeAttribute('role')\n    $panel.removeAttribute('aria-labelledby')\n    $panel.removeAttribute('tabindex')\n    $panel.classList.remove(this.jsHiddenClass)\n  }\n\n  /**\n   * Handle tab link clicks\n   *\n   * @param {MouseEvent} event - Mouse click event\n   */\n  onTabClick(event) {\n    const $currentTab = this.getCurrentTab()\n    const $newTab = event.currentTarget\n\n    if (!$currentTab || !($newTab instanceof HTMLAnchorElement)) {\n      return\n    }\n\n    event.preventDefault()\n\n    this.hideTab($currentTab)\n    this.showTab($newTab)\n    this.createHistoryEntry($newTab)\n  }\n\n  /**\n   * Update browser URL hash fragment for tab\n   *\n   * - Allows back/forward to navigate tabs\n   * - Avoids page jump when hash changes\n   *\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  createHistoryEntry($tab) {\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    // Save and restore the id\n    // so the page doesn't jump when a user clicks a tab (which changes the hash)\n    const panelId = $panel.id\n    $panel.id = ''\n    this.changingHash = true\n    window.location.hash = panelId\n    $panel.id = panelId\n  }\n\n  /**\n   * Handle tab keydown event\n   *\n   * - Press right/down arrow for next tab\n   * - Press left/up arrow for previous tab\n   *\n   * @param {KeyboardEvent} event - Keydown event\n   */\n  onTabKeydown(event) {\n    switch (event.key) {\n      // 'Left', 'Right', 'Up' and 'Down' required for Edge 16 support.\n      case 'ArrowLeft':\n      case 'ArrowUp':\n      case 'Left':\n      case 'Up':\n        this.activatePreviousTab()\n        event.preventDefault()\n        break\n      case 'ArrowRight':\n      case 'ArrowDown':\n      case 'Right':\n      case 'Down':\n        this.activateNextTab()\n        event.preventDefault()\n        break\n    }\n  }\n\n  /**\n   * Activate next tab\n   */\n  activateNextTab() {\n    const $currentTab = this.getCurrentTab()\n    if (!$currentTab?.parentElement) {\n      return\n    }\n\n    const $nextTabListItem = $currentTab.parentElement.nextElementSibling\n    if (!$nextTabListItem) {\n      return\n    }\n\n    const $nextTab = $nextTabListItem.querySelector('a.nhsuk-tabs__tab')\n    if (!$nextTab) {\n      return\n    }\n\n    this.hideTab($currentTab)\n    this.showTab($nextTab)\n    $nextTab.focus()\n    this.createHistoryEntry($nextTab)\n  }\n\n  /**\n   * Activate previous tab\n   */\n  activatePreviousTab() {\n    const $currentTab = this.getCurrentTab()\n    if (!$currentTab?.parentElement) {\n      return\n    }\n\n    const $previousTabListItem =\n      $currentTab.parentElement.previousElementSibling\n    if (!$previousTabListItem) {\n      return\n    }\n\n    const $previousTab = $previousTabListItem.querySelector('a.nhsuk-tabs__tab')\n    if (!$previousTab) {\n      return\n    }\n\n    this.hideTab($currentTab)\n    this.showTab($previousTab)\n    $previousTab.focus()\n    this.createHistoryEntry($previousTab)\n  }\n\n  /**\n   * Get tab panel for tab link\n   *\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  getPanel($tab) {\n    const panelId = $tab.hash.replace('#', '')\n    if (!panelId) {\n      return null\n    }\n\n    return this.$root.querySelector(`#${panelId}`)\n  }\n\n  /**\n   * Show tab panel for tab link\n   *\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  showPanel($tab) {\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.classList.remove(this.jsHiddenClass)\n  }\n\n  /**\n   * Hide tab panel for tab link\n   *\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  hidePanel($tab) {\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.classList.add(this.jsHiddenClass)\n  }\n\n  /**\n   * Unset 'selected' state for tab link\n   *\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  unhighlightTab($tab) {\n    if (!$tab.parentElement) {\n      return\n    }\n\n    $tab.setAttribute('aria-selected', 'false')\n    $tab.parentElement.classList.remove('nhsuk-tabs__list-item--selected')\n    $tab.setAttribute('tabindex', '-1')\n  }\n\n  /**\n   * Set 'selected' state for tab link\n   *\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  highlightTab($tab) {\n    if (!$tab.parentElement) {\n      return\n    }\n\n    $tab.setAttribute('aria-selected', 'true')\n    $tab.parentElement.classList.add('nhsuk-tabs__list-item--selected')\n    $tab.setAttribute('tabindex', '0')\n  }\n\n  /**\n   * Get current tab link\n   */\n  getCurrentTab() {\n    return this.$root.querySelector(\n      '.nhsuk-tabs__list-item--selected a.nhsuk-tabs__tab'\n    )\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes\n   */\n  static moduleName = 'nhsuk-tabs'\n}\n\n/**\n * Initialise tabs component\n *\n * @param {object} [options]\n * @param {Element | Document | null} [options.scope] - Scope of the document to search within\n */\nexport function initTabs(options = {}) {\n  const $scope = options.scope ?? document\n  const $tabs = $scope.querySelectorAll(`[data-module=\"${Tabs.moduleName}\"]`)\n\n  $tabs.forEach(($root) => {\n    new Tabs($root)\n  })\n}\n","import { isSupported } from './common/index.mjs'\nimport {\n  initRadios,\n  initHeader,\n  initButtons,\n  initCharacterCounts,\n  initCheckboxes,\n  initErrorSummary,\n  initNotificationBanners,\n  initSkipLinks,\n  initTabs\n} from './components/index.mjs'\nimport { SupportError } from './errors/index.mjs'\n\n/**\n * Use this function to initialise nhsuk-frontend components within a\n * given scope. This function is called by default with the document\n * element, but you can call it again later with a new DOM element\n * containing nhsuk-frontend components which you wish to initialise.\n *\n * @param {Element | Document | null} [$scope] - Scope of the document to search within\n */\nexport function initAll($scope) {\n  const options = {\n    scope: $scope ?? document\n  }\n\n  // Skip initialisation when NHS.UK frontend is not supported\n  if (!isSupported()) {\n    console.log(new SupportError())\n    return\n  }\n\n  initHeader(options)\n  initSkipLinks(options)\n  initButtons(options)\n  initCharacterCounts(options)\n  initCheckboxes(options)\n  initErrorSummary(options)\n  initNotificationBanners(options)\n  initRadios(options)\n  initTabs(options)\n}\n\nexport { isSupported, version } from './common/index.mjs'\nexport * from './components/index.mjs'\nexport * from './component.mjs'\n"],"names":["version","toggleConditionalInput","$input","className","HTMLInputElement","targetId","getAttribute","target","document","getElementById","setAttribute","checked","toString","classList","toggle","setFocus","$element","options","isFocusable","onBlur","removeEventListener","call","removeAttribute","addEventListener","onFocus","onBeforeFocus","focus","isSupported","$scope","body","contains","formatErrorMessage","Component","message","moduleName","NHSUKFrontendError","Error","constructor","args","super","this","name","SupportError","supportMessage","HTMLScriptElement","prototype","ElementError","component","identifier","element","expectedType","InitError","componentOrMessage","$root","ComponentClass","elementType","checkSupport","checkInitialised","HTMLElement","hasAttribute","Button","debounceFormSubmitTimer","event","handleKeyDown","debounce","key","preventDefault","click","dataset","preventDoubleClick","window","setTimeout","DEBOUNCE_TIMEOUT_IN_SECONDS","initButtons","_options$scope","scope","querySelectorAll","forEach","CharacterCount","_ref","_this$config$maxwords","lastInputTimestamp","lastInputValue","valueChecker","$textarea","querySelector","HTMLTextAreaElement","fallbackLimitMessageId","id","$fallbackLimitMessage","$errorMessage","insertAdjacentElement","$screenReaderCountMessage","createElement","$visibleCountMessage","add","config","Object","assign","defaults","getDataset","maxLength","maxwords","maxlength","Infinity","bindChangeEvents","updateCountMessage","value","entries","Number","count","text","length","_text$match","match","handleKeyUp","handleFocus","handleBlur","checkIfValueChanged","updateVisibleCountMessage","updateScreenReaderCountMessage","isError","isOverThreshold","innerHTML","formattedUpdateMessage","remainingNumber","charVerb","charNoun","displayNumber","Math","abs","_this$config$threshol","currentLength","thresholdPercent","threshold","Date","now","setInterval","clearInterval","initCharacterCounts","freeze","Checkboxes","$inputs","syncAllConditionalReveals","handleClick","syncConditionalRevealWithInputState","unCheckAllInputsExcept","checkboxExclusiveGroup","exclusiveGroup","$inputWithSameName","form","setInputState","unCheckExclusiveInputs","$exclusiveInput","$clickedInput","type","initCheckboxes","ErrorSummary","disableAutoFocus","getAssociatedLegendOrLabel","_document$querySelect","$fieldset","closest","$legends","getElementsByTagName","$candidateLegend","legendTop","getBoundingClientRect","top","inputRect","height","innerHeight","focusTarget","$target","HTMLAnchorElement","inputId","hash","replace","$legendOrLabel","scrollIntoView","preventScroll","initErrorSummary","focusOnPageLoad","Header","$navigation","$navigationList","$navigationItems","$menu","$menuToggle","$menuList","width","breakpoints","updateNavigationTimer","menuIsEnabled","menuIsOpen","HTMLButtonElement","handleEscapeKey","onEscapeKey","bind","handleUpdateNavigation","updateNavigation","handleToggleMenu","toggleMenu","setupNavigation","resetNavigation","right","breakpoint","insertBefore","offsetWidth","push","clearTimeout","setupMenu","parentElement","appendChild","enableMenu","disableMenu","closeMenu","style","removeProperty","openMenu","setProperty","offsetHeight","filter","initHeader","NotificationBanner","Boolean","initNotificationBanners","$notificationBanner","Radios","$allInputs","$clickedInputForm","$clickedInputName","hasSameFormOwner","initRadios","SkipLink","_this$$root$getAttrib","href","linkedElementId","$linkedElement","remove","initSkipLinks","Tabs","jsHiddenClass","changingHash","mql","$tabs","boundTabClick","onTabClick","boundTabKeydown","onTabKeydown","boundOnHashChange","onHashChange","$tabList","$tabListItems","setupResponsiveChecks","property","getComputedStyle","documentElement","getPropertyValue","undefined","getBreakpoint","matchMedia","checkMode","addListener","_this$mql","matches","setup","teardown","_this$getTab","$item","$tab","setAttributes","hideTab","$activeTab","getTab","location","showTab","unsetAttributes","$tabWithHash","$previousTab","getCurrentTab","unhighlightTab","hidePanel","highlightTab","showPanel","panelId","$panel","getPanel","$currentTab","$newTab","currentTarget","createHistoryEntry","activatePreviousTab","activateNextTab","$nextTabListItem","nextElementSibling","$nextTab","$previousTabListItem","previousElementSibling","initTabs","initAll","console","log"],"mappings":"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"}