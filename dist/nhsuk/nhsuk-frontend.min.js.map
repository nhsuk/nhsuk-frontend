{"version":3,"file":"nhsuk-frontend.min.js","sources":["../../src/nhsuk/common/closest-attribute-value.mjs","../../src/nhsuk/common/nhsuk-frontend-version.mjs","../../src/nhsuk/common/index.mjs","../../src/nhsuk/common/configuration/normalise-string.mjs","../../src/nhsuk/common/configuration/extract-config-by-namespace.mjs","../../src/nhsuk/common/configuration/merge-configs.mjs","../../src/nhsuk/errors/index.mjs","../../src/nhsuk/common/configuration/normalise-options.mjs","../../src/nhsuk/component.mjs","../../src/nhsuk/configurable-component.mjs","../../src/nhsuk/common/configuration/normalise-dataset.mjs","../../src/nhsuk/components/button/button.mjs","../../src/nhsuk/components/character-count/character-count.mjs","../../src/nhsuk/components/checkboxes/checkboxes.mjs","../../src/nhsuk/components/error-summary/error-summary.mjs","../../src/nhsuk/components/header/header.mjs","../../src/nhsuk/components/notification-banner/notification-banner.mjs","../../src/nhsuk/components/radios/radios.mjs","../../src/nhsuk/components/skip-link/skip-link.mjs","../../src/nhsuk/components/tabs/tabs.mjs","../../src/nhsuk/i18n.mjs","../../src/nhsuk/index.mjs"],"sourcesContent":["/**\n * Returns the value of the given attribute closest to the given element (including itself)\n *\n * @param {Element} $element - The element to start walking the DOM tree up\n * @param {string} attributeName - The name of the attribute\n * @returns {string | null} Attribute value\n */\nexport function closestAttributeValue($element, attributeName) {\n  const $closestElementWithAttribute = $element.closest(`[${attributeName}]`)\n  return $closestElementWithAttribute\n    ? $closestElementWithAttribute.getAttribute(attributeName)\n    : null\n}\n","/*\n * This variable is automatically overwritten during builds and releases.\n * It doesn't need to be updated manually.\n */\n\n/**\n * NHS.UK frontend release version\n *\n * {@link https://github.com/nhsuk/nhsuk-frontend/releases}\n */\nexport const version = 'development'\n","/**\n * Toggle a toggle a class on conditional content for an input based on checked state\n *\n * @param {Element | null} $input - input element\n * @param {string} className - class to toggle\n */\nexport function toggleConditionalInput($input, className) {\n  if (!$input || !($input instanceof HTMLInputElement) || !className) {\n    return\n  }\n\n  const targetId = $input.getAttribute('aria-controls')\n  if (!targetId) {\n    return\n  }\n\n  const target = document.getElementById(targetId)\n  if (!target) {\n    return\n  }\n\n  $input.setAttribute('aria-expanded', $input.checked.toString())\n  target.classList.toggle(className, !$input.checked)\n}\n\n/**\n * Get NHS.UK frontend breakpoint value from CSS custom property\n *\n * @param {string} name - Breakpoint name\n */\nexport function getBreakpoint(name) {\n  const property = `--nhsuk-breakpoint-${name}`\n\n  // Get value from `<html>` with breakpoints on CSS :root\n  const value = window\n    .getComputedStyle(document.documentElement)\n    .getPropertyValue(property)\n\n  return {\n    property,\n    value: value || undefined\n  }\n}\n\n/**\n * Move focus to element\n *\n * Sets tabindex to -1 to make the element programmatically focusable,\n * but removes it on blur as the element doesn't need to be focused again.\n *\n * Original code taken from GDS (Government Digital Service)\n * {@link https://github.com/alphagov/govuk-frontend}\n *\n * @template {HTMLElement} FocusElement\n * @param {FocusElement} $element - HTML element\n * @param {object} [options] - Handler options\n * @param {function(this: FocusElement): void} [options.onBeforeFocus] - Callback before focus\n * @param {function(this: FocusElement): void} [options.onBlur] - Callback on blur\n */\nexport function setFocus($element, options = {}) {\n  const isFocusable = $element.getAttribute('tabindex')\n\n  if (!isFocusable) {\n    $element.setAttribute('tabindex', '-1')\n  }\n\n  /**\n   * Handle element focus\n   */\n  function onFocus() {\n    $element.removeEventListener('focus', onFocus)\n    $element.addEventListener('blur', onBlur)\n  }\n\n  /**\n   * Handle element blur\n   */\n  function onBlur() {\n    $element.removeEventListener('blur', onBlur)\n\n    if (options.onBlur) {\n      options.onBlur.call($element)\n    }\n\n    if (!isFocusable) {\n      $element.removeAttribute('tabindex')\n    }\n  }\n\n  // Add listener to reset element on blur, after focus\n  $element.addEventListener('focus', onFocus)\n\n  // Focus element\n  if (options.onBeforeFocus) {\n    options.onBeforeFocus.call($element)\n  }\n\n  $element.focus()\n}\n\n/**\n * Checks if component is already initialised\n *\n * @param {Element} $root - HTML element to be checked\n * @param {string} moduleName - name of component module\n * @returns {boolean} Whether component is already initialised\n */\nexport function isInitialised($root, moduleName) {\n  return (\n    $root instanceof HTMLElement &&\n    $root.hasAttribute(`data-${moduleName}-init`)\n  )\n}\n\n/**\n * Checks if NHS.UK frontend is supported on this page\n *\n * Some browsers will load and run our JavaScript but NHS.UK frontend\n * won't be supported.\n *\n * @param {HTMLElement | null} [$scope] - (internal) `<body>` HTML element checked for browser support\n * @returns {boolean} Whether NHS.UK frontend is supported on this page\n */\nexport function isSupported($scope = document.body) {\n  if (!$scope) {\n    return false\n  }\n\n  return $scope.classList.contains('nhsuk-frontend-supported')\n}\n\n/**\n * Check for an object\n *\n * @template {Partial<Record<keyof ObjectType, unknown>>} ObjectType\n * @param {unknown | ObjectType} option - Option to check\n * @returns {option is ObjectType} Whether the option is an object\n */\nexport function isObject(option) {\n  return !!option && typeof option === 'object' && !Array.isArray(option)\n}\n\n/**\n * Check for valid scope\n *\n * @template {Element | Document} ScopeType\n * @param {unknown | ScopeType} $scope - Scope of the document to search within\n * @returns {$scope is ScopeType} Whether the scope can be queried\n */\nexport function isScope($scope) {\n  return !!$scope && ($scope instanceof Element || $scope instanceof Document)\n}\n\n/**\n * Format error message\n *\n * @param {CompatibleClass} Component - Component that threw the error\n * @param {string} message - Error message\n * @returns {string} - Formatted error message\n */\nexport function formatErrorMessage(Component, message) {\n  return `${Component.moduleName}: ${message}`\n}\n\nexport * from './closest-attribute-value.mjs'\nexport * from './nhsuk-frontend-version.mjs'\n\n/**\n * @import { CompatibleClass } from '../component.mjs'\n */\n","/**\n * Normalise string\n *\n * 'If it looks like a duck, and it quacks like a duckâ€¦' ðŸ¦†\n *\n * If the passed value looks like a boolean or a number, convert it to a boolean\n * or number.\n *\n * Designed to be used to convert config passed via data attributes (which are\n * always strings) into something sensible.\n *\n * @param {string | undefined} value - The value to normalise\n * @param {SchemaProperty} [property] - Component schema property\n * @returns Normalised data\n */\nexport function normaliseString(value, property) {\n  const trimmedValue = value ? value.trim() : ''\n\n  let output\n  let outputType = property?.type\n\n  // No schema type set? Determine automatically\n  if (!outputType) {\n    if (['true', 'false'].includes(trimmedValue)) {\n      outputType = 'boolean'\n    }\n\n    // Empty / whitespace-only strings are considered finite so we need to check\n    // the length of the trimmed string as well\n    if (trimmedValue.length > 0 && isFinite(Number(trimmedValue))) {\n      outputType = 'number'\n    }\n  }\n\n  switch (outputType) {\n    case 'boolean':\n      output = trimmedValue === 'true'\n      break\n\n    case 'number':\n      output = Number(trimmedValue)\n      break\n\n    default:\n      output = value\n  }\n\n  return output\n}\n\n/**\n * @import { SchemaProperty } from './index.mjs'\n */\n","import { isObject } from '../index.mjs'\n\nimport { normaliseString } from './normalise-string.mjs'\n\n/**\n * Extracts keys starting with a particular namespace from dataset ('data-*')\n * object, removing the namespace in the process, normalising all values\n *\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} ConfigurationType\n * @param {Schema<ConfigurationType>} schema - The schema of a component\n * @param {DOMStringMap} dataset - The object to extract key-value pairs from\n * @param {keyof ConfigurationType} namespace - The namespace to filter keys with\n * @returns {ObjectNested | undefined} Nested object with dot-separated key namespace removed\n */\nexport function extractConfigByNamespace(schema, dataset, namespace) {\n  const property = schema.properties[namespace]\n\n  // Only extract configs for object schema properties\n  if (property?.type !== 'object') {\n    return\n  }\n\n  // Add default empty config\n  const newObject = /** @type {Record<typeof namespace, ObjectNested>} */ ({\n    [namespace]: {}\n  })\n\n  for (const [key, value] of Object.entries(dataset)) {\n    /** @type {ObjectNested | ObjectNested[NestedKey]} */\n    let current = newObject\n\n    // Split the key into parts, using . as our namespace separator\n    const keyParts = key.split('.')\n\n    /**\n     * Create new level per part\n     *\n     * e.g. 'i18n.textareaDescription.other' becomes\n     * `{ i18n: { textareaDescription: { other } } }`\n     */\n    for (const [index, name] of keyParts.entries()) {\n      if (isObject(current)) {\n        // Drop down to nested object until the last part\n        if (index < keyParts.length - 1) {\n          // New nested object (optionally) replaces existing value\n          if (!isObject(current[name])) {\n            current[name] = {}\n          }\n\n          // Drop down into new or existing nested object\n          current = current[name]\n        } else if (key !== namespace) {\n          // Normalised value (optionally) replaces existing value\n          current[name] = normaliseString(value)\n        }\n      }\n    }\n  }\n\n  return newObject[namespace]\n}\n\n/**\n * Schema for component config\n *\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} ConfigurationType\n * @typedef {object} Schema\n * @property {Record<keyof ConfigurationType, SchemaProperty | undefined>} properties - Schema properties\n */\n\n/**\n * Schema property for component config\n *\n * @typedef {object} SchemaProperty\n * @property {'string' | 'boolean' | 'number' | 'object'} type - Property type\n */\n\n/**\n * @typedef {keyof ObjectNested} NestedKey\n * @typedef {{ [key: string]: string | boolean | number | ObjectNested | undefined }} ObjectNested\n */\n","import { isObject } from '../index.mjs'\n\n/**\n * Config merging function\n *\n * Takes any number of objects and combines them together, with\n * greatest priority on the LAST item passed in.\n *\n * @param {...{ [key: string]: unknown }} configObjects - Config objects to merge\n * @returns A merged config object\n */\nexport function mergeConfigs(...configObjects) {\n  // Start with an empty object as our base\n  /** @type {{ [key: string]: unknown }} */\n  const formattedConfigObject = {}\n\n  // Loop through each of the passed objects\n  for (const configObject of configObjects) {\n    for (const key of Object.keys(configObject)) {\n      const option = formattedConfigObject[key]\n      const override = configObject[key]\n\n      // Push their keys one-by-one into formattedConfigObject. Any duplicate\n      // keys with object values will be merged, otherwise the new value will\n      // override the existing value.\n      if (isObject(option) && isObject(override)) {\n        formattedConfigObject[key] = mergeConfigs(option, override)\n      } else {\n        // Apply override\n        formattedConfigObject[key] = override\n      }\n    }\n  }\n\n  return formattedConfigObject\n}\n","import { formatErrorMessage } from '../common/index.mjs'\n\n/**\n * NHS.UK frontend error\n *\n * A base class for `Error`s thrown by NHS.UK frontend.\n *\n * It is meant to be extended into specific types of errors\n * to be thrown by our code.\n *\n * @example\n * ```js\n * class MissingRootError extends NHSUKFrontendError {\n *   // Setting an explicit name is important as extending the class will not\n *   // set a new `name` on the subclass. The `name` property is important\n *   // to ensure intelligible error names even if the class name gets\n *   // mangled by a minifier\n *   name = \"MissingRootError\"\n * }\n * ```\n * @abstract\n */\nexport class NHSUKFrontendError extends Error {\n  name = 'NHSUKFrontendError'\n}\n\n/**\n * Indicates that NHS.UK frontend is not supported\n */\nexport class SupportError extends NHSUKFrontendError {\n  name = 'SupportError'\n\n  /**\n   * Checks if NHS.UK frontend is supported on this page\n   *\n   * @param {HTMLElement | null} [$scope] - HTML element `<body>` checked for browser support\n   */\n  constructor($scope = document.body) {\n    const supportMessage =\n      'noModule' in HTMLScriptElement.prototype\n        ? 'NHS.UK frontend initialised without `<body class=\"nhsuk-frontend-supported\">` from template `<script>` snippet'\n        : 'NHS.UK frontend is not supported in this browser'\n\n    super(\n      $scope\n        ? supportMessage\n        : 'NHS.UK frontend initialised without `<script type=\"module\">`'\n    )\n  }\n}\n\n/**\n * Indicates that a component has received an illegal configuration\n */\nexport class ConfigError extends NHSUKFrontendError {\n  name = 'ConfigError'\n}\n\n/**\n * Indicates an issue with an element (possibly `null` or `undefined`)\n */\nexport class ElementError extends NHSUKFrontendError {\n  name = 'ElementError'\n\n  /**\n   * @param {ElementErrorOptions} options - Element error options\n   */\n  constructor(options) {\n    const { component, identifier, element, expectedType } = options\n\n    let message = identifier\n\n    // Append reason\n    message += element\n      ? ` is not of type ${expectedType ?? 'HTMLElement'}`\n      : ' not found'\n\n    // Prepend with module name (optional)\n    if (component) {\n      message = formatErrorMessage(component, message)\n    }\n\n    super(message)\n  }\n}\n\n/**\n * Indicates that a component is already initialised\n */\nexport class InitError extends NHSUKFrontendError {\n  name = 'InitError'\n\n  /**\n   * @param {CompatibleClass | string} componentOrMessage - Component or init error message\n   */\n  constructor(componentOrMessage) {\n    const message =\n      typeof componentOrMessage === 'string'\n        ? componentOrMessage\n        : formatErrorMessage(\n            componentOrMessage,\n            'Root element (`$root`) already initialised'\n          )\n\n    super(message)\n  }\n}\n\n/**\n * Element error options\n *\n * @typedef {object} ElementErrorOptions\n * @property {Element | Document | null} [element] - The element in error (optional)\n * @property {CompatibleClass} [component] - Component throwing the error (optional)\n * @property {string} identifier - An identifier that'll let the user understand which element has an error. This is whatever makes the most sense\n * @property {string} [expectedType] - The type that was expected for the identifier\n */\n\n/**\n * @import { CompatibleClass } from '../component.mjs'\n */\n","import { isObject, isScope } from '../index.mjs'\n\n/**\n * Normalise options passed to `initAll` or `createAll`\n *\n * @template {CompatibleClass} ComponentClass\n * @param {Config | CreateAllOptions<ComponentClass> | OnErrorCallback<ComponentClass> | Element | Document | null} [scopeOrOptions] - Scope of the document to search within, initialisation options or error callback function\n * @returns {CreateAllOptions<ComponentClass>} Normalised options\n */\nexport function normaliseOptions(scopeOrOptions) {\n  let /** @type {Element | Document | null} */ $scope = document\n  let /** @type {OnErrorCallback<ComponentClass> | undefined} */ onError\n\n  // Handle options object\n  if (isObject(scopeOrOptions)) {\n    const options = scopeOrOptions\n\n    // Scope must be valid or null\n    if (isScope(options.scope) || options.scope === null) {\n      $scope = options.scope\n    }\n\n    // Error handler must be a function\n    if (typeof options.onError === 'function') {\n      onError = options.onError\n    }\n  }\n\n  if (isScope(scopeOrOptions)) {\n    $scope = scopeOrOptions\n  } else if (scopeOrOptions === null) {\n    $scope = null\n  } else if (typeof scopeOrOptions === 'function') {\n    onError = scopeOrOptions\n  }\n\n  return {\n    scope: $scope,\n    onError\n  }\n}\n\n/**\n * @import { CompatibleClass } from '../../component.mjs'\n * @import { Config, CreateAllOptions, OnErrorCallback } from '../../index.mjs'\n */\n","import { isInitialised, isSupported } from './common/index.mjs'\nimport { ElementError, InitError, SupportError } from './errors/index.mjs'\n\n/**\n * Base component class\n *\n * Centralises the behaviours shared by our components\n *\n * @abstract\n * @template {Element} [RootElementType=HTMLElement]\n */\nexport class Component {\n  /**\n   * @type {typeof Element}\n   */\n  static elementType = HTMLElement\n\n  /**\n   * @type {RootElementType}\n   */\n  $root\n\n  /**\n   * Constructs a new component, validating that NHS.UK frontend is supported\n   *\n   * @param {Element | null} $root - HTML element to use for component\n   */\n  constructor($root) {\n    const childConstructor = /** @type {ComponentConstructor} */ (\n      this.constructor\n    )\n\n    if (!$root || !($root instanceof childConstructor.elementType)) {\n      throw new ElementError({\n        element: $root,\n        component: childConstructor,\n        identifier: 'Root element (`$root`)',\n        expectedType: childConstructor.elementType.name\n      })\n    }\n\n    this.$root = /** @type {RootElementType} */ ($root)\n\n    childConstructor.checkSupport()\n\n    this.checkInitialised()\n\n    const { moduleName } = childConstructor\n    this.$root.setAttribute(`data-${moduleName}-init`, '')\n  }\n\n  /**\n   * Validates whether component is already initialised\n   *\n   * @throws {InitError} when component is already initialised\n   */\n  checkInitialised() {\n    const childConstructor = /** @type {ComponentConstructor} */ (\n      this.constructor\n    )\n\n    if (isInitialised(this.$root, childConstructor.moduleName)) {\n      throw new InitError(childConstructor)\n    }\n  }\n\n  /**\n   * Validates whether components are supported\n   *\n   * @throws {SupportError} when the components are not supported\n   */\n  static checkSupport() {\n    if (!isSupported()) {\n      throw new SupportError()\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes\n   */\n  static moduleName = 'nhsuk-component'\n}\n\n/* eslint-disable jsdoc/valid-types --\n * `{new(...args: any[] ): any}` is not recognised as valid\n * https://github.com/gajus/eslint-plugin-jsdoc/issues/145#issuecomment-1308722878\n * https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/issues/131\n **/\n\n/**\n * Component compatible class\n *\n * @template {typeof Component | typeof ConfigurableComponent} [ComponentType=typeof Component]\n * @typedef {{\n *   new(...args: ConstructorParameters<ComponentType>): InstanceType<ComponentType>,\n *   defaults?: ObjectNested,\n *   moduleName: string\n * }} CompatibleClass\n */\n\n/* eslint-enable jsdoc/valid-types */\n\n/**\n * Component constructor\n *\n * @template {typeof Component | typeof ConfigurableComponent} [ComponentType=typeof Component]\n * @typedef {CompatibleClass & ComponentType} ComponentConstructor\n */\n\n/**\n * Component initialisation options\n *\n * @typedef {object} InitOptions\n * @property {Element | Document | null} [scope] - Scope of the document to search within\n */\n\n/**\n * @import { ObjectNested } from './common/configuration/index.mjs'\n * @import { ConfigurableComponent } from './configurable-component.mjs'\n */\n","import {\n  mergeConfigs,\n  normaliseDataset\n} from './common/configuration/index.mjs'\nimport { formatErrorMessage, isObject } from './common/index.mjs'\nimport { Component } from './component.mjs'\nimport { ConfigError } from './errors/index.mjs'\n\n/**\n * Configurable base component class\n *\n * @abstract\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} [ConfigurationType=ObjectNested]\n * @template {HTMLElement} [RootElementType=HTMLElement]\n * @augments Component<RootElementType>\n */\nexport class ConfigurableComponent extends Component {\n  /**\n   * @type {ConfigurationType}\n   */\n  config\n\n  /**\n   * Constructs a new component, validating that NHS.UK frontend is supported\n   *\n   * @param {Element | null} $root - HTML element to use for component\n   * @param {ConfigurationType} [config] - HTML element to use for component\n   */\n  constructor($root, config) {\n    super($root)\n\n    const childConstructor =\n      /** @type {ComponentConstructor<typeof ConfigurableComponent>} */ (\n        this.constructor\n      )\n\n    if (!isObject(childConstructor.defaults)) {\n      throw new ConfigError(\n        formatErrorMessage(\n          childConstructor,\n          'Config passed as parameter into constructor but no defaults defined'\n        )\n      )\n    }\n\n    const datasetConfig = /** @type {ConfigurationType} */ (\n      normaliseDataset(childConstructor, this.$root.dataset)\n    )\n\n    // Override defaults with JavaScript config\n    this.config = /** @type {ConfigurationType} */ (\n      mergeConfigs(childConstructor.defaults, config ?? {})\n    )\n\n    // Override merged config with dataset config\n    this.config = /** @type {ConfigurationType} */ (\n      mergeConfigs(\n        this.config,\n        this.configOverride(datasetConfig),\n        datasetConfig\n      )\n    )\n  }\n\n  /**\n   * Config override\n   *\n   * It should take a subset of configuration as input and return\n   * a new configuration object with properties that should be\n   * overridden based on the root element's dataset\n   *\n   * @abstract\n   * @param {Partial<ConfigurationType>} _datasetConfig - Config specified by dataset\n   * @returns {Partial<ConfigurationType>} Config to override by dataset\n   */\n  configOverride(_datasetConfig = {}) {\n    return {}\n  }\n}\n\n/**\n * @import { ObjectNested } from './common/configuration/index.mjs'\n * @import { ComponentConstructor } from './component.mjs'\n */\n","import { ConfigError } from '../../errors/index.mjs'\nimport { formatErrorMessage, isObject } from '../index.mjs'\n\nimport { extractConfigByNamespace } from './extract-config-by-namespace.mjs'\nimport { normaliseString } from './normalise-string.mjs'\n\n/**\n * Normalise dataset\n *\n * Loop over an object and normalise each value using {@link normaliseString},\n * optionally expanding `data-i18n.property` nested values\n *\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} ConfigurationType\n * @template {[keyof ConfigurationType, SchemaProperty | undefined][]} SchemaEntryType\n * @param {CompatibleClass & { schema?: Schema<ConfigurationType> }} Component - Component class\n * @param {DOMStringMap} dataset - HTML element dataset\n * @returns {ObjectNested} Normalised dataset\n */\nexport function normaliseDataset(Component, dataset) {\n  if (!isObject(Component.schema)) {\n    throw new ConfigError(\n      formatErrorMessage(\n        Component,\n        'Config passed as parameter into constructor but no schema defined'\n      )\n    )\n  }\n\n  const out = /** @type {ObjectNested} */ ({})\n  const entries = /** @type {SchemaEntryType} */ (\n    Object.entries(Component.schema.properties)\n  )\n\n  // Normalise top-level dataset ('data-*') values using schema types\n  for (const entry of entries) {\n    const [namespace, property] = entry\n\n    // Cast the `namespace` to string so it can be used to access the dataset\n    const field = namespace.toString()\n\n    if (field in dataset) {\n      out[field] = normaliseString(dataset[field], property)\n    }\n\n    /**\n     * Extract and normalise nested object values automatically using\n     * {@link normaliseString} but only schema object types are allowed\n     */\n    if (property?.type === 'object') {\n      out[field] = extractConfigByNamespace(\n        Component.schema,\n        dataset,\n        namespace\n      )\n    }\n  }\n\n  return out\n}\n\n/**\n * @import { CompatibleClass } from '../../component.mjs'\n * @import { ObjectNested, Schema, SchemaProperty } from './index.mjs'\n */\n","import { normaliseOptions } from '../../common/configuration/index.mjs'\nimport { ConfigurableComponent } from '../../configurable-component.mjs'\n\nconst DEBOUNCE_TIMEOUT_IN_SECONDS = 1\n\n/**\n * Button component\n *\n * @augments ConfigurableComponent<ButtonConfig>\n */\nexport class Button extends ConfigurableComponent {\n  /**\n   * @type {number | null}\n   */\n  debounceFormSubmitTimer = null\n\n  /**\n   * @param {Element | null} $root - HTML element to use for component\n   * @param {ButtonConfig} [config] - Button config\n   */\n  constructor($root, config = {}) {\n    super($root, config)\n\n    /**\n     * Initialise an event listener for keydown at document level\n     * this will help listening for later inserted elements with a role=\"button\"\n     */\n    this.$root.addEventListener('keydown', (event) => this.handleKeyDown(event))\n    this.$root.addEventListener('click', (event) => this.debounce(event))\n  }\n\n  /**\n   * JavaScript 'shim' to trigger the click event of element(s) when the space key is pressed.\n   *\n   * Created since some Assistive Technologies (for example some Screenreaders)\n   * will tell a user to press space on a 'button', so this functionality needs to be shimmed\n   * See https://github.com/alphagov/govuk_elements/pull/272#issuecomment-233028270\n   *\n   * @param {KeyboardEvent} event - Keydown event\n   */\n  handleKeyDown(event) {\n    const target = event.target\n\n    // Handle space bar only\n    if (event.key !== ' ') {\n      return\n    }\n\n    // Handle elements with [role=\"button\"] only\n    if (\n      target instanceof HTMLElement &&\n      target.getAttribute('role') === 'button'\n    ) {\n      event.preventDefault()\n      target.click()\n    }\n  }\n\n  /**\n   * Debounce double-clicks\n   *\n   * If the click quickly succeeds a previous click then nothing will happen.\n   * This stops people accidentally causing multiple form submissions by\n   * double clicking buttons.\n   *\n   * @param {MouseEvent} event - Mouse click event\n   * @returns {undefined | false} Returns undefined, or false when debounced\n   */\n  debounce(event) {\n    // Check the button that was clicked has preventDoubleClick enabled\n    if (!this.config.preventDoubleClick) {\n      return\n    }\n\n    // If the timer is still running then we want to prevent the click from submitting the form\n    if (this.debounceFormSubmitTimer) {\n      event.preventDefault()\n      return false\n    }\n\n    this.debounceFormSubmitTimer = window.setTimeout(() => {\n      this.debounceFormSubmitTimer = null\n    }, DEBOUNCE_TIMEOUT_IN_SECONDS * 1000)\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes\n   */\n  static moduleName = 'nhsuk-button'\n\n  /**\n   * Button default config\n   *\n   * @see {@link ButtonConfig}\n   * @constant\n   * @type {ButtonConfig}\n   */\n  static defaults = Object.freeze({\n    preventDoubleClick: false\n  })\n\n  /**\n   * Button config schema\n   *\n   * @constant\n   * @satisfies {Schema<ButtonConfig>}\n   */\n  static schema = Object.freeze({\n    properties: {\n      preventDoubleClick: { type: 'boolean' }\n    }\n  })\n}\n\n/**\n * Initialise button component\n *\n * @deprecated Use {@link createAll | `createAll(Button, options)`} instead.\n * @param {InitOptions & ButtonConfig} [options]\n */\nexport function initButtons(options) {\n  const { scope: $scope } = normaliseOptions(options)\n\n  const $buttons = $scope?.querySelectorAll(\n    `[data-module=\"${Button.moduleName}\"]`\n  )\n\n  $buttons?.forEach(($root) => {\n    new Button($root, options)\n  })\n}\n\n/**\n * Button config\n *\n * @typedef {object} ButtonConfig\n * @property {boolean} [preventDoubleClick=false] - Prevent accidental double\n *   clicks on submit buttons from submitting forms multiple times.\n */\n\n/**\n * @import { createAll, InitOptions } from '../../index.mjs'\n * @import { Schema } from '../../common/configuration/index.mjs'\n */\n","import { normaliseOptions } from '../../common/configuration/index.mjs'\nimport { ConfigurableComponent } from '../../configurable-component.mjs'\nimport { ElementError } from '../../errors/index.mjs'\n\n/**\n * Character count component\n *\n * @augments ConfigurableComponent<CharacterCountConfig>\n */\nexport class CharacterCount extends ConfigurableComponent {\n  /**\n   * @type {number | null}\n   */\n  lastInputTimestamp = null\n  lastInputValue = ''\n\n  /**\n   * @type {number | null}\n   */\n  valueChecker = null\n\n  /**\n   * @param {Element | null} $root - HTML element to use for component\n   * @param {Record<string, never>} [config] - Not yet supported. Character count config\n   */\n  constructor($root, config = {}) {\n    super($root, config)\n\n    const $textarea = this.$root.querySelector('.nhsuk-js-character-count')\n    if (\n      !$textarea ||\n      !(\n        $textarea instanceof HTMLTextAreaElement ||\n        $textarea instanceof HTMLInputElement\n      )\n    ) {\n      throw new ElementError({\n        component: CharacterCount,\n        element: $textarea,\n        expectedType: 'HTMLTextareaElement or HTMLInputElement',\n        identifier: 'Form field (`.nhsuk-js-character-count`)'\n      })\n    }\n\n    this.$textarea = $textarea\n\n    const fallbackLimitMessageId = `${this.$textarea.id}-info`\n    const $fallbackLimitMessage = document.getElementById(\n      fallbackLimitMessageId\n    )\n\n    if (!$fallbackLimitMessage) {\n      throw new ElementError({\n        component: CharacterCount,\n        element: $fallbackLimitMessage,\n        identifier: `Count message (\\`id=\"${fallbackLimitMessageId}\"\\`)`\n      })\n    }\n\n    // Pre-existing validation error rendered from server\n    this.$errorMessage = this.$root.querySelector('.nhsuk-error-message')\n\n    // Move the fallback count message to be immediately after the textarea\n    // Kept for backwards compatibility\n    this.$textarea.insertAdjacentElement('afterend', $fallbackLimitMessage)\n\n    // Create the *screen reader* specific live-updating counter\n    // This doesn't need any styling classes, as it is never visible\n    const $screenReaderCountMessage = document.createElement('div')\n    $screenReaderCountMessage.className =\n      'nhsuk-character-count__sr-status nhsuk-u-visually-hidden'\n    $screenReaderCountMessage.setAttribute('aria-live', 'polite')\n    this.$screenReaderCountMessage = $screenReaderCountMessage\n    $fallbackLimitMessage.insertAdjacentElement(\n      'afterend',\n      $screenReaderCountMessage\n    )\n\n    // Create our live-updating counter element, copying the classes from the\n    // fallback element for backwards compatibility as these may have been configured\n    const $visibleCountMessage = document.createElement('div')\n    $visibleCountMessage.className = $fallbackLimitMessage.className\n    $visibleCountMessage.classList.add('nhsuk-character-count__status')\n    $visibleCountMessage.setAttribute('aria-hidden', 'true')\n    this.$visibleCountMessage = $visibleCountMessage\n    $fallbackLimitMessage.insertAdjacentElement(\n      'afterend',\n      $visibleCountMessage\n    )\n\n    // Hide the fallback limit message\n    $fallbackLimitMessage.classList.add('nhsuk-u-visually-hidden')\n\n    // Determine the limit attribute (characters or words)\n    this.maxLength = this.config.maxwords ?? this.config.maxlength ?? Infinity\n\n    // Remove hard limit if set\n    this.$textarea.removeAttribute('maxlength')\n\n    this.bindChangeEvents()\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event.\n    window.addEventListener('pageshow', () => this.updateCountMessage())\n\n    // Although we've set up handlers to sync state on the pageshow event, init\n    // could be called after those events have fired, for example if they are\n    // added to the page dynamically, so update now too.\n    this.updateCountMessage()\n  }\n\n  /**\n   * Counts characters or words in text\n   *\n   * @param {string} text\n   */\n  count(text) {\n    let length\n    if (this.config.maxwords) {\n      const tokens = text.match(/\\S+/g) ?? [] // Matches consecutive non-whitespace chars\n      length = tokens.length\n    } else {\n      length = text.length\n    }\n    return length\n  }\n\n  /**\n   * Bind input propertychange to the elements and update based on the change\n   */\n  bindChangeEvents() {\n    this.$textarea.addEventListener('keyup', () => this.handleKeyUp())\n\n    // Bind focus/blur events to start/stop polling\n    this.$textarea.addEventListener('focus', () => this.handleFocus())\n    this.$textarea.addEventListener('blur', () => this.handleBlur())\n  }\n\n  /**\n   * Speech recognition software such as Dragon NaturallySpeaking will modify the\n   * fields by directly changing its `value`. These changes don't trigger events\n   * in JavaScript, so we need to poll to handle when and if they occur\n   */\n  checkIfValueChanged() {\n    if (this.$textarea.value !== this.lastInputValue) {\n      this.lastInputValue = this.$textarea.value\n      this.updateCountMessage()\n    }\n  }\n\n  /**\n   * Helper function to update both the visible and screen reader-specific\n   * counters simultaneously (e.g. on init)\n   */\n  updateCountMessage() {\n    this.updateVisibleCountMessage()\n    this.updateScreenReaderCountMessage()\n  }\n\n  /**\n   * Update visible counter\n   */\n  updateVisibleCountMessage() {\n    const remainingNumber = this.maxLength - this.count(this.$textarea.value)\n    const isError = remainingNumber < 0\n\n    // If input is over the threshold, remove the disabled class which renders the\n    // counter invisible.\n    this.$visibleCountMessage.classList.toggle(\n      'nhsuk-character-count__message--disabled',\n      !this.isOverThreshold()\n    )\n\n    // Update styles\n    if (!this.$errorMessage) {\n      // Only toggle the textarea error class if there isn't an error message\n      // already, as it may be unrelated to the limit (eg: allowed characters)\n      // and would set the border colour back to black.\n      this.$textarea.classList.toggle('nhsuk-textarea--error', isError)\n    }\n    this.$visibleCountMessage.classList.toggle('nhsuk-error-message', isError)\n    this.$visibleCountMessage.classList.toggle('nhsuk-hint', !isError)\n\n    // Update message\n    this.$visibleCountMessage.innerHTML = this.formattedUpdateMessage()\n  }\n\n  /**\n   * Update screen reader-specific counter\n   */\n  updateScreenReaderCountMessage() {\n    // If over the threshold, remove the aria-hidden attribute, allowing screen\n    // readers to announce the content of the element.\n    if (this.isOverThreshold()) {\n      this.$screenReaderCountMessage.removeAttribute('aria-hidden')\n    } else {\n      this.$screenReaderCountMessage.setAttribute('aria-hidden', 'true')\n    }\n\n    // Update message\n    this.$screenReaderCountMessage.innerHTML = this.formattedUpdateMessage()\n  }\n\n  /**\n   * Format update message\n   */\n  formattedUpdateMessage() {\n    const remainingNumber = this.maxLength - this.count(this.$textarea.value)\n\n    let charVerb = 'remaining'\n    let charNoun = 'character'\n    let displayNumber = remainingNumber\n    if (this.config.maxwords) {\n      charNoun = 'word'\n    }\n    charNoun += remainingNumber === -1 || remainingNumber === 1 ? '' : 's'\n\n    charVerb = remainingNumber < 0 ? 'too many' : 'remaining'\n    displayNumber = Math.abs(remainingNumber)\n\n    return `You have ${displayNumber} ${charNoun} ${charVerb}`\n  }\n\n  /**\n   * Check if count is over threshold\n   *\n   * Checks whether the value is over the configured threshold for the input.\n   * If there is no configured threshold, it is set to 0 and this function will\n   * always return true\n   */\n  isOverThreshold() {\n    // Determine the remaining number of characters/words\n    const currentLength = this.count(this.$textarea.value)\n\n    // Set threshold if presented in config\n    const thresholdPercent = this.config.threshold ?? 0\n    const thresholdValue = (this.maxLength * thresholdPercent) / 100\n\n    return thresholdValue <= currentLength\n  }\n\n  /**\n   * Handle key up event\n   *\n   * Update the visible character counter and keep track of when the last update\n   * happened for each keypress\n   */\n  handleKeyUp() {\n    this.updateVisibleCountMessage()\n    this.lastInputTimestamp = Date.now()\n  }\n\n  /**\n   * Handle focus event\n   */\n  handleFocus() {\n    // If the field is focused, and a keyup event hasn't been detected for at\n    // least 1000 ms (1 second), then run the manual change check.\n    // This is so that the update triggered by the manual comparison doesn't\n    // conflict with debounced KeyboardEvent updates.\n    this.valueChecker = window.setInterval(() => {\n      if (\n        !this.lastInputTimestamp ||\n        Date.now() - 500 >= this.lastInputTimestamp\n      ) {\n        this.checkIfValueChanged()\n      }\n    }, 1000)\n  }\n\n  /**\n   * Handle blur event\n   *\n   * Stop checking the textarea value once the textarea no longer has focus\n   */\n  handleBlur() {\n    // Cancel value checking on blur\n    if (this.valueChecker) {\n      window.clearInterval(this.valueChecker)\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes\n   */\n  static moduleName = 'nhsuk-character-count'\n\n  /**\n   * Character count default config\n   *\n   * @see {@link CharacterCountConfig}\n   * @constant\n   * @type {CharacterCountConfig}\n   */\n  static defaults = Object.freeze({\n    threshold: 0\n  })\n\n  /**\n   * Character config schema\n   *\n   * @constant\n   * @satisfies {Schema<CharacterCountConfig>}\n   */\n  static schema = Object.freeze({\n    properties: {\n      maxwords: { type: 'number' },\n      maxlength: { type: 'number' },\n      threshold: { type: 'number' }\n    }\n  })\n}\n\n/**\n * Initialise character count component\n *\n * @deprecated Use {@link createAll | `createAll(CharacterCount)`} instead.\n * @param {InitOptions} [options]\n */\nexport function initCharacterCounts(options) {\n  const { scope: $scope } = normaliseOptions(options)\n\n  const $characterCounts = $scope?.querySelectorAll(\n    `[data-module=\"${CharacterCount.moduleName}\"]`\n  )\n\n  $characterCounts?.forEach(($root) => {\n    new CharacterCount($root)\n  })\n}\n\n/**\n * Character count config\n *\n * @see {@link CharacterCount.defaults}\n * @typedef {object} CharacterCountConfig\n * @property {number} [maxlength] - The maximum number of characters.\n *   If maxwords is provided, the maxlength option will be ignored.\n * @property {number} [maxwords] - The maximum number of words. If maxwords is\n *   provided, the maxlength option will be ignored.\n * @property {number} [threshold=0] - The percentage value of the limit at\n *   which point the count message is displayed. If this attribute is set, the\n *   count message will be hidden by default.\n */\n\n/**\n * @import { createAll, InitOptions } from '../../index.mjs'\n * @import { Schema } from '../../common/configuration/index.mjs'\n */\n","import { normaliseOptions } from '../../common/configuration/index.mjs'\nimport { toggleConditionalInput } from '../../common/index.mjs'\nimport { Component } from '../../component.mjs'\nimport { ElementError } from '../../errors/index.mjs'\n\n/**\n * Checkboxes component\n *\n * Conditionally show content when a checkbox button is checked\n *\n * Test at {@link http://localhost:3000/nhsuk-frontend/components/checkboxes/with-conditional-content/}\n */\nexport class Checkboxes extends Component {\n  /**\n   * @param {Element | null} $root - HTML element to use for component\n   */\n  constructor($root) {\n    super($root)\n\n    const $inputs = this.$root.querySelectorAll('input[type=\"checkbox\"]')\n    if (!$inputs.length) {\n      throw new ElementError({\n        component: Checkboxes,\n        identifier: 'Form inputs (`<input type=\"checkbox\">`)'\n      })\n    }\n\n    this.$inputs = $inputs\n\n    this.$inputs.forEach(($input) => {\n      const targetId = $input.getAttribute('aria-controls')\n\n      // Skip checkboxes without aria-controls attributes\n      if (!targetId) {\n        return\n      }\n\n      // Throw if target conditional element does not exist.\n      if (!document.getElementById(targetId)) {\n        throw new ElementError({\n          component: Checkboxes,\n          identifier: `Conditional reveal (\\`id=\"${targetId}\"\\`)`\n        })\n      }\n    })\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event.\n    window.addEventListener('pageshow', () => this.syncAllConditionalReveals())\n\n    // Although we've set up handlers to sync state on the pageshow event, init\n    // could be called after those events have fired, for example if they are\n    // added to the page dynamically, so sync now too.\n    this.syncAllConditionalReveals()\n\n    // Handle events\n    this.$root.addEventListener('click', (event) => this.handleClick(event))\n  }\n\n  /**\n   * Sync the conditional reveal states for all checkboxes in this component.\n   */\n  syncAllConditionalReveals() {\n    this.$inputs.forEach(($input) =>\n      this.syncConditionalRevealWithInputState($input)\n    )\n  }\n\n  /**\n   * Sync conditional reveal with the input state\n   *\n   * Synchronise the visibility of the conditional reveal, and its accessible\n   * state, with the input's checked state.\n   *\n   * @param {HTMLInputElement} $input - Checkbox input\n   */\n  syncConditionalRevealWithInputState($input) {\n    toggleConditionalInput($input, 'nhsuk-checkboxes__conditional--hidden')\n  }\n\n  /**\n   * Uncheck other checkboxes\n   *\n   * Find any other checkbox inputs with the checkbox group value, and uncheck them.\n   * This is useful for when a â€œNone of these\" checkbox is checked.\n   *\n   * @param {HTMLInputElement} $input - Checkbox input\n   */\n  unCheckAllInputsExcept($input) {\n    const { checkboxExclusiveGroup: exclusiveGroup } = $input.dataset\n\n    const selectorGroup = exclusiveGroup\n      ? `[data-checkbox-exclusive-group=\"${exclusiveGroup}\"]`\n      : `[name=\"${$input.name}\"]`\n\n    const allInputsWithSameName = document.querySelectorAll(\n      `input[type=\"checkbox\"]${selectorGroup}`\n    )\n\n    allInputsWithSameName.forEach(($inputWithSameName) => {\n      const hasSameFormOwner = $input.form === $inputWithSameName.form\n\n      // Uncheck all with same exclusive group by default, otherwise fall back to\n      // GOV.UK Frontend behaviour to uncheck all with the same name attribute\n      if (hasSameFormOwner && $inputWithSameName !== $input) {\n        this.setInputState($inputWithSameName, false, exclusiveGroup)\n      }\n    })\n  }\n\n  /**\n   * Uncheck exclusive inputs\n   *\n   * Find any checkbox inputs with the same checkbox group value and the 'exclusive' behaviour,\n   * and uncheck them. This helps prevent someone checking both a regular checkbox and a\n   * \"None of these\" checkbox in the same fieldset.\n   *\n   * @param {HTMLInputElement} $input - Checkbox input\n   */\n  unCheckExclusiveInputs($input) {\n    const { checkboxExclusiveGroup: exclusiveGroup } = $input.dataset\n\n    const selectorGroup = exclusiveGroup\n      ? `[data-checkbox-exclusive-group=\"${exclusiveGroup}\"]`\n      : `[name=\"${$input.name}\"]`\n\n    const allInputsWithSameNameAndExclusiveBehaviour =\n      document.querySelectorAll(\n        `input[type=\"checkbox\"][data-checkbox-exclusive]${selectorGroup}`\n      )\n\n    allInputsWithSameNameAndExclusiveBehaviour.forEach(($exclusiveInput) => {\n      const hasSameFormOwner = $input.form === $exclusiveInput.form\n\n      // Uncheck the exclusive input only. When no group is set, fall back to\n      // GOV.UK Frontend behaviour and locate the exclusive input by name\n      if (hasSameFormOwner) {\n        this.setInputState($exclusiveInput, false, exclusiveGroup)\n      }\n    })\n  }\n\n  /**\n   * Set input state, optionally for matching exclusive group only\n   *\n   * @param {HTMLInputElement} $input - Checkbox input\n   * @param {boolean} checked - Checkbox checked state\n   * @param {string} [exclusiveGroup] - Set state for matching exclusive group only (optional)\n   */\n  setInputState($input, checked, exclusiveGroup) {\n    const { checkboxExclusiveGroup } = $input.dataset\n\n    // Skip input when exclusive group does not match\n    if (\n      exclusiveGroup &&\n      checkboxExclusiveGroup &&\n      checkboxExclusiveGroup !== exclusiveGroup\n    ) {\n      return\n    }\n\n    $input.checked = checked\n    this.syncConditionalRevealWithInputState($input)\n  }\n\n  /**\n   * Toggle classes and attributes\n   *\n   * @param {MouseEvent} event - Click event\n   */\n  handleClick(event) {\n    const $clickedInput = event.target\n\n    // Ignore clicks on things that aren't checkbox inputs\n    if (\n      !($clickedInput instanceof HTMLInputElement) ||\n      $clickedInput.type !== 'checkbox'\n    ) {\n      return\n    }\n\n    // If the checkbox conditionally-reveals some content, sync the state\n    const hasAriaControls = $clickedInput.getAttribute('aria-controls')\n    if (hasAriaControls) {\n      this.syncConditionalRevealWithInputState($clickedInput)\n    }\n\n    // No further behaviour needed for unchecking\n    if (!$clickedInput.checked) {\n      return\n    }\n\n    // Handle 'exclusive' checkbox behaviour (ie \"None of these\")\n    if ('checkboxExclusive' in $clickedInput.dataset) {\n      this.unCheckAllInputsExcept($clickedInput)\n    } else {\n      this.unCheckExclusiveInputs($clickedInput)\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes\n   */\n  static moduleName = 'nhsuk-checkboxes'\n}\n\n/**\n * Initialise checkboxes component\n *\n * @deprecated Use {@link createAll | `createAll(Checkboxes)`} instead.\n * @param {InitOptions} [options]\n */\nexport function initCheckboxes(options) {\n  const { scope: $scope } = normaliseOptions(options)\n\n  const $checkboxes = $scope?.querySelectorAll(\n    `[data-module=\"${Checkboxes.moduleName}\"]`\n  )\n\n  $checkboxes?.forEach(($root) => {\n    new Checkboxes($root)\n  })\n}\n\n/**\n * @import { createAll, InitOptions } from '../../index.mjs'\n */\n","import { normaliseOptions } from '../../common/configuration/index.mjs'\nimport { formatErrorMessage, setFocus } from '../../common/index.mjs'\nimport { ConfigurableComponent } from '../../configurable-component.mjs'\n\n/**\n * Error summary component\n *\n * Adapted from https://github.com/alphagov/govuk-frontend/blob/v2.13.0/src/components/error-summary/error-summary.js\n *\n * @augments ConfigurableComponent<ErrorSummaryConfig>\n */\nexport class ErrorSummary extends ConfigurableComponent {\n  /**\n   * @param {Element | null} $root - HTML element to use for component\n   * @param {ErrorSummaryConfig} [config] - Error summary config\n   */\n  constructor($root, config = {}) {\n    super($root, config)\n\n    /**\n     * Focus the error summary\n     */\n    if (!this.config.disableAutoFocus) {\n      setFocus(this.$root)\n    }\n\n    this.$root.addEventListener('click', (event) => this.handleClick(event))\n  }\n\n  /**\n   * Error summary config override\n   *\n   * @param {Partial<ErrorSummaryConfig>} _datasetConfig - Config specified by dataset\n   * @returns {Partial<ErrorSummaryConfig>} Config to override by dataset\n   */\n  configOverride(_datasetConfig) {\n    let configOverrides = /** @type {Partial<ErrorSummaryConfig>} */ ({})\n\n    if ('focusOnPageLoad' in this.config) {\n      console.warn(\n        formatErrorMessage(\n          ErrorSummary,\n          'Option `focusOnPageLoad` is deprecated. Use `disableAutoFocus` instead.'\n        )\n      )\n\n      configOverrides.disableAutoFocus = !this.config.focusOnPageLoad\n    }\n\n    return configOverrides\n  }\n\n  /**\n   * Get associated legend or label\n   *\n   * Returns the first element that exists from this list:\n   *\n   * - The `<legend>` associated with the closest `<fieldset>` ancestor, as long\n   *   as the top of it is no more than half a viewport height away from the\n   *   bottom of the input\n   * - The first `<label>` that is associated with the input using for='inputId'\n   * - The closest parent `<label>`\n   *\n   * @param {Element} $input - The input\n   * @returns {Element | null} Associated legend or label, or null if no\n   *   associated legend or label can be found\n   */\n  getAssociatedLegendOrLabel($input) {\n    const $fieldset = $input.closest('fieldset')\n\n    if ($fieldset) {\n      const $legends = $fieldset.getElementsByTagName('legend')\n\n      if ($legends.length) {\n        const $candidateLegend = $legends[0]\n\n        // If the input type is radio or checkbox, always use the legend if there\n        // is one.\n        if (\n          $input instanceof HTMLInputElement &&\n          ($input.type === 'checkbox' || $input.type === 'radio')\n        ) {\n          return $candidateLegend\n        }\n\n        // For other input types, only scroll to the fieldsetâ€™s legend (instead of\n        // the label associated with the input) if the input would end up in the\n        // top half of the screen.\n        //\n        // This should avoid situations where the input either ends up off the\n        // screen, or obscured by a software keyboard.\n        const legendTop = $candidateLegend.getBoundingClientRect().top\n        const inputRect = $input.getBoundingClientRect()\n\n        // If the browser doesn't support Element.getBoundingClientRect().height\n        // or window.innerHeight (like IE8), bail and just link to the label.\n        if (inputRect.height && window.innerHeight) {\n          const inputBottom = inputRect.top + inputRect.height\n\n          if (inputBottom - legendTop < window.innerHeight / 2) {\n            return $candidateLegend\n          }\n        }\n      }\n    }\n\n    return (\n      document.querySelector(`label[for='${$input.getAttribute('id')}']`) ??\n      $input.closest('label')\n    )\n  }\n\n  /**\n   * Focus the target element\n   *\n   * By default, the browser will scroll the target into view. Because our labels\n   * or legends appear above the input, this means the user will be presented with\n   * an input without any context, as the label or legend will be off the top of\n   * the screen.\n   *\n   * Manually handling the click event, scrolling the question into view and then\n   * focussing the element solves this.\n   *\n   * This also results in the label and/or legend being announced correctly in\n   * NVDA - without this only the field type is announced\n   * (e.g. 'Edit, has autocomplete').\n   *\n   * @param {EventTarget} $target - Event target\n   * @returns {boolean} True if the target was able to be focussed\n   */\n  focusTarget($target) {\n    // If the element that was clicked was not a link, return early\n    if (!($target instanceof HTMLAnchorElement)) {\n      return false\n    }\n\n    const inputId = $target.hash.replace('#', '')\n    if (!inputId) {\n      return false\n    }\n\n    const $input = document.getElementById(inputId)\n    if (!$input) {\n      return false\n    }\n\n    const $legendOrLabel = this.getAssociatedLegendOrLabel($input)\n    if (!$legendOrLabel) {\n      return false\n    }\n\n    // Scroll the legend or label into view *before* calling focus on the input to\n    // avoid extra scrolling in browsers that don't support `preventScroll` (which\n    // at time of writing is most of them...)\n    $legendOrLabel.scrollIntoView()\n    $input.focus({ preventScroll: true })\n\n    return true\n  }\n\n  /**\n   * Click event handler\n   *\n   * @param {MouseEvent} event - Click event\n   */\n  handleClick(event) {\n    const $target = event.target\n    if ($target && this.focusTarget($target)) {\n      event.preventDefault()\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes\n   */\n  static moduleName = 'nhsuk-error-summary'\n\n  /**\n   * Error summary default config\n   *\n   * @see {@link ErrorSummaryConfig}\n   * @constant\n   * @type {ErrorSummaryConfig}\n   */\n  static defaults = Object.freeze({\n    disableAutoFocus: false\n  })\n\n  /**\n   * Error summary config schema\n   *\n   * @constant\n   * @satisfies {Schema<ErrorSummaryConfig>}\n   */\n  static schema = Object.freeze({\n    properties: {\n      focusOnPageLoad: { type: 'boolean' }, // Deprecated\n      disableAutoFocus: { type: 'boolean' }\n    }\n  })\n}\n\n/**\n * Initialise error summary component\n *\n * @deprecated Use {@link createAll | `createAll(ErrorSummary, options)`} instead.\n * @param {InitOptions & ErrorSummaryConfig} [options]\n */\nexport function initErrorSummary(options) {\n  const { scope: $scope } = normaliseOptions(options)\n\n  const $root = $scope?.querySelector(\n    `[data-module=\"${ErrorSummary.moduleName}\"]`\n  )\n\n  if (!$root) {\n    return\n  }\n\n  new ErrorSummary($root, options)\n}\n\n/**\n * Error summary config\n *\n * @see {@link ErrorSummary.defaults}\n * @typedef {object} ErrorSummaryConfig\n * @property {boolean} [focusOnPageLoad=true] - Deprecated. Use `disableAutoFocus` instead.\n * @property {boolean} [disableAutoFocus=false] - If set to `true` the error\n *   summary will not be focussed when the page loads.\n */\n\n/**\n * @import { createAll, InitOptions } from '../../index.mjs'\n * @import { Schema } from '../../common/configuration/index.mjs'\n */\n","import { normaliseOptions } from '../../common/configuration/index.mjs'\nimport { Component } from '../../component.mjs'\nimport { ElementError } from '../../errors/index.mjs'\n\n/**\n * Header component\n */\nexport class Header extends Component {\n  /** @type {HTMLElement | null} */\n  $navigation = null\n\n  /** @type {HTMLElement | null} */\n  $navigationList = null\n\n  /** @type {NodeListOf<HTMLElement> | null} */\n  $navigationItems = null\n\n  /** @type {HTMLElement | null} */\n  $menu = null\n\n  /** @type {HTMLButtonElement | null} */\n  $menuToggle = null\n\n  /** @type {HTMLElement | null} */\n  $menuList = null\n\n  width = 0\n\n  /**\n   * @type {{ element: HTMLElement, right: number }[]}\n   */\n  breakpoints = []\n\n  /**\n   * @type {number | null}\n   */\n  updateNavigationTimer = null\n\n  menuIsEnabled = false\n  menuIsOpen = false\n\n  /**\n   * @param {Element | null} $root - HTML element to use for component\n   */\n  constructor($root) {\n    super($root)\n\n    const $navigation = this.$root.querySelector('.nhsuk-header__navigation')\n    const $navigationList = this.$root.querySelector(\n      '.nhsuk-header__navigation-list'\n    )\n\n    const $navigationItems = /** @type {NodeListOf<HTMLElement>} */ (\n      this.$root.querySelectorAll('.nhsuk-header__navigation-item')\n    )\n\n    const $menu = this.$root.querySelector('.nhsuk-header__menu')\n    const $menuToggle = this.$root.querySelector('.nhsuk-header__menu-toggle')\n\n    // Check for navigation (optional)\n    if ($navigation) {\n      if (!($navigation instanceof HTMLElement)) {\n        throw new ElementError({\n          component: Header,\n          identifier: 'Navigation (`<nav class=\"nhsuk-header__navigation\">`)'\n        })\n      }\n\n      if (!$navigationList || !($navigationList instanceof HTMLElement)) {\n        throw new ElementError({\n          component: Header,\n          identifier: 'List (`<ul class=\"nhsuk-header__navigation-list\">`)'\n        })\n      }\n\n      if (!$navigationItems.length) {\n        throw new ElementError({\n          component: Header,\n          identifier:\n            'List items (`<li class=\"nhsuk-header__navigation-item\">`)'\n        })\n      }\n\n      if (!$menu || !($menu instanceof HTMLElement)) {\n        throw new ElementError({\n          component: Header,\n          identifier: 'Menu item (`<li class=\"nhsuk-header__menu\" hidden>`)'\n        })\n      }\n\n      if (!$menuToggle || !($menuToggle instanceof HTMLButtonElement)) {\n        throw new ElementError({\n          component: Header,\n          identifier:\n            'Menu button (`<button class=\"nhsuk-header__menu-toggle\">`)',\n          expectedType: 'HTMLButtonElement'\n        })\n      }\n\n      this.$navigation = $navigation\n      this.$navigationList = $navigationList\n      this.$navigationItems = $navigationItems\n      this.$menu = $menu\n      this.$menuToggle = $menuToggle\n      this.$menuList = document.createElement('ul')\n    }\n\n    // Save bound functions so we can remove event listeners when unnecessary\n    this.handleEscapeKey = this.onEscapeKey.bind(this)\n    this.handleUpdateNavigation = this.updateNavigation.bind(this)\n    this.handleToggleMenu = this.toggleMenu.bind(this)\n\n    this.setupNavigation()\n    this.updateNavigation()\n  }\n\n  /**\n   * Reset navigation\n   *\n   * Calculate available space by summing the width of each navigation item\n   */\n  resetNavigation() {\n    const { $menu, $navigationList } = this\n    if (!$menu || !$navigationList) {\n      return\n    }\n\n    let right = 0\n\n    // Reset and calculate widths on every resize\n    this.breakpoints.forEach((breakpoint) => {\n      $navigationList.insertBefore(breakpoint.element, $menu)\n\n      // Calculate widths\n      right += breakpoint.element.offsetWidth\n      breakpoint.right = right\n    })\n\n    // Reset space for menu button\n    this.width = $navigationList.offsetWidth\n  }\n\n  /**\n   * Add the breakpoints with default positions\n   */\n  setupNavigation() {\n    const { $navigationItems } = this\n\n    // Skip with no navigation items\n    if (!$navigationItems) {\n      return\n    }\n\n    $navigationItems.forEach((element) => {\n      this.breakpoints.push({ element, right: 0 })\n    })\n\n    // Add resize listener for next update\n    window.addEventListener('resize', () => {\n      if (this.updateNavigationTimer) {\n        window.clearTimeout(this.updateNavigationTimer)\n      }\n\n      this.updateNavigationTimer = window.setTimeout(\n        this.handleUpdateNavigation,\n        100\n      )\n    })\n  }\n\n  /**\n   * Add the menu to the DOM\n   */\n  setupMenu() {\n    const { $menu, $menuList } = this\n\n    // Skip with no menu or when already appended\n    if (!$menu || !$menuList || $menuList.parentElement) {\n      return\n    }\n\n    $menuList.classList.add('nhsuk-header__menu-list')\n    $menuList.setAttribute('hidden', '')\n    $menu.appendChild($menuList)\n  }\n\n  /**\n   * Enable the menu\n   */\n  enableMenu() {\n    const { $menu, $menuToggle } = this\n\n    // Skip with no menu or when already enabled\n    if (!$menu || !$menuToggle || this.menuIsEnabled) {\n      return\n    }\n\n    this.menuIsEnabled = true\n    $menu.removeAttribute('hidden')\n\n    // Add click listener to toggle menu\n    $menuToggle.addEventListener('click', this.handleToggleMenu)\n  }\n\n  /**\n   * Disable the menu\n   */\n  disableMenu() {\n    const { $menu, $menuToggle } = this\n\n    // Skip with no menu or when already disabled\n    if (!$menu || !$menuToggle || !this.menuIsEnabled) {\n      return\n    }\n\n    this.closeMenu()\n    this.menuIsEnabled = false\n    $menu.setAttribute('hidden', '')\n\n    // Remove click listener from toggle menu\n    $menuToggle.removeEventListener('click', this.handleToggleMenu)\n  }\n\n  /**\n   * Close the menu\n   *\n   * Closes the menu and updates accessibility state.\n   *\n   * Removes the bottom border from the navigation\n   */\n  closeMenu() {\n    const { $menuList, $menuToggle, $navigation } = this\n\n    // Skip with no menu or when already closed\n    if (\n      !$navigation ||\n      !$menuList ||\n      !$menuToggle ||\n      !this.menuIsEnabled ||\n      !this.menuIsOpen\n    ) {\n      return\n    }\n\n    this.menuIsOpen = false\n    $menuList.setAttribute('hidden', '')\n    $menuToggle.setAttribute('aria-expanded', 'false')\n    $navigation.style.removeProperty('border-bottom-width')\n\n    // Remove escape key listener to close menu\n    document.removeEventListener('keydown', this.handleEscapeKey)\n  }\n\n  /**\n   * Escape key handler\n   *\n   * This function is called when the user\n   * presses the escape key to close the menu.\n   *\n   * @param {KeyboardEvent} event - Key press event\n   */\n  onEscapeKey(event) {\n    if (event.key === 'Escape') {\n      this.closeMenu()\n    }\n  }\n\n  /**\n   * Open the menu\n   *\n   * Opens the menu and updates accessibility state.\n   *\n   * The menu is absolutely positioned, so it adds a border\n   * to the bottom of the navigation to prevent it from overlapping\n   *\n   * Adds event listeners for the close button,\n   */\n  openMenu() {\n    const { $menuList, $menuToggle, $navigation } = this\n\n    // Skip with no menu or when already open\n    if (\n      !$navigation ||\n      !$menuList ||\n      !$menuToggle ||\n      !this.menuIsEnabled ||\n      this.menuIsOpen\n    ) {\n      return\n    }\n\n    this.menuIsOpen = true\n    $menuList.removeAttribute('hidden')\n    $menuToggle.setAttribute('aria-expanded', 'true')\n    $navigation.style.setProperty(\n      'border-bottom-width',\n      `${$menuList.offsetHeight}px`\n    )\n\n    // Add escape key listener to close menu\n    document.addEventListener('keydown', this.handleEscapeKey)\n  }\n\n  /**\n   * Handle menu button click\n   *\n   * Toggles the menu between open and closed\n   */\n  toggleMenu() {\n    if (!this.menuIsEnabled) {\n      return\n    }\n\n    if (this.menuIsOpen) {\n      this.closeMenu()\n    } else {\n      this.openMenu()\n    }\n  }\n\n  /**\n   * Update navigation for the available space\n   *\n   * Moves all items that overflow the available space into the menu\n   */\n  updateNavigation() {\n    this.resetNavigation()\n\n    // Check for items that overflow\n    let menuItems = this.breakpoints.filter((breakpoint) => {\n      return breakpoint.right > this.width\n    })\n\n    // Disable menu if empty\n    if (!menuItems.length) {\n      this.disableMenu()\n      return\n    }\n\n    this.setupMenu()\n    this.enableMenu()\n\n    const { $menu, $menuList, $navigation } = this\n\n    // Skip when no menu or menu list\n    if (!$menu || !$menuList || !$navigation) {\n      return\n    }\n\n    // Subtract space for menu button\n    this.width -= $menu.offsetWidth\n\n    // Move items based on available width\n    this.breakpoints.forEach((breakpoint) => {\n      if (breakpoint.right > this.width) {\n        $menuList.insertAdjacentElement('beforeend', breakpoint.element)\n      }\n    })\n\n    // Update menu height if open\n    if (this.menuIsOpen) {\n      $navigation.style.setProperty(\n        'border-bottom-width',\n        `${$menuList.offsetHeight}px`\n      )\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes\n   */\n  static moduleName = 'nhsuk-header'\n}\n\n/**\n * Initialise header component\n *\n * @deprecated Use {@link createAll | `createAll(Header)`} instead.\n * @param {InitOptions} [options]\n */\nexport function initHeader(options) {\n  const { scope: $scope } = normaliseOptions(options)\n\n  const $root = $scope?.querySelector(`[data-module=\"${Header.moduleName}\"]`)\n\n  if (!$root) {\n    return\n  }\n\n  new Header($root)\n}\n\n/**\n * @import { createAll, InitOptions } from '../../index.mjs'\n */\n","import { normaliseOptions } from '../../common/configuration/index.mjs'\nimport { setFocus } from '../../common/index.mjs'\nimport { ConfigurableComponent } from '../../configurable-component.mjs'\n\n/**\n * Notification banner component\n *\n * Adapted from https://github.com/alphagov/govuk-frontend/blob/v5.10.2/packages/govuk-frontend/src/govuk/components/notification-banner/notification-banner.mjs\n *\n * @augments ConfigurableComponent<NotificationBannerConfig>\n */\nexport class NotificationBanner extends ConfigurableComponent {\n  /**\n   * @param {Element | null} $root - HTML element to use for component\n   * @param {NotificationBannerConfig} [config] - Notification banner config\n   */\n  constructor($root, config = {}) {\n    super($root, config)\n\n    /**\n     * Focus the notification banner\n     *\n     * If `role=\"alert\"` is set, focus the element to help some assistive\n     * technologies prioritise announcing it.\n     *\n     * You can turn off the auto-focus functionality by setting\n     * `data-disable-auto-focus=\"true\"` in the component HTML. You might wish to\n     * do this based on user research findings, or to avoid a clash with another\n     * element which should be focused when the page loads.\n     */\n    if (\n      this.$root.getAttribute('role') === 'alert' &&\n      !this.config.disableAutoFocus\n    ) {\n      setFocus(this.$root)\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'nhsuk-notification-banner'\n\n  /**\n   * Notification banner default config\n   *\n   * @see {@link NotificationBannerConfig}\n   * @constant\n   * @type {NotificationBannerConfig}\n   */\n  static defaults = Object.freeze({\n    disableAutoFocus: false\n  })\n\n  /**\n   * Notification banner config schema\n   *\n   * @constant\n   * @satisfies {Schema<NotificationBannerConfig>}\n   */\n  static schema = Object.freeze({\n    properties: {\n      disableAutoFocus: { type: 'boolean' }\n    }\n  })\n}\n\n/**\n * Initialise notification banner component\n *\n * @deprecated Use {@link createAll | `createAll(NotificationBanner, options)`} instead.\n * @param {InitOptions & NotificationBannerConfig} [options]\n */\nexport function initNotificationBanners(options) {\n  const { scope: $scope } = normaliseOptions(options)\n\n  const $notificationBanners = $scope?.querySelectorAll(\n    `[data-module=\"${NotificationBanner.moduleName}\"]`\n  )\n\n  $notificationBanners?.forEach(($notificationBanner) => {\n    new NotificationBanner($notificationBanner, options)\n  })\n}\n\n/**\n * Notification banner config\n *\n * @typedef {object} NotificationBannerConfig\n * @property {boolean} [disableAutoFocus=false] - If set to `true` the\n *   notification banner will not be focussed when the page loads. This only\n *   applies if the component has a `role` of `alert` â€“ in other cases the\n *   component will not be focused on page load, regardless of this option.\n */\n\n/**\n * @import { createAll, InitOptions } from '../../index.mjs'\n * @import { Schema } from '../../common/configuration/index.mjs'\n */\n","import { normaliseOptions } from '../../common/configuration/index.mjs'\nimport { toggleConditionalInput } from '../../common/index.mjs'\nimport { Component } from '../../component.mjs'\nimport { ElementError } from '../../errors/index.mjs'\n\n/**\n * Radios component\n *\n * Conditionally show content when a radio button is checked\n *\n * Test at {@link http://localhost:3000/nhsuk-frontend/components/radios/with-conditional-content/}\n */\nexport class Radios extends Component {\n  /**\n   * @param {Element | null} $root - HTML element to use for component\n   */\n  constructor($root) {\n    super($root)\n\n    const $inputs = this.$root.querySelectorAll('input[type=\"radio\"]')\n    if (!$inputs.length) {\n      throw new ElementError({\n        component: Radios,\n        identifier: 'Form inputs (`<input type=\"radio\">`)'\n      })\n    }\n\n    this.$inputs = $inputs\n\n    this.$inputs.forEach(($input) => {\n      const targetId = $input.getAttribute('aria-controls')\n\n      // Skip radios without aria-controls attributes\n      if (!targetId) {\n        return\n      }\n\n      // Throw if target conditional element does not exist.\n      if (!document.getElementById(targetId)) {\n        throw new ElementError({\n          component: Radios,\n          identifier: `Conditional reveal (\\`id=\"${targetId}\"\\`)`\n        })\n      }\n    })\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event.\n    window.addEventListener('pageshow', () => this.syncAllConditionalReveals())\n\n    // Although we've set up handlers to sync state on the pageshow event, init\n    // could be called after those events have fired, for example if they are\n    // added to the page dynamically, so sync now too.\n    this.syncAllConditionalReveals()\n\n    // Handle events\n    this.$root.addEventListener('click', (event) => this.handleClick(event))\n  }\n\n  /**\n   * Sync the conditional reveal states for all radio buttons in this component.\n   */\n  syncAllConditionalReveals() {\n    this.$inputs.forEach(($input) =>\n      this.syncConditionalRevealWithInputState($input)\n    )\n  }\n\n  /**\n   * Sync conditional reveal with the input state\n   *\n   * Synchronise the visibility of the conditional reveal, and its accessible\n   * state, with the input's checked state.\n   *\n   * @param {HTMLInputElement} $input - Radio input\n   */\n  syncConditionalRevealWithInputState($input) {\n    toggleConditionalInput($input, 'nhsuk-radios__conditional--hidden')\n  }\n\n  /**\n   * Toggle classes and attributes\n   *\n   * @param {MouseEvent} event - Click event\n   */\n  handleClick(event) {\n    const $clickedInput = event.target\n\n    // Ignore clicks on things that aren't radio buttons\n    if (\n      !($clickedInput instanceof HTMLInputElement) ||\n      $clickedInput.type !== 'radio'\n    ) {\n      return\n    }\n\n    // We only need to consider radios with conditional reveals, which will have\n    // aria-controls attributes.\n    const $allInputs = document.querySelectorAll(\n      'input[type=\"radio\"][aria-controls]'\n    )\n\n    const $clickedInputForm = $clickedInput.form\n    const $clickedInputName = $clickedInput.name\n\n    $allInputs.forEach(($input) => {\n      const hasSameFormOwner = $input.form === $clickedInputForm\n      const hasSameName = $input.name === $clickedInputName\n\n      if (hasSameName && hasSameFormOwner) {\n        this.syncConditionalRevealWithInputState($input)\n      }\n    })\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes\n   */\n  static moduleName = 'nhsuk-radios'\n}\n\n/**\n * Initialise radios component\n *\n * @deprecated Use {@link createAll | `createAll(Radios)`} instead.\n * @param {InitOptions} [options]\n */\nexport function initRadios(options) {\n  const { scope: $scope } = normaliseOptions(options)\n\n  const $radios = $scope?.querySelectorAll(\n    `[data-module=\"${Radios.moduleName}\"]`\n  )\n\n  $radios?.forEach(($root) => {\n    new Radios($root)\n  })\n}\n\n/**\n * @import { createAll, InitOptions } from '../../index.mjs'\n */\n","import { normaliseOptions } from '../../common/configuration/index.mjs'\nimport { setFocus } from '../../common/index.mjs'\nimport { Component } from '../../component.mjs'\nimport { ElementError } from '../../errors/index.mjs'\n\n/**\n * Skip link component\n *\n * When using VoiceOver on iOS, focus remains on the skip link anchor\n * when elected so the next focusable element is not at the jumped to area.\n *\n * @augments Component<HTMLAnchorElement>\n */\nexport class SkipLink extends Component {\n  static elementType = HTMLAnchorElement\n\n  /**\n   * @param {Element | null} $root - HTML element to use for component\n   */\n  constructor($root) {\n    super($root)\n\n    const hash = this.$root.hash\n    const href = this.$root.getAttribute('href') ?? ''\n\n    const linkedElementId = hash.replace('#', '')\n    if (!linkedElementId) {\n      throw new ElementError({\n        component: SkipLink,\n        identifier: `Target link (\\`href=\"${href}\"\\`) hash fragment`\n      })\n    }\n\n    const $linkedElement = document.getElementById(linkedElementId)\n\n    // Check for linked element\n    if (!$linkedElement) {\n      throw new ElementError({\n        component: SkipLink,\n        element: $linkedElement,\n        identifier: `Target content (\\`id=\"${linkedElementId}\"\\`)`\n      })\n    }\n\n    /**\n     * Focus the linked element on click\n     *\n     * Adds a helper CSS class to hide native focus styles,\n     * but removes it on blur to restore native focus styles\n     */\n    this.$root.addEventListener('click', () =>\n      setFocus($linkedElement, {\n        onBeforeFocus() {\n          $linkedElement.classList.add('nhsuk-skip-link-focused-element')\n        },\n        onBlur() {\n          $linkedElement.classList.remove('nhsuk-skip-link-focused-element')\n        }\n      })\n    )\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes\n   */\n  static moduleName = 'nhsuk-skip-link'\n}\n\n/**\n * Initialise skip link component\n *\n * @deprecated Use {@link createAll | `createAll(SkipLink)`} instead.\n * @param {InitOptions} [options]\n */\nexport function initSkipLinks(options) {\n  const { scope: $scope } = normaliseOptions(options)\n\n  const $skipLinks = $scope?.querySelectorAll(\n    `[data-module=\"${SkipLink.moduleName}\"]`\n  )\n\n  $skipLinks?.forEach(($root) => {\n    new SkipLink($root)\n  })\n}\n\n/**\n * @import { createAll, InitOptions } from '../../index.mjs'\n */\n","import { normaliseOptions } from '../../common/configuration/index.mjs'\nimport { getBreakpoint } from '../../common/index.mjs'\nimport { Component } from '../../component.mjs'\nimport { ElementError } from '../../errors/index.mjs'\n\n/**\n * Tabs component\n */\nexport class Tabs extends Component {\n  jsHiddenClass = 'nhsuk-tabs__panel--hidden'\n  changingHash = false\n\n  /**\n   * @type {MediaQueryList | null}\n   */\n  mql = null\n\n  /**\n   * @param {Element | null} $root - HTML element to use for component\n   */\n  constructor($root) {\n    super($root)\n\n    const $tabs = this.$root.querySelectorAll('a.nhsuk-tabs__tab')\n    if (!$tabs.length) {\n      throw new ElementError({\n        component: Tabs,\n        identifier: 'Links (`<a class=\"nhsuk-tabs__tab\">`)'\n      })\n    }\n\n    this.$tabs = $tabs\n\n    // Save bound functions so we can remove event listeners during teardown\n    this.boundTabClick = this.onTabClick.bind(this)\n    this.boundTabKeydown = this.onTabKeydown.bind(this)\n    this.boundOnHashChange = this.onHashChange.bind(this)\n\n    const $tabList = this.$root.querySelector('.nhsuk-tabs__list')\n    const $tabListItems = this.$root.querySelectorAll('.nhsuk-tabs__list-item')\n\n    if (!$tabList) {\n      throw new ElementError({\n        component: Tabs,\n        identifier: 'List (`<ul class=\"nhsuk-tabs__list\">`)'\n      })\n    }\n\n    if (!$tabListItems.length) {\n      throw new ElementError({\n        component: Tabs,\n        identifier: 'List items (`<li class=\"nhsuk-tabs__list-item\">`)'\n      })\n    }\n\n    this.$tabList = $tabList\n    this.$tabListItems = $tabListItems\n\n    this.setupResponsiveChecks()\n  }\n\n  /**\n   * Setup viewport resize check\n   */\n  setupResponsiveChecks() {\n    const breakpoint = getBreakpoint('tablet')\n\n    if (!breakpoint.value) {\n      throw new ElementError({\n        component: Tabs,\n        identifier: `CSS custom property (\\`${breakpoint.property}\\`) on pseudo-class \\`:root\\``\n      })\n    }\n\n    // Media query list for NHS.UK frontend tablet breakpoint\n    this.mql = window.matchMedia(`(min-width: ${breakpoint.value})`)\n\n    // MediaQueryList.addEventListener isn't supported by Safari < 14 so we need\n    // to be able to fall back to the deprecated MediaQueryList.addListener\n    if ('addEventListener' in this.mql) {\n      this.mql.addEventListener('change', () => this.checkMode())\n    } else {\n      // @ts-expect-error Property 'addListener' does not exist\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      this.mql.addListener(() => this.checkMode())\n    }\n\n    this.checkMode()\n  }\n\n  /**\n   * Setup or teardown handler for viewport resize check\n   */\n  checkMode() {\n    if (this.mql?.matches) {\n      this.setup()\n    } else {\n      this.teardown()\n    }\n  }\n\n  /**\n   * Setup tab component\n   */\n  setup() {\n    this.$tabList.setAttribute('role', 'tablist')\n\n    this.$tabListItems.forEach(($item) => {\n      $item.setAttribute('role', 'presentation')\n    })\n\n    this.$tabs.forEach(($tab) => {\n      // Set HTML attributes\n      this.setAttributes($tab)\n\n      // Handle events\n      $tab.addEventListener('click', this.boundTabClick, true)\n      $tab.addEventListener('keydown', this.boundTabKeydown, true)\n\n      // Remove old active panels\n      this.hideTab($tab)\n    })\n\n    // Show either the active tab according to the URL's hash or the first tab\n    const $activeTab = this.getTab(window.location.hash) ?? this.$tabs[0]\n\n    this.showTab($activeTab)\n\n    // Handle hashchange events\n    window.addEventListener('hashchange', this.boundOnHashChange, true)\n  }\n\n  /**\n   * Teardown tab component\n   */\n  teardown() {\n    this.$tabList.removeAttribute('role')\n\n    this.$tabListItems.forEach(($item) => {\n      $item.removeAttribute('role')\n    })\n\n    this.$tabs.forEach(($tab) => {\n      // Remove events\n      $tab.removeEventListener('click', this.boundTabClick, true)\n      $tab.removeEventListener('keydown', this.boundTabKeydown, true)\n\n      // Unset HTML attributes\n      this.unsetAttributes($tab)\n    })\n\n    // Remove hashchange event handler\n    window.removeEventListener('hashchange', this.boundOnHashChange, true)\n  }\n\n  /**\n   * Handle hashchange event\n   */\n  onHashChange() {\n    const { hash } = window.location\n    const $tabWithHash = this.getTab(hash)\n    if (!$tabWithHash) {\n      return\n    }\n\n    // Prevent changing the hash\n    if (this.changingHash) {\n      this.changingHash = false\n      return\n    }\n\n    // Show either the active tab according to the URL's hash or the first tab\n    const $previousTab = this.getCurrentTab()\n    if (!$previousTab) {\n      return\n    }\n\n    this.hideTab($previousTab)\n    this.showTab($tabWithHash)\n    $tabWithHash.focus()\n  }\n\n  /**\n   * Hide panel for tab link\n   *\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  hideTab($tab) {\n    this.unhighlightTab($tab)\n    this.hidePanel($tab)\n  }\n\n  /**\n   * Show panel for tab link\n   *\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  showTab($tab) {\n    this.highlightTab($tab)\n    this.showPanel($tab)\n  }\n\n  /**\n   * Get tab link by hash\n   *\n   * @param {string} hash - Hash fragment including #\n   */\n  getTab(hash) {\n    return this.$root.querySelector(`a.nhsuk-tabs__tab[href=\"${hash}\"]`)\n  }\n\n  /**\n   * Set tab link and panel attributes\n   *\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  setAttributes($tab) {\n    const panelId = $tab.hash.replace('#', '')\n    if (!panelId) {\n      return\n    }\n\n    // set tab attributes\n    $tab.setAttribute('id', `tab_${panelId}`)\n    $tab.setAttribute('role', 'tab')\n    $tab.setAttribute('aria-controls', panelId)\n    $tab.setAttribute('aria-selected', 'false')\n    $tab.setAttribute('tabindex', '-1')\n\n    // set panel attributes\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.setAttribute('role', 'tabpanel')\n    $panel.setAttribute('aria-labelledby', $tab.id)\n    $panel.classList.add(this.jsHiddenClass)\n  }\n\n  /**\n   * Unset tab link and panel attributes\n   *\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  unsetAttributes($tab) {\n    // unset tab attributes\n    $tab.removeAttribute('id')\n    $tab.removeAttribute('role')\n    $tab.removeAttribute('aria-controls')\n    $tab.removeAttribute('aria-selected')\n    $tab.removeAttribute('tabindex')\n\n    // unset panel attributes\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.removeAttribute('role')\n    $panel.removeAttribute('aria-labelledby')\n    $panel.removeAttribute('tabindex')\n    $panel.classList.remove(this.jsHiddenClass)\n  }\n\n  /**\n   * Handle tab link clicks\n   *\n   * @param {MouseEvent} event - Mouse click event\n   */\n  onTabClick(event) {\n    const $currentTab = this.getCurrentTab()\n    const $newTab = event.currentTarget\n\n    if (!$currentTab || !($newTab instanceof HTMLAnchorElement)) {\n      return\n    }\n\n    event.preventDefault()\n\n    this.hideTab($currentTab)\n    this.showTab($newTab)\n    this.createHistoryEntry($newTab)\n  }\n\n  /**\n   * Update browser URL hash fragment for tab\n   *\n   * - Allows back/forward to navigate tabs\n   * - Avoids page jump when hash changes\n   *\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  createHistoryEntry($tab) {\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    // Save and restore the id\n    // so the page doesn't jump when a user clicks a tab (which changes the hash)\n    const panelId = $panel.id\n    $panel.id = ''\n    this.changingHash = true\n    window.location.hash = panelId\n    $panel.id = panelId\n  }\n\n  /**\n   * Handle tab keydown event\n   *\n   * - Press right/down arrow for next tab\n   * - Press left/up arrow for previous tab\n   *\n   * @param {KeyboardEvent} event - Keydown event\n   */\n  onTabKeydown(event) {\n    switch (event.key) {\n      // 'Left', 'Right', 'Up' and 'Down' required for Edge 16 support.\n      case 'ArrowLeft':\n      case 'ArrowUp':\n      case 'Left':\n      case 'Up':\n        this.activatePreviousTab()\n        event.preventDefault()\n        break\n      case 'ArrowRight':\n      case 'ArrowDown':\n      case 'Right':\n      case 'Down':\n        this.activateNextTab()\n        event.preventDefault()\n        break\n    }\n  }\n\n  /**\n   * Activate next tab\n   */\n  activateNextTab() {\n    const $currentTab = this.getCurrentTab()\n    if (!$currentTab?.parentElement) {\n      return\n    }\n\n    const $nextTabListItem = $currentTab.parentElement.nextElementSibling\n    if (!$nextTabListItem) {\n      return\n    }\n\n    const $nextTab = $nextTabListItem.querySelector('a.nhsuk-tabs__tab')\n    if (!$nextTab) {\n      return\n    }\n\n    this.hideTab($currentTab)\n    this.showTab($nextTab)\n    $nextTab.focus()\n    this.createHistoryEntry($nextTab)\n  }\n\n  /**\n   * Activate previous tab\n   */\n  activatePreviousTab() {\n    const $currentTab = this.getCurrentTab()\n    if (!$currentTab?.parentElement) {\n      return\n    }\n\n    const $previousTabListItem =\n      $currentTab.parentElement.previousElementSibling\n    if (!$previousTabListItem) {\n      return\n    }\n\n    const $previousTab = $previousTabListItem.querySelector('a.nhsuk-tabs__tab')\n    if (!$previousTab) {\n      return\n    }\n\n    this.hideTab($currentTab)\n    this.showTab($previousTab)\n    $previousTab.focus()\n    this.createHistoryEntry($previousTab)\n  }\n\n  /**\n   * Get tab panel for tab link\n   *\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  getPanel($tab) {\n    const panelId = $tab.hash.replace('#', '')\n    if (!panelId) {\n      return null\n    }\n\n    return this.$root.querySelector(`#${panelId}`)\n  }\n\n  /**\n   * Show tab panel for tab link\n   *\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  showPanel($tab) {\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.classList.remove(this.jsHiddenClass)\n  }\n\n  /**\n   * Hide tab panel for tab link\n   *\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  hidePanel($tab) {\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.classList.add(this.jsHiddenClass)\n  }\n\n  /**\n   * Unset 'selected' state for tab link\n   *\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  unhighlightTab($tab) {\n    if (!$tab.parentElement) {\n      return\n    }\n\n    $tab.setAttribute('aria-selected', 'false')\n    $tab.parentElement.classList.remove('nhsuk-tabs__list-item--selected')\n    $tab.setAttribute('tabindex', '-1')\n  }\n\n  /**\n   * Set 'selected' state for tab link\n   *\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  highlightTab($tab) {\n    if (!$tab.parentElement) {\n      return\n    }\n\n    $tab.setAttribute('aria-selected', 'true')\n    $tab.parentElement.classList.add('nhsuk-tabs__list-item--selected')\n    $tab.setAttribute('tabindex', '0')\n  }\n\n  /**\n   * Get current tab link\n   */\n  getCurrentTab() {\n    return this.$root.querySelector(\n      '.nhsuk-tabs__list-item--selected a.nhsuk-tabs__tab'\n    )\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes\n   */\n  static moduleName = 'nhsuk-tabs'\n}\n\n/**\n * Initialise tabs component\n *\n * @deprecated Use {@link createAll | `createAll(Tabs)`} instead.\n * @param {InitOptions} [options]\n */\nexport function initTabs(options) {\n  const { scope: $scope } = normaliseOptions(options)\n\n  const $tabs = $scope?.querySelectorAll(`[data-module=\"${Tabs.moduleName}\"]`)\n\n  $tabs?.forEach(($root) => {\n    new Tabs($root)\n  })\n}\n\n/**\n * @import { createAll, InitOptions } from '../../index.mjs'\n */\n","import { isObject } from './common/index.mjs'\n\n/**\n * Internationalisation\n *\n * Adds support for selecting messages to render, with placeholder\n * interpolation and locale-aware number formatting and pluralisation\n */\nexport class I18n {\n  /**\n   * @param {{ [key: string]: string | TranslationPluralForms }} translations - Key-value pairs of the translation strings to use.\n   * @param {object} [config] - Configuration options for the function.\n   * @param {string | null} [config.locale] - An overriding locale for the PluralRules functionality.\n   */\n  constructor(translations = {}, config = {}) {\n    // Make list of translations available throughout function\n    this.translations = translations\n\n    // The locale to use for PluralRules and NumberFormat\n    this.locale = config.locale ?? (document.documentElement.lang || 'en')\n  }\n\n  /**\n   * The most used function - takes the key for a given piece of UI text and\n   * returns the appropriate string.\n   *\n   * @param {string} lookupKey - The lookup key of the string to use.\n   * @param {{ [key: string]: unknown }} [options] - Any options passed with the translation string, e.g: for string interpolation.\n   * @returns {string} The appropriate translation string.\n   * @throws {Error} Lookup key required\n   * @throws {Error} Options required for `${}` placeholders\n   */\n  t(lookupKey, options) {\n    if (!lookupKey) {\n      // Print a console error if no lookup key has been provided\n      throw new Error('i18n: lookup key missing')\n    }\n\n    // Fetch the translation for that lookup key\n    let translation = this.translations[lookupKey]\n\n    // If the `count` option is set, determine which plural suffix is needed and\n    // change the lookupKey to match. We check to see if it's numeric instead of\n    // falsy, as this could legitimately be 0.\n    if (typeof options?.count === 'number' && isObject(translation)) {\n      const translationPluralForm =\n        translation[this.getPluralSuffix(lookupKey, options.count)]\n\n      // Update translation with plural suffix\n      if (translationPluralForm) {\n        translation = translationPluralForm\n      }\n    }\n\n    if (typeof translation === 'string') {\n      // Check for ${} placeholders in the translation string\n      // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec\n      if (translation.match(/%{(.\\S+)}/)) {\n        if (!options) {\n          throw new Error(\n            'i18n: cannot replace placeholders in string if no option data provided'\n          )\n        }\n\n        return this.replacePlaceholders(translation, options)\n      }\n\n      return translation\n    }\n\n    // If the key wasn't found in our translations object,\n    // return the lookup key itself as the fallback\n    return lookupKey\n  }\n\n  /**\n   * Takes a translation string with placeholders, and replaces the placeholders\n   * with the provided data\n   *\n   * @param {string} translationString - The translation string\n   * @param {{ [key: string]: unknown }} options - Any options passed with the translation string, e.g: for string interpolation.\n   * @returns {string} The translation string to output, with $\\{\\} placeholders replaced\n   */\n  replacePlaceholders(translationString, options) {\n    const formatter = Intl.NumberFormat.supportedLocalesOf(this.locale).length\n      ? new Intl.NumberFormat(this.locale)\n      : undefined\n\n    return translationString.replace(\n      /%{(.\\S+)}/g,\n\n      /**\n       * Replace translation string placeholders\n       *\n       * @param {string} placeholderWithBraces - Placeholder with braces\n       * @param {string} placeholderKey - Placeholder key\n       * @returns {string} Placeholder value\n       */\n      function (placeholderWithBraces, placeholderKey) {\n        if (Object.prototype.hasOwnProperty.call(options, placeholderKey)) {\n          const placeholderValue = options[placeholderKey]\n\n          // If a user has passed `false` as the value for the placeholder\n          // treat it as though the value should not be displayed\n          if (\n            placeholderValue === false ||\n            (typeof placeholderValue !== 'number' &&\n              typeof placeholderValue !== 'string')\n          ) {\n            return ''\n          }\n\n          // If the placeholder's value is a number, localise the number formatting\n          if (typeof placeholderValue === 'number') {\n            return formatter\n              ? formatter.format(placeholderValue)\n              : `${placeholderValue}`\n          }\n\n          return placeholderValue\n        }\n\n        throw new Error(\n          `i18n: no data found to replace ${placeholderWithBraces} placeholder in string`\n        )\n      }\n    )\n  }\n\n  /**\n   * Check to see if the browser supports Intl.PluralRules\n   *\n   * It requires all conditions to be met in order to be supported:\n   * - The implementation of Intl supports PluralRules (NOT true in Safari 10â€“12)\n   * - The browser/OS has plural rules for the current locale (browser dependent)\n   *\n   * {@link https://browsersl.ist/#q=supports+es6-module+and+not+supports+intl-pluralrules}\n   *\n   * @returns {boolean} Returns true if all conditions are met. Returns false otherwise.\n   */\n  hasIntlPluralRulesSupport() {\n    return Boolean(\n      'PluralRules' in window.Intl &&\n        Intl.PluralRules.supportedLocalesOf(this.locale).length\n    )\n  }\n\n  /**\n   * Get the appropriate suffix for the plural form.\n   *\n   * Uses Intl.PluralRules (or our own fallback implementation) to get the\n   * 'preferred' form to use for the given count.\n   *\n   * Checks that a translation has been provided for that plural form â€“ if it\n   * hasn't, it'll fall back to the 'other' plural form (unless that doesn't exist\n   * either, in which case an error will be thrown)\n   *\n   * @param {string} lookupKey - The lookup key of the string to use.\n   * @param {number} count - Number used to determine which pluralisation to use.\n   * @returns {PluralRule} The suffix associated with the correct pluralisation for this locale.\n   * @throws {Error} Plural form `.other` required when preferred plural form is missing\n   */\n  getPluralSuffix(lookupKey, count) {\n    // Validate that the number is actually a number.\n    //\n    // Number(count) will turn anything that can't be converted to a Number type\n    // into 'NaN'. isFinite filters out NaN, as it isn't a finite number.\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-conversion\n    count = Number(count)\n    if (!isFinite(count)) {\n      return 'other'\n    }\n\n    // Fetch the translation for that lookup key\n    const translation = this.translations[lookupKey]\n\n    // Check to verify that all the requirements for Intl.PluralRules are met.\n    // If so, we can use that instead of our custom implementation. Otherwise,\n    // use the hardcoded fallback.\n    const preferredForm = this.hasIntlPluralRulesSupport()\n      ? new Intl.PluralRules(this.locale).select(count)\n      : this.selectPluralFormUsingFallbackRules(count)\n\n    // Use the correct plural form if provided\n    if (isObject(translation)) {\n      if (preferredForm in translation) {\n        return preferredForm\n        // Fall back to `other` if the plural form is missing, but log a warning\n        // to the console\n      } else if ('other' in translation) {\n        console.warn(\n          `i18n: Missing plural form \".${preferredForm}\" for \"${this.locale}\" locale. Falling back to \".other\".`\n        )\n\n        return 'other'\n      }\n    }\n\n    // If the required `other` plural form is missing, all we can do is error\n    throw new Error(\n      `i18n: Plural form \".other\" is required for \"${this.locale}\" locale`\n    )\n  }\n\n  /**\n   * Get the plural form using our fallback implementation\n   *\n   * This is split out into a separate function to make it easier to test the\n   * fallback behaviour in an environment where Intl.PluralRules exists.\n   *\n   * @param {number} count - Number used to determine which pluralisation to use.\n   * @returns {PluralRule} The pluralisation form for count in this locale.\n   */\n  selectPluralFormUsingFallbackRules(count) {\n    // Currently our custom code can only handle positive integers, so let's\n    // make sure our number is one of those.\n    count = Math.abs(Math.floor(count))\n\n    const ruleset = this.getPluralRulesForLocale()\n\n    if (ruleset) {\n      return I18n.pluralRules[ruleset](count)\n    }\n\n    return 'other'\n  }\n\n  /**\n   * Work out which pluralisation rules to use for the current locale\n   *\n   * The locale may include a regional indicator (such as en-GB), but we don't\n   * usually care about this part, as pluralisation rules are usually the same\n   * regardless of region. There are exceptions, however, (e.g. Portuguese) so\n   * this searches by both the full and shortened locale codes, just to be sure.\n   *\n   * @returns {string | undefined} The name of the pluralisation rule to use (a key for one\n   *   of the functions in this.pluralRules)\n   */\n  getPluralRulesForLocale() {\n    const localeShort = this.locale.split('-')[0]\n\n    // Look through the plural rules map to find which `pluralRule` is\n    // appropriate for our current `locale`.\n    for (const pluralRule in I18n.pluralRulesMap) {\n      const languages = I18n.pluralRulesMap[pluralRule]\n      if (languages.includes(this.locale) || languages.includes(localeShort)) {\n        return pluralRule\n      }\n    }\n  }\n\n  /**\n   * Map of plural rules to languages where those rules apply.\n   *\n   * Note: These groups are named for the most dominant or recognisable language\n   * that uses each system. The groupings do not imply that the languages are\n   * related to one another. Many languages have evolved the same systems\n   * independently of one another.\n   *\n   * Code to support more languages can be found in the i18n spike:\n   * {@link https://github.com/alphagov/govuk-frontend/blob/spike-i18n-support/src/govuk/i18n.mjs}\n   *\n   * Languages currently supported:\n   *\n   * Arabic: Arabic (ar)\n   * Chinese: Burmese (my), Chinese (zh), Indonesian (id), Japanese (ja),\n   *   Javanese (jv), Korean (ko), Malay (ms), Thai (th), Vietnamese (vi)\n   * French: Armenian (hy), Bangla (bn), French (fr), Gujarati (gu), Hindi (hi),\n   *   Persian Farsi (fa), Punjabi (pa), Zulu (zu)\n   * German: Afrikaans (af), Albanian (sq), Azerbaijani (az), Basque (eu),\n   *   Bulgarian (bg), Catalan (ca), Danish (da), Dutch (nl), English (en),\n   *   Estonian (et), Finnish (fi), Georgian (ka), German (de), Greek (el),\n   *   Hungarian (hu), Luxembourgish (lb), Norwegian (no), Somali (so),\n   *   Swahili (sw), Swedish (sv), Tamil (ta), Telugu (te), Turkish (tr),\n   *   Urdu (ur)\n   * Irish: Irish Gaelic (ga)\n   * Russian: Russian (ru), Ukrainian (uk)\n   * Scottish: Scottish Gaelic (gd)\n   * Spanish: European Portuguese (pt-PT), Italian (it), Spanish (es)\n   * Welsh: Welsh (cy)\n   *\n   * @type {{ [key: string]: string[] }}\n   */\n  static pluralRulesMap = {\n    arabic: ['ar'],\n    chinese: ['my', 'zh', 'id', 'ja', 'jv', 'ko', 'ms', 'th', 'vi'],\n    french: ['hy', 'bn', 'fr', 'gu', 'hi', 'fa', 'pa', 'zu'],\n    german: [\n      'af',\n      'sq',\n      'az',\n      'eu',\n      'bg',\n      'ca',\n      'da',\n      'nl',\n      'en',\n      'et',\n      'fi',\n      'ka',\n      'de',\n      'el',\n      'hu',\n      'lb',\n      'no',\n      'so',\n      'sw',\n      'sv',\n      'ta',\n      'te',\n      'tr',\n      'ur'\n    ],\n    irish: ['ga'],\n    russian: ['ru', 'uk'],\n    scottish: ['gd'],\n    spanish: ['pt-PT', 'it', 'es'],\n    welsh: ['cy']\n  }\n\n  /**\n   * Different pluralisation rule sets\n   *\n   * Returns the appropriate suffix for the plural form associated with `n`.\n   * Possible suffixes: 'zero', 'one', 'two', 'few', 'many', 'other' (the actual\n   * meaning of each differs per locale). 'other' should always exist, even in\n   * languages without plurals, such as Chinese.\n   * {@link https://cldr.unicode.org/index/cldr-spec/plural-rules}\n   *\n   * The count must be a positive integer. Negative numbers and decimals aren't accounted for\n   *\n   * @type {{ [key: string]: (count: number) => PluralRule }}\n   */\n  static pluralRules = {\n    arabic(n) {\n      if (n === 0) {\n        return 'zero'\n      }\n      if (n === 1) {\n        return 'one'\n      }\n      if (n === 2) {\n        return 'two'\n      }\n      if (n % 100 >= 3 && n % 100 <= 10) {\n        return 'few'\n      }\n      if (n % 100 >= 11 && n % 100 <= 99) {\n        return 'many'\n      }\n      return 'other'\n    },\n    chinese() {\n      return 'other'\n    },\n    french(n) {\n      return n === 0 || n === 1 ? 'one' : 'other'\n    },\n    german(n) {\n      return n === 1 ? 'one' : 'other'\n    },\n    irish(n) {\n      if (n === 1) {\n        return 'one'\n      }\n      if (n === 2) {\n        return 'two'\n      }\n      if (n >= 3 && n <= 6) {\n        return 'few'\n      }\n      if (n >= 7 && n <= 10) {\n        return 'many'\n      }\n      return 'other'\n    },\n    russian(n) {\n      const lastTwo = n % 100\n      const last = lastTwo % 10\n      if (last === 1 && lastTwo !== 11) {\n        return 'one'\n      }\n      if (last >= 2 && last <= 4 && !(lastTwo >= 12 && lastTwo <= 14)) {\n        return 'few'\n      }\n      if (\n        last === 0 ||\n        (last >= 5 && last <= 9) ||\n        (lastTwo >= 11 && lastTwo <= 14)\n      ) {\n        return 'many'\n      }\n      // Note: The 'other' suffix is only used by decimal numbers in Russian.\n      // We don't anticipate it being used, but it's here for consistency.\n      return 'other'\n    },\n    scottish(n) {\n      if (n === 1 || n === 11) {\n        return 'one'\n      }\n      if (n === 2 || n === 12) {\n        return 'two'\n      }\n      if ((n >= 3 && n <= 10) || (n >= 13 && n <= 19)) {\n        return 'few'\n      }\n      return 'other'\n    },\n    spanish(n) {\n      if (n === 1) {\n        return 'one'\n      }\n      if (n % 1000000 === 0 && n !== 0) {\n        return 'many'\n      }\n      return 'other'\n    },\n    welsh(n) {\n      if (n === 0) {\n        return 'zero'\n      }\n      if (n === 1) {\n        return 'one'\n      }\n      if (n === 2) {\n        return 'two'\n      }\n      if (n === 3) {\n        return 'few'\n      }\n      if (n === 6) {\n        return 'many'\n      }\n      return 'other'\n    }\n  }\n}\n\n/**\n * Plural rule category mnemonic tags\n *\n * @typedef {'zero' | 'one' | 'two' | 'few' | 'many' | 'other'} PluralRule\n */\n\n/**\n * Translated message by plural rule they correspond to.\n *\n * Allows to group pluralised messages under a single key when passing\n * translations to a component's constructor\n *\n * @typedef {object} TranslationPluralForms\n * @property {string} [other] - General plural form\n * @property {string} [zero] - Plural form used with 0\n * @property {string} [one] - Plural form used with 1\n * @property {string} [two] - Plural form used with 2\n * @property {string} [few] - Plural form used for a few\n * @property {string} [many] - Plural form used for many\n */\n","import { normaliseOptions } from './common/configuration/index.mjs'\nimport { isObject, isSupported } from './common/index.mjs'\nimport {\n  Button,\n  CharacterCount,\n  Checkboxes,\n  ErrorSummary,\n  Header,\n  NotificationBanner,\n  Radios,\n  SkipLink,\n  Tabs\n} from './components/index.mjs'\nimport { ElementError, SupportError } from './errors/index.mjs'\n\n/**\n * Initialise all components\n *\n * Use the `data-module` attributes to find and initialise all of the\n * components provided as part of NHS.UK frontend.\n *\n * @overload\n * @param {Config} [config] - Config for all components (with optional scope)\n * @returns {void}\n */\n\n/**\n * @overload\n * @param {Element | Document | null} [$scope] - Scope of the document to search within\n * @returns {void}\n */\n\n/**\n * @param {Config | Element | Document | null} [scopeOrConfig]\n */\nexport function initAll(scopeOrConfig = {}) {\n  const config = isObject(scopeOrConfig) ? scopeOrConfig : {}\n\n  // Extract initialisation options\n  const options = normaliseOptions(scopeOrConfig)\n\n  try {\n    // Skip initialisation when NHS.UK frontend is not supported\n    if (!isSupported()) {\n      throw new SupportError()\n    }\n\n    // Users can initialise NHS.UK frontend in certain sections of the page\n    // unless the scope is null (for example, query selector not found)\n    if (options.scope === null) {\n      throw new ElementError({\n        element: options.scope,\n        identifier: 'NHS.UK frontend scope element (`$scope`)'\n      })\n    }\n  } catch (error) {\n    if (options.onError) {\n      options.onError(error, {\n        config\n      })\n    } else {\n      console.log(error)\n    }\n\n    return\n  }\n\n  const components = /** @type {const} */ ([\n    [Button, config.button],\n    [CharacterCount, config.characterCount],\n    [Checkboxes],\n    [ErrorSummary, config.errorSummary],\n    [Header],\n    [NotificationBanner, config.notificationBanner],\n    [Radios],\n    [SkipLink],\n    [Tabs]\n  ])\n\n  components.forEach(([Component, componentConfig]) => {\n    createAll(Component, componentConfig, options)\n  })\n}\n\n/**\n * Create all instances of a specific component on the page\n *\n * Uses the `data-module` attribute to find all elements matching the specified\n * component on the page, creating instances of the component object for each\n * of them.\n *\n * Any component errors will be caught and logged to the console.\n *\n * @template {CompatibleClass | CompatibleClass<typeof ConfigurableComponent>} ComponentClass\n * @overload\n * @param {ComponentClass} Component - Component class to initialise\n * @param {ComponentConfig<ComponentClass>} [config] - Config supplied to component\n * @param {CreateAllOptions<ComponentClass>} [options] - Options including scope of the document to search within and callback function if error throw by component on init\n * @returns {InstanceType<ComponentClass>[]} Array of initialised components\n */\n\n/**\n * @template {CompatibleClass | CompatibleClass<typeof ConfigurableComponent>} ComponentClass\n * @overload\n * @param {ComponentClass} Component - Component class to initialise\n * @param {ComponentConfig<ComponentClass>} [config] - Config supplied to component\n * @param {OnErrorCallback<ComponentClass>} [onError] - Initialisation error callback\n * @returns {InstanceType<ComponentClass>[]} Array of initialised components\n */\n\n/**\n * @template {CompatibleClass | CompatibleClass<typeof ConfigurableComponent>} ComponentClass\n * @overload\n * @param {ComponentClass} Component - Component class to initialise\n * @param {ComponentConfig<ComponentClass>} [config] - Config supplied to component\n * @param {Element | null} [$scope] - Scope of the document to search within\n * @returns {InstanceType<ComponentClass>[]} Array of initialised components\n */\n\n/**\n * @template {CompatibleClass | CompatibleClass<typeof ConfigurableComponent>} ComponentClass\n * @param {ComponentClass} Component - Component class to initialise\n * @param {ComponentConfig<ComponentClass>} [config] - Config supplied to component\n * @param {CreateAllOptions<ComponentClass> | OnErrorCallback<ComponentClass> | Element | Document | null} [scopeOrOptions]\n */\nexport function createAll(Component, config, scopeOrOptions) {\n  let /** @type {NodeListOf<Element> | undefined} */ $elements\n\n  // Extract initialisation options\n  const options = normaliseOptions(scopeOrOptions)\n\n  try {\n    // Skip initialisation when NHS.UK frontend is not supported\n    if (!isSupported()) {\n      throw new SupportError()\n    }\n\n    // Users can initialise NHS.UK frontend in certain sections of the page\n    // unless the scope is null (for example, query selector not found)\n    if (options.scope === null) {\n      throw new ElementError({\n        element: options.scope,\n        component: Component,\n        identifier: 'Scope element (`$scope`)'\n      })\n    }\n\n    $elements = options.scope?.querySelectorAll(\n      `[data-module=\"${Component.moduleName}\"]`\n    )\n  } catch (error) {\n    if (options.onError) {\n      options.onError(error, {\n        component: Component,\n        config\n      })\n    } else {\n      console.log(error)\n    }\n\n    return []\n  }\n\n  return Array.from($elements ?? [])\n    .map(($element) => {\n      try {\n        return /** @type {InstanceType<ComponentClass>} */ (\n          // Only pass config to components that accept it\n          !!config && 'defaults' in Component\n            ? new Component($element, config)\n            : new Component($element)\n        )\n      } catch (error) {\n        if (options.onError) {\n          options.onError(error, {\n            element: $element,\n            component: Component,\n            config\n          })\n        } else {\n          console.log(error)\n        }\n\n        return null\n      }\n    })\n    .filter((instance) => !!instance) // Exclude components that errored\n}\n\nexport * from './i18n.mjs'\nexport * from './common/index.mjs'\nexport * from './components/index.mjs'\nexport * from './errors/index.mjs'\n\n/**\n * NHS.UK frontend config for all components via `initAll()`\n *\n * @typedef {object} Config\n * @property {Element | Document | null} [scope] - Scope of the document to search within\n * @property {OnErrorCallback<CompatibleClass>} [onError] - Initialisation error callback\n * @property {ComponentConfig<typeof Button>} [button] - Button config\n * @property {ComponentConfig<typeof CharacterCount>} [characterCount] - Character count config\n * @property {ComponentConfig<typeof ErrorSummary>} [errorSummary] - Error Summary config\n * @property {ComponentConfig<typeof NotificationBanner>} [notificationBanner] - Notification Banner config\n */\n\n/**\n * Component config\n *\n * @template {CompatibleClass} ComponentClass\n * @typedef {ConstructorParameters<ComponentClass>[1]} ComponentConfig\n */\n\n/**\n * Initialisation error context\n *\n * Contains the element, component class and configuration\n *\n * @template {CompatibleClass} ComponentClass\n * @typedef {object} ErrorContext\n * @property {Element} [element] - Element used for component module initialisation\n * @property {ComponentClass} [component] - Class of component\n * @property {Config | ComponentConfig<ComponentClass>} config - Config supplied to components\n */\n\n/**\n * Initialisation error callback\n *\n * @template {CompatibleClass} ComponentClass\n * @callback OnErrorCallback\n * @param {unknown} error - Thrown error\n * @param {ErrorContext<ComponentClass>} context - Object containing the element, component class and configuration\n */\n\n/**\n * Initialisation options\n *\n * @template {CompatibleClass} ComponentClass\n * @typedef {object} CreateAllOptions\n * @property {Element | Document | null} [scope] - Scope of the document to search within\n * @property {OnErrorCallback<ComponentClass>} [onError] - Initialisation error callback\n */\n\n/**\n * @import { CompatibleClass } from './component.mjs'\n * @import { ConfigurableComponent } from './configurable-component.mjs'\n */\n"],"names":["closestAttributeValue","$element","attributeName","$closestElementWithAttribute","closest","getAttribute","version","toggleConditionalInput","$input","className","HTMLInputElement","targetId","target","document","getElementById","setAttribute","checked","toString","classList","toggle","getBreakpoint","name","property","value","window","getComputedStyle","documentElement","getPropertyValue","undefined","setFocus","options","isFocusable","onBlur","removeEventListener","call","removeAttribute","addEventListener","onFocus","onBeforeFocus","focus","isInitialised","$root","moduleName","HTMLElement","hasAttribute","isSupported","$scope","body","contains","isObject","option","Array","isArray","isScope","Element","Document","formatErrorMessage","Component","message","normaliseString","trimmedValue","trim","output","outputType","type","includes","length","isFinite","Number","extractConfigByNamespace","schema","dataset","namespace","properties","newObject","key","Object","entries","current","keyParts","split","index","mergeConfigs","configObjects","formattedConfigObject","configObject","keys","override","NHSUKFrontendError","Error","constructor","args","super","this","SupportError","supportMessage","HTMLScriptElement","prototype","ConfigError","ElementError","component","identifier","element","expectedType","InitError","componentOrMessage","normaliseOptions","scopeOrOptions","onError","scope","childConstructor","elementType","checkSupport","checkInitialised","ConfigurableComponent","config","defaults","datasetConfig","out","entry","field","normaliseDataset","configOverride","_datasetConfig","Button","debounceFormSubmitTimer","event","handleKeyDown","debounce","preventDefault","click","preventDoubleClick","setTimeout","DEBOUNCE_TIMEOUT_IN_SECONDS","initButtons","$buttons","querySelectorAll","forEach","freeze","CharacterCount","_ref","_this$config$maxwords","lastInputTimestamp","lastInputValue","valueChecker","$textarea","querySelector","HTMLTextAreaElement","fallbackLimitMessageId","id","$fallbackLimitMessage","$errorMessage","insertAdjacentElement","$screenReaderCountMessage","createElement","$visibleCountMessage","add","maxLength","maxwords","maxlength","Infinity","bindChangeEvents","updateCountMessage","count","text","_text$match","match","handleKeyUp","handleFocus","handleBlur","checkIfValueChanged","updateVisibleCountMessage","updateScreenReaderCountMessage","isError","isOverThreshold","innerHTML","formattedUpdateMessage","remainingNumber","charVerb","charNoun","displayNumber","Math","abs","_this$config$threshol","currentLength","thresholdPercent","threshold","Date","now","setInterval","clearInterval","initCharacterCounts","$characterCounts","Checkboxes","$inputs","syncAllConditionalReveals","handleClick","syncConditionalRevealWithInputState","unCheckAllInputsExcept","checkboxExclusiveGroup","exclusiveGroup","selectorGroup","$inputWithSameName","form","setInputState","unCheckExclusiveInputs","$exclusiveInput","$clickedInput","initCheckboxes","$checkboxes","ErrorSummary","disableAutoFocus","configOverrides","console","warn","focusOnPageLoad","getAssociatedLegendOrLabel","_document$querySelect","$fieldset","$legends","getElementsByTagName","$candidateLegend","legendTop","getBoundingClientRect","top","inputRect","height","innerHeight","focusTarget","$target","HTMLAnchorElement","inputId","hash","replace","$legendOrLabel","scrollIntoView","preventScroll","initErrorSummary","Header","$navigation","$navigationList","$navigationItems","$menu","$menuToggle","$menuList","width","breakpoints","updateNavigationTimer","menuIsEnabled","menuIsOpen","HTMLButtonElement","handleEscapeKey","onEscapeKey","bind","handleUpdateNavigation","updateNavigation","handleToggleMenu","toggleMenu","setupNavigation","resetNavigation","right","breakpoint","insertBefore","offsetWidth","push","clearTimeout","setupMenu","parentElement","appendChild","enableMenu","disableMenu","closeMenu","style","removeProperty","openMenu","setProperty","offsetHeight","filter","initHeader","NotificationBanner","initNotificationBanners","$notificationBanners","$notificationBanner","Radios","$allInputs","$clickedInputForm","$clickedInputName","hasSameFormOwner","initRadios","$radios","SkipLink","_this$$root$getAttrib","href","linkedElementId","$linkedElement","remove","initSkipLinks","$skipLinks","Tabs","jsHiddenClass","changingHash","mql","$tabs","boundTabClick","onTabClick","boundTabKeydown","onTabKeydown","boundOnHashChange","onHashChange","$tabList","$tabListItems","setupResponsiveChecks","matchMedia","checkMode","addListener","_this$mql","matches","setup","teardown","_this$getTab","$item","$tab","setAttributes","hideTab","$activeTab","getTab","location","showTab","unsetAttributes","$tabWithHash","$previousTab","getCurrentTab","unhighlightTab","hidePanel","highlightTab","showPanel","panelId","$panel","getPanel","$currentTab","$newTab","currentTarget","createHistoryEntry","activatePreviousTab","activateNextTab","$nextTabListItem","nextElementSibling","$nextTab","$previousTabListItem","previousElementSibling","initTabs","I18n","translations","_config$locale","locale","lang","t","lookupKey","translation","translationPluralForm","getPluralSuffix","replacePlaceholders","translationString","formatter","Intl","NumberFormat","supportedLocalesOf","placeholderWithBraces","placeholderKey","hasOwnProperty","placeholderValue","format","hasIntlPluralRulesSupport","Boolean","PluralRules","preferredForm","select","selectPluralFormUsingFallbackRules","floor","ruleset","getPluralRulesForLocale","pluralRules","localeShort","pluralRule","pluralRulesMap","languages","initAll","scopeOrConfig","error","log","button","characterCount","errorSummary","notificationBanner","componentConfig","createAll","$elements","_options$scope","from","map","instance","arabic","chinese","french","german","irish","russian","scottish","spanish","welsh","n","lastTwo","last"],"mappings":"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"}