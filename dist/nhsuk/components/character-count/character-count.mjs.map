{"version":3,"file":"character-count.mjs","sources":["../../../../src/nhsuk/components/character-count/character-count.mjs"],"sourcesContent":["/**\n * Character count component\n */\nexport class CharacterCount {\n  /**\n   * @param {Element | null} [$root] - HTML element to use for component\n   */\n  constructor($root) {\n    if (!$root || !($root instanceof HTMLElement)) {\n      return this\n    }\n\n    const $textarea = $root.querySelector('.nhsuk-js-character-count')\n    if (\n      !$textarea ||\n      !(\n        $textarea instanceof HTMLTextAreaElement ||\n        $textarea instanceof HTMLInputElement\n      )\n    ) {\n      return this\n    }\n\n    this.$root = $root\n    this.$textarea = $textarea\n    this.$visibleCountMessage = null\n    this.$screenReaderCountMessage = null\n    this.lastInputTimestamp = null\n\n    // Check for module\n    const $fallbackLimitMessage = document.getElementById(\n      `${this.$textarea.id}-info`\n    )\n\n    // Move the fallback count message to be immediately after the textarea\n    // Kept for backwards compatibility\n    this.$textarea.insertAdjacentElement('afterend', $fallbackLimitMessage)\n\n    // Create the *screen reader* specific live-updating counter\n    // This doesn't need any styling classes, as it is never visible\n    const $screenReaderCountMessage = document.createElement('div')\n    $screenReaderCountMessage.className =\n      'nhsuk-character-count__sr-status nhsuk-u-visually-hidden'\n    $screenReaderCountMessage.setAttribute('aria-live', 'polite')\n    this.$screenReaderCountMessage = $screenReaderCountMessage\n    $fallbackLimitMessage.insertAdjacentElement(\n      'afterend',\n      $screenReaderCountMessage\n    )\n\n    // Create our live-updating counter element, copying the classes from the\n    // fallback element for backwards compatibility as these may have been configured\n    const $visibleCountMessage = document.createElement('div')\n    $visibleCountMessage.className = $fallbackLimitMessage.className\n    $visibleCountMessage.classList.add('nhsuk-character-count__status')\n    $visibleCountMessage.setAttribute('aria-hidden', 'true')\n    this.$visibleCountMessage = $visibleCountMessage\n    $fallbackLimitMessage.insertAdjacentElement(\n      'afterend',\n      $visibleCountMessage\n    )\n\n    // Hide the fallback limit message\n    $fallbackLimitMessage.classList.add('nhsuk-u-visually-hidden')\n\n    // Read options set using dataset ('data-' values)\n    this.options = CharacterCount.getDataset(this.$root)\n\n    // Determine the limit attribute (characters or words)\n    let countAttribute = this.defaults.characterCountAttribute\n    if (this.options.maxwords) {\n      countAttribute = this.defaults.wordCountAttribute\n    }\n\n    // Save the element limit\n    this.maxLength = this.$root.getAttribute(countAttribute)\n\n    // Check for limit\n    if (!this.maxLength) {\n      return this\n    }\n\n    // Remove hard limit if set\n    this.$textarea.removeAttribute('maxlength')\n\n    this.bindChangeEvents()\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of the character count is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to manually update it after the pageshow event\n    // in browsers that support it.\n    if ('onpageshow' in window) {\n      window.addEventListener('pageshow', this.updateCountMessage.bind(this))\n    } else {\n      window.addEventListener(\n        'DOMContentLoaded',\n        this.updateCountMessage.bind(this)\n      )\n    }\n    this.updateCountMessage()\n  }\n\n  // Read data attributes\n  static getDataset(element) {\n    const dataset = {}\n    const { attributes } = element\n    if (attributes) {\n      // eslint-disable-next-line @typescript-eslint/prefer-for-of\n      for (let i = 0; i < attributes.length; i++) {\n        const attribute = attributes[i]\n        const match = attribute.name.match(/^data-(.+)/)\n        if (match) {\n          dataset[match[1]] = attribute.value\n        }\n      }\n    }\n    return dataset\n  }\n\n  // Counts characters or words in text\n  count(text) {\n    let length\n    if (this.options.maxwords) {\n      const tokens = text.match(/\\S+/g) || [] // Matches consecutive non-whitespace chars\n      length = tokens.length // eslint-disable-line prefer-destructuring\n    } else {\n      length = text.length // eslint-disable-line prefer-destructuring\n    }\n    return length\n  }\n\n  // Bind input propertychange to the elements and update based on the change\n  bindChangeEvents() {\n    const { $textarea } = this\n    $textarea.addEventListener('keyup', this.handleKeyUp.bind(this))\n\n    // Bind focus/blur events to start/stop polling\n    $textarea.addEventListener('focus', this.handleFocus.bind(this))\n    $textarea.addEventListener('blur', this.handleBlur.bind(this))\n  }\n\n  // Speech recognition software such as Dragon NaturallySpeaking will modify the\n  // fields by directly changing its `value`. These changes don't trigger events\n  // in JavaScript, so we need to poll to handle when and if they occur.\n  checkIfValueChanged() {\n    if (!this.$textarea.oldValue) {\n      this.$textarea.oldValue = ''\n    }\n    if (this.$textarea.value !== this.$textarea.oldValue) {\n      this.$textarea.oldValue = this.$textarea.value\n      this.updateCountMessage()\n    }\n  }\n\n  // Helper function to update both the visible and screen reader-specific\n  // counters simultaneously (e.g. on init)\n  updateCountMessage() {\n    this.updateVisibleCountMessage()\n    this.updateScreenReaderCountMessage()\n  }\n\n  // Update visible counter\n  updateVisibleCountMessage() {\n    const { $textarea } = this\n    const { $visibleCountMessage } = this\n    const remainingNumber = this.maxLength - this.count($textarea.value)\n\n    // If input is over the threshold, remove the disabled class which renders the\n    // counter invisible.\n    if (this.isOverThreshold()) {\n      $visibleCountMessage.classList.remove(\n        'nhsuk-character-count__message--disabled'\n      )\n    } else {\n      $visibleCountMessage.classList.add(\n        'nhsuk-character-count__message--disabled'\n      )\n    }\n\n    // Update styles\n    if (remainingNumber < 0) {\n      $textarea.classList.add('nhsuk-textarea--error')\n      $visibleCountMessage.classList.remove('nhsuk-hint')\n      $visibleCountMessage.classList.add('nhsuk-error-message')\n    } else {\n      $textarea.classList.remove('nhsuk-textarea--error')\n      $visibleCountMessage.classList.remove('nhsuk-error-message')\n      $visibleCountMessage.classList.add('nhsuk-hint')\n    }\n\n    // Update message\n    $visibleCountMessage.innerHTML = this.formattedUpdateMessage()\n  }\n\n  // Update screen reader-specific counter\n  updateScreenReaderCountMessage() {\n    const { $screenReaderCountMessage } = this\n\n    // If over the threshold, remove the aria-hidden attribute, allowing screen\n    // readers to announce the content of the element.\n    if (this.isOverThreshold()) {\n      $screenReaderCountMessage.removeAttribute('aria-hidden')\n    } else {\n      $screenReaderCountMessage.setAttribute('aria-hidden', true)\n    }\n\n    // Update message\n    $screenReaderCountMessage.innerHTML = this.formattedUpdateMessage()\n  }\n\n  // Format update message\n  formattedUpdateMessage() {\n    const { $textarea } = this\n    const { options } = this\n    const remainingNumber = this.maxLength - this.count($textarea.value)\n\n    let charVerb = 'remaining'\n    let charNoun = 'character'\n    let displayNumber = remainingNumber\n    if (options.maxwords) {\n      charNoun = 'word'\n    }\n    charNoun += remainingNumber === -1 || remainingNumber === 1 ? '' : 's'\n\n    charVerb = remainingNumber < 0 ? 'too many' : 'remaining'\n    displayNumber = Math.abs(remainingNumber)\n\n    return `You have ${displayNumber} ${charNoun} ${charVerb}`\n  }\n\n  // Checks whether the value is over the configured threshold for the input.\n  // If there is no configured threshold, it is set to 0 and this function will\n  // always return true.\n  isOverThreshold() {\n    const { $textarea } = this\n    const { options } = this\n\n    // Determine the remaining number of characters/words\n    const currentLength = this.count($textarea.value)\n    const { maxLength } = this\n\n    // Set threshold if presented in options\n    const thresholdPercent = options.threshold ? options.threshold : 0\n    const thresholdValue = (maxLength * thresholdPercent) / 100\n\n    return thresholdValue <= currentLength\n  }\n\n  // Update the visible character counter and keep track of when the last update\n  // happened for each keypress\n  handleKeyUp() {\n    this.updateVisibleCountMessage()\n    this.lastInputTimestamp = Date.now()\n  }\n\n  handleFocus() {\n    // If the field is focused, and a keyup event hasn't been detected for at\n    // least 1000 ms (1 second), then run the manual change check.\n    // This is so that the update triggered by the manual comparison doesn't\n    // conflict with debounced KeyboardEvent updates.\n    this.valueChecker = setInterval(() => {\n      if (\n        !this.lastInputTimestamp ||\n        Date.now() - 500 >= this.lastInputTimestamp\n      ) {\n        this.checkIfValueChanged()\n      }\n    }, 1000)\n  }\n\n  handleBlur() {\n    // Cancel value checking on blur\n    clearInterval(this.valueChecker)\n  }\n}\n\nCharacterCount.prototype.defaults = {\n  characterCountAttribute: 'data-maxlength',\n  wordCountAttribute: 'data-maxwords'\n}\n\n/**\n * Initialise character count component\n *\n * @param {object} [options]\n * @param {Element | Document | null} [options.scope] - Scope of the document to search within\n */\nexport function initCharacterCounts(options = {}) {\n  const $scope = options.scope || document\n  const $characterCounts = $scope.querySelectorAll(\n    '[data-module=\"nhsuk-character-count\"]'\n  )\n\n  $characterCounts.forEach(($root) => {\n    new CharacterCount($root)\n  })\n}\n"],"names":["CharacterCount","constructor","$root","HTMLElement","$textarea","querySelector","HTMLTextAreaElement","HTMLInputElement","$visibleCountMessage","$screenReaderCountMessage","lastInputTimestamp","$fallbackLimitMessage","document","getElementById","id","insertAdjacentElement","createElement","className","setAttribute","classList","add","options","getDataset","countAttribute","defaults","characterCountAttribute","maxwords","wordCountAttribute","maxLength","getAttribute","removeAttribute","bindChangeEvents","window","addEventListener","updateCountMessage","bind","element","dataset","attributes","i","length","attribute","match","name","value","count","text","tokens","handleKeyUp","handleFocus","handleBlur","checkIfValueChanged","oldValue","updateVisibleCountMessage","updateScreenReaderCountMessage","remainingNumber","isOverThreshold","remove","innerHTML","formattedUpdateMessage","charVerb","charNoun","displayNumber","Math","abs","currentLength","thresholdPercent","threshold","thresholdValue","Date","now","valueChecker","setInterval","clearInterval","prototype","initCharacterCounts","$scope","scope","$characterCounts","querySelectorAll","forEach"],"mappings":"AAAA;AACA;AACA;AACO,MAAMA,cAAc,CAAC;AAC1B;AACF;AACA;EACEC,WAAWA,CAACC,KAAK,EAAE;IACjB,IAAI,CAACA,KAAK,IAAI,EAAEA,KAAK,YAAYC,WAAW,CAAC,EAAE;AAC7C,MAAA,OAAO,IAAI;AACb;AAEA,IAAA,MAAMC,SAAS,GAAGF,KAAK,CAACG,aAAa,CAAC,2BAA2B,CAAC;AAClE,IAAA,IACE,CAACD,SAAS,IACV,EACEA,SAAS,YAAYE,mBAAmB,IACxCF,SAAS,YAAYG,gBAAgB,CACtC,EACD;AACA,MAAA,OAAO,IAAI;AACb;IAEA,IAAI,CAACL,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACE,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACI,oBAAoB,GAAG,IAAI;IAChC,IAAI,CAACC,yBAAyB,GAAG,IAAI;IACrC,IAAI,CAACC,kBAAkB,GAAG,IAAI;;AAE9B;AACA,IAAA,MAAMC,qBAAqB,GAAGC,QAAQ,CAACC,cAAc,CACnD,CAAA,EAAG,IAAI,CAACT,SAAS,CAACU,EAAE,OACtB,CAAC;;AAED;AACA;IACA,IAAI,CAACV,SAAS,CAACW,qBAAqB,CAAC,UAAU,EAAEJ,qBAAqB,CAAC;;AAEvE;AACA;AACA,IAAA,MAAMF,yBAAyB,GAAGG,QAAQ,CAACI,aAAa,CAAC,KAAK,CAAC;IAC/DP,yBAAyB,CAACQ,SAAS,GACjC,0DAA0D;AAC5DR,IAAAA,yBAAyB,CAACS,YAAY,CAAC,WAAW,EAAE,QAAQ,CAAC;IAC7D,IAAI,CAACT,yBAAyB,GAAGA,yBAAyB;AAC1DE,IAAAA,qBAAqB,CAACI,qBAAqB,CACzC,UAAU,EACVN,yBACF,CAAC;;AAED;AACA;AACA,IAAA,MAAMD,oBAAoB,GAAGI,QAAQ,CAACI,aAAa,CAAC,KAAK,CAAC;AAC1DR,IAAAA,oBAAoB,CAACS,SAAS,GAAGN,qBAAqB,CAACM,SAAS;AAChET,IAAAA,oBAAoB,CAACW,SAAS,CAACC,GAAG,CAAC,+BAA+B,CAAC;AACnEZ,IAAAA,oBAAoB,CAACU,YAAY,CAAC,aAAa,EAAE,MAAM,CAAC;IACxD,IAAI,CAACV,oBAAoB,GAAGA,oBAAoB;AAChDG,IAAAA,qBAAqB,CAACI,qBAAqB,CACzC,UAAU,EACVP,oBACF,CAAC;;AAED;AACAG,IAAAA,qBAAqB,CAACQ,SAAS,CAACC,GAAG,CAAC,yBAAyB,CAAC;;AAE9D;IACA,IAAI,CAACC,OAAO,GAAGrB,cAAc,CAACsB,UAAU,CAAC,IAAI,CAACpB,KAAK,CAAC;;AAEpD;AACA,IAAA,IAAIqB,cAAc,GAAG,IAAI,CAACC,QAAQ,CAACC,uBAAuB;AAC1D,IAAA,IAAI,IAAI,CAACJ,OAAO,CAACK,QAAQ,EAAE;AACzBH,MAAAA,cAAc,GAAG,IAAI,CAACC,QAAQ,CAACG,kBAAkB;AACnD;;AAEA;IACA,IAAI,CAACC,SAAS,GAAG,IAAI,CAAC1B,KAAK,CAAC2B,YAAY,CAACN,cAAc,CAAC;;AAExD;AACA,IAAA,IAAI,CAAC,IAAI,CAACK,SAAS,EAAE;AACnB,MAAA,OAAO,IAAI;AACb;;AAEA;AACA,IAAA,IAAI,CAACxB,SAAS,CAAC0B,eAAe,CAAC,WAAW,CAAC;IAE3C,IAAI,CAACC,gBAAgB,EAAE;;AAEvB;AACA;AACA;AACA;IACA,IAAI,YAAY,IAAIC,MAAM,EAAE;AAC1BA,MAAAA,MAAM,CAACC,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAACC,kBAAkB,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;AACzE,KAAC,MAAM;AACLH,MAAAA,MAAM,CAACC,gBAAgB,CACrB,kBAAkB,EAClB,IAAI,CAACC,kBAAkB,CAACC,IAAI,CAAC,IAAI,CACnC,CAAC;AACH;IACA,IAAI,CAACD,kBAAkB,EAAE;AAC3B;;AAEA;EACA,OAAOZ,UAAUA,CAACc,OAAO,EAAE;IACzB,MAAMC,OAAO,GAAG,EAAE;IAClB,MAAM;AAAEC,MAAAA;AAAW,KAAC,GAAGF,OAAO;AAC9B,IAAA,IAAIE,UAAU,EAAE;AACd;AACA,MAAA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,UAAU,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;AAC1C,QAAA,MAAME,SAAS,GAAGH,UAAU,CAACC,CAAC,CAAC;QAC/B,MAAMG,KAAK,GAAGD,SAAS,CAACE,IAAI,CAACD,KAAK,CAAC,YAAY,CAAC;AAChD,QAAA,IAAIA,KAAK,EAAE;UACTL,OAAO,CAACK,KAAK,CAAC,CAAC,CAAC,CAAC,GAAGD,SAAS,CAACG,KAAK;AACrC;AACF;AACF;AACA,IAAA,OAAOP,OAAO;AAChB;;AAEA;EACAQ,KAAKA,CAACC,IAAI,EAAE;AACV,IAAA,IAAIN,MAAM;AACV,IAAA,IAAI,IAAI,CAACnB,OAAO,CAACK,QAAQ,EAAE;MACzB,MAAMqB,MAAM,GAAGD,IAAI,CAACJ,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,CAAA;AACvCF,MAAAA,MAAM,GAAGO,MAAM,CAACP,MAAM,CAAA;AACxB,KAAC,MAAM;AACLA,MAAAA,MAAM,GAAGM,IAAI,CAACN,MAAM,CAAA;AACtB;AACA,IAAA,OAAOA,MAAM;AACf;;AAEA;AACAT,EAAAA,gBAAgBA,GAAG;IACjB,MAAM;AAAE3B,MAAAA;AAAU,KAAC,GAAG,IAAI;AAC1BA,IAAAA,SAAS,CAAC6B,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAACe,WAAW,CAACb,IAAI,CAAC,IAAI,CAAC,CAAC;;AAEhE;AACA/B,IAAAA,SAAS,CAAC6B,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAACgB,WAAW,CAACd,IAAI,CAAC,IAAI,CAAC,CAAC;AAChE/B,IAAAA,SAAS,CAAC6B,gBAAgB,CAAC,MAAM,EAAE,IAAI,CAACiB,UAAU,CAACf,IAAI,CAAC,IAAI,CAAC,CAAC;AAChE;;AAEA;AACA;AACA;AACAgB,EAAAA,mBAAmBA,GAAG;AACpB,IAAA,IAAI,CAAC,IAAI,CAAC/C,SAAS,CAACgD,QAAQ,EAAE;AAC5B,MAAA,IAAI,CAAChD,SAAS,CAACgD,QAAQ,GAAG,EAAE;AAC9B;IACA,IAAI,IAAI,CAAChD,SAAS,CAACwC,KAAK,KAAK,IAAI,CAACxC,SAAS,CAACgD,QAAQ,EAAE;MACpD,IAAI,CAAChD,SAAS,CAACgD,QAAQ,GAAG,IAAI,CAAChD,SAAS,CAACwC,KAAK;MAC9C,IAAI,CAACV,kBAAkB,EAAE;AAC3B;AACF;;AAEA;AACA;AACAA,EAAAA,kBAAkBA,GAAG;IACnB,IAAI,CAACmB,yBAAyB,EAAE;IAChC,IAAI,CAACC,8BAA8B,EAAE;AACvC;;AAEA;AACAD,EAAAA,yBAAyBA,GAAG;IAC1B,MAAM;AAAEjD,MAAAA;AAAU,KAAC,GAAG,IAAI;IAC1B,MAAM;AAAEI,MAAAA;AAAqB,KAAC,GAAG,IAAI;AACrC,IAAA,MAAM+C,eAAe,GAAG,IAAI,CAAC3B,SAAS,GAAG,IAAI,CAACiB,KAAK,CAACzC,SAAS,CAACwC,KAAK,CAAC;;AAEpE;AACA;AACA,IAAA,IAAI,IAAI,CAACY,eAAe,EAAE,EAAE;AAC1BhD,MAAAA,oBAAoB,CAACW,SAAS,CAACsC,MAAM,CACnC,0CACF,CAAC;AACH,KAAC,MAAM;AACLjD,MAAAA,oBAAoB,CAACW,SAAS,CAACC,GAAG,CAChC,0CACF,CAAC;AACH;;AAEA;IACA,IAAImC,eAAe,GAAG,CAAC,EAAE;AACvBnD,MAAAA,SAAS,CAACe,SAAS,CAACC,GAAG,CAAC,uBAAuB,CAAC;AAChDZ,MAAAA,oBAAoB,CAACW,SAAS,CAACsC,MAAM,CAAC,YAAY,CAAC;AACnDjD,MAAAA,oBAAoB,CAACW,SAAS,CAACC,GAAG,CAAC,qBAAqB,CAAC;AAC3D,KAAC,MAAM;AACLhB,MAAAA,SAAS,CAACe,SAAS,CAACsC,MAAM,CAAC,uBAAuB,CAAC;AACnDjD,MAAAA,oBAAoB,CAACW,SAAS,CAACsC,MAAM,CAAC,qBAAqB,CAAC;AAC5DjD,MAAAA,oBAAoB,CAACW,SAAS,CAACC,GAAG,CAAC,YAAY,CAAC;AAClD;;AAEA;AACAZ,IAAAA,oBAAoB,CAACkD,SAAS,GAAG,IAAI,CAACC,sBAAsB,EAAE;AAChE;;AAEA;AACAL,EAAAA,8BAA8BA,GAAG;IAC/B,MAAM;AAAE7C,MAAAA;AAA0B,KAAC,GAAG,IAAI;;AAE1C;AACA;AACA,IAAA,IAAI,IAAI,CAAC+C,eAAe,EAAE,EAAE;AAC1B/C,MAAAA,yBAAyB,CAACqB,eAAe,CAAC,aAAa,CAAC;AAC1D,KAAC,MAAM;AACLrB,MAAAA,yBAAyB,CAACS,YAAY,CAAC,aAAa,EAAE,IAAI,CAAC;AAC7D;;AAEA;AACAT,IAAAA,yBAAyB,CAACiD,SAAS,GAAG,IAAI,CAACC,sBAAsB,EAAE;AACrE;;AAEA;AACAA,EAAAA,sBAAsBA,GAAG;IACvB,MAAM;AAAEvD,MAAAA;AAAU,KAAC,GAAG,IAAI;IAC1B,MAAM;AAAEiB,MAAAA;AAAQ,KAAC,GAAG,IAAI;AACxB,IAAA,MAAMkC,eAAe,GAAG,IAAI,CAAC3B,SAAS,GAAG,IAAI,CAACiB,KAAK,CAACzC,SAAS,CAACwC,KAAK,CAAC;IAEpE,IAAIgB,QAAQ,GAAG,WAAW;IAC1B,IAAIC,QAAQ,GAAG,WAAW;IAC1B,IAAIC,aAAa,GAAGP,eAAe;IACnC,IAAIlC,OAAO,CAACK,QAAQ,EAAE;AACpBmC,MAAAA,QAAQ,GAAG,MAAM;AACnB;AACAA,IAAAA,QAAQ,IAAIN,eAAe,KAAK,EAAE,IAAIA,eAAe,KAAK,CAAC,GAAG,EAAE,GAAG,GAAG;AAEtEK,IAAAA,QAAQ,GAAGL,eAAe,GAAG,CAAC,GAAG,UAAU,GAAG,WAAW;AACzDO,IAAAA,aAAa,GAAGC,IAAI,CAACC,GAAG,CAACT,eAAe,CAAC;AAEzC,IAAA,OAAO,YAAYO,aAAa,CAAA,CAAA,EAAID,QAAQ,CAAA,CAAA,EAAID,QAAQ,CAAA,CAAE;AAC5D;;AAEA;AACA;AACA;AACAJ,EAAAA,eAAeA,GAAG;IAChB,MAAM;AAAEpD,MAAAA;AAAU,KAAC,GAAG,IAAI;IAC1B,MAAM;AAAEiB,MAAAA;AAAQ,KAAC,GAAG,IAAI;;AAExB;IACA,MAAM4C,aAAa,GAAG,IAAI,CAACpB,KAAK,CAACzC,SAAS,CAACwC,KAAK,CAAC;IACjD,MAAM;AAAEhB,MAAAA;AAAU,KAAC,GAAG,IAAI;;AAE1B;IACA,MAAMsC,gBAAgB,GAAG7C,OAAO,CAAC8C,SAAS,GAAG9C,OAAO,CAAC8C,SAAS,GAAG,CAAC;AAClE,IAAA,MAAMC,cAAc,GAAIxC,SAAS,GAAGsC,gBAAgB,GAAI,GAAG;IAE3D,OAAOE,cAAc,IAAIH,aAAa;AACxC;;AAEA;AACA;AACAjB,EAAAA,WAAWA,GAAG;IACZ,IAAI,CAACK,yBAAyB,EAAE;AAChC,IAAA,IAAI,CAAC3C,kBAAkB,GAAG2D,IAAI,CAACC,GAAG,EAAE;AACtC;AAEArB,EAAAA,WAAWA,GAAG;AACZ;AACA;AACA;AACA;AACA,IAAA,IAAI,CAACsB,YAAY,GAAGC,WAAW,CAAC,MAAM;AACpC,MAAA,IACE,CAAC,IAAI,CAAC9D,kBAAkB,IACxB2D,IAAI,CAACC,GAAG,EAAE,GAAG,GAAG,IAAI,IAAI,CAAC5D,kBAAkB,EAC3C;QACA,IAAI,CAACyC,mBAAmB,EAAE;AAC5B;KACD,EAAE,IAAI,CAAC;AACV;AAEAD,EAAAA,UAAUA,GAAG;AACX;AACAuB,IAAAA,aAAa,CAAC,IAAI,CAACF,YAAY,CAAC;AAClC;AACF;AAEAvE,cAAc,CAAC0E,SAAS,CAAClD,QAAQ,GAAG;AAClCC,EAAAA,uBAAuB,EAAE,gBAAgB;AACzCE,EAAAA,kBAAkB,EAAE;AACtB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACO,SAASgD,mBAAmBA,CAACtD,OAAO,GAAG,EAAE,EAAE;AAChD,EAAA,MAAMuD,MAAM,GAAGvD,OAAO,CAACwD,KAAK,IAAIjE,QAAQ;AACxC,EAAA,MAAMkE,gBAAgB,GAAGF,MAAM,CAACG,gBAAgB,CAC9C,uCACF,CAAC;AAEDD,EAAAA,gBAAgB,CAACE,OAAO,CAAE9E,KAAK,IAAK;IAClC,IAAIF,cAAc,CAACE,KAAK,CAAC;AAC3B,GAAC,CAAC;AACJ;;;;"}