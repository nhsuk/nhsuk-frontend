{"version":3,"file":"radios.mjs","sources":["../../../../src/nhsuk/components/radios/radios.mjs"],"sourcesContent":["import { toggleConditionalInput } from '../../common.mjs'\n\n/**\n * Radios component\n *\n * Conditionally show content when a radio button is checked\n * Test at http://localhost:3000/nhsuk-frontend/components/radios/conditional.html\n */\nexport class Radios {\n  constructor($root) {\n    if (!$root || !($root instanceof HTMLElement)) {\n      return this\n    }\n\n    this.$root = $root\n\n    const $inputs = this.$root.querySelectorAll('.nhsuk-radios__input')\n    if (!$inputs.length) {\n      return this\n    }\n\n    this.$inputs = $inputs\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event in browsers\n    // that support it.\n    if ('onpageshow' in window) {\n      window.addEventListener('pageshow', () =>\n        this.syncAllConditionalReveals()\n      )\n    } else {\n      window.addEventListener('DOMContentLoaded', () =>\n        this.syncAllConditionalReveals()\n      )\n    }\n\n    // Although we've set up handlers to sync state on the pageshow or\n    // DOMContentLoaded event, init could be called after those events have fired,\n    // for example if they are added to the page dynamically, so sync now too.\n\n    // Attach event handler to radioInputs\n    this.$inputs.forEach((radioButton) => {\n      radioButton.addEventListener('change', () =>\n        this.syncAllConditionalReveals()\n      )\n    })\n  }\n\n  /**\n   * Update all conditional reveals to match checked state\n   */\n  syncAllConditionalReveals() {\n    this.$inputs.forEach((input) =>\n      toggleConditionalInput(input, 'nhsuk-radios__conditional--hidden')\n    )\n  }\n}\n\n/**\n * Initialise radios component\n *\n * @param {object} [options]\n * @param {Element | Document | null} [options.scope] - Scope of the document to search within\n */\nexport function initRadios(options = {}) {\n  const $scope = options.scope || document\n  const $radios = $scope.querySelectorAll('.nhsuk-radios--conditional')\n\n  $radios.forEach(($root) => {\n    new Radios($root)\n  })\n}\n"],"names":["Radios","constructor","$root","HTMLElement","$inputs","querySelectorAll","length","window","addEventListener","syncAllConditionalReveals","forEach","radioButton","input","toggleConditionalInput","initRadios","options","$scope","scope","document","$radios"],"mappings":";;AAEA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMA,MAAM,CAAC;EAClBC,WAAWA,CAACC,KAAK,EAAE;IACjB,IAAI,CAACA,KAAK,IAAI,EAAEA,KAAK,YAAYC,WAAW,CAAC,EAAE;AAC7C,MAAA,OAAO,IAAI;AACb;IAEA,IAAI,CAACD,KAAK,GAAGA,KAAK;IAElB,MAAME,OAAO,GAAG,IAAI,CAACF,KAAK,CAACG,gBAAgB,CAAC,sBAAsB,CAAC;AACnE,IAAA,IAAI,CAACD,OAAO,CAACE,MAAM,EAAE;AACnB,MAAA,OAAO,IAAI;AACb;IAEA,IAAI,CAACF,OAAO,GAAGA,OAAO;;AAEtB;AACA;AACA;AACA;IACA,IAAI,YAAY,IAAIG,MAAM,EAAE;MAC1BA,MAAM,CAACC,gBAAgB,CAAC,UAAU,EAAE,MAClC,IAAI,CAACC,yBAAyB,EAChC,CAAC;AACH,KAAC,MAAM;MACLF,MAAM,CAACC,gBAAgB,CAAC,kBAAkB,EAAE,MAC1C,IAAI,CAACC,yBAAyB,EAChC,CAAC;AACH;;AAEA;AACA;AACA;;AAEA;AACA,IAAA,IAAI,CAACL,OAAO,CAACM,OAAO,CAAEC,WAAW,IAAK;MACpCA,WAAW,CAACH,gBAAgB,CAAC,QAAQ,EAAE,MACrC,IAAI,CAACC,yBAAyB,EAChC,CAAC;AACH,KAAC,CAAC;AACJ;;AAEA;AACF;AACA;AACEA,EAAAA,yBAAyBA,GAAG;AAC1B,IAAA,IAAI,CAACL,OAAO,CAACM,OAAO,CAAEE,KAAK,IACzBC,sBAAsB,CAACD,KAAK,EAAE,mCAAmC,CACnE,CAAC;AACH;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACO,SAASE,UAAUA,CAACC,OAAO,GAAG,EAAE,EAAE;AACvC,EAAA,MAAMC,MAAM,GAAGD,OAAO,CAACE,KAAK,IAAIC,QAAQ;AACxC,EAAA,MAAMC,OAAO,GAAGH,MAAM,CAACX,gBAAgB,CAAC,4BAA4B,CAAC;AAErEc,EAAAA,OAAO,CAACT,OAAO,CAAER,KAAK,IAAK;IACzB,IAAIF,MAAM,CAACE,KAAK,CAAC;AACnB,GAAC,CAAC;AACJ;;;;"}