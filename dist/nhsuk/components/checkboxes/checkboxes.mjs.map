{"version":3,"file":"checkboxes.mjs","sources":["../../../../src/nhsuk/components/checkboxes/checkboxes.mjs"],"sourcesContent":["import { toggleConditionalInput } from '../../common.mjs'\n\n/**\n * Checkboxes component\n *\n * Conditionally show content when a checkbox button is checked\n * Test at http://localhost:3000/nhsuk-frontend/components/checkboxes/conditional.html\n */\nexport class Checkboxes {\n  /**\n   * @param {Element | null} [$root] - HTML element to use for component\n   */\n  constructor($root) {\n    if (!$root || !($root instanceof HTMLElement)) {\n      return this\n    }\n\n    this.$root = $root\n\n    const $inputs = this.$root.querySelectorAll('.nhsuk-checkboxes__input')\n    if (!$inputs.length) {\n      return this\n    }\n\n    this.$inputs = $inputs\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event in browsers\n    // that support it.\n    if ('onpageshow' in window) {\n      window.addEventListener('pageshow', () =>\n        this.syncAllConditionalReveals()\n      )\n    } else {\n      window.addEventListener('DOMContentLoaded', () =>\n        this.syncAllConditionalReveals()\n      )\n    }\n\n    // Although we've set up handlers to sync state on the pageshow or\n    // DOMContentLoaded event, init could be called after those events have fired,\n    // for example if they are added to the page dynamically, so sync now too.\n    this.syncAllConditionalReveals()\n\n    // Attach handleClick as click to inputs\n    this.$inputs.forEach((checkboxButton) => {\n      checkboxButton.addEventListener('change', this.handleClick.bind(this))\n    })\n  }\n\n  /**\n   * Update all conditional reveals to match checked state\n   */\n  syncAllConditionalReveals() {\n    this.$inputs.forEach((item) =>\n      toggleConditionalInput(item, 'nhsuk-checkboxes__conditional--hidden')\n    )\n  }\n\n  /**\n   * Uncheck other checkboxes\n   *\n   * Find any other checkbox inputs with the checkbox group value, and uncheck them.\n   * This is useful for when a â€œNone of these\" checkbox is checked.\n   */\n  unCheckAllInputsExcept(input) {\n    const allInputsInSameExclusiveGroup = input.form.querySelectorAll(\n      `input[type=\"checkbox\"][data-checkbox-exclusive-group=\"${input.getAttribute('data-checkbox-exclusive-group')}\"]`\n    )\n\n    allInputsInSameExclusiveGroup.forEach((inputWithSameName) => {\n      const hasSameFormOwner = input.form === inputWithSameName.form\n      if (hasSameFormOwner && inputWithSameName !== input) {\n        inputWithSameName.checked = false // eslint-disable-line no-param-reassign\n      }\n    })\n\n    this.syncAllConditionalReveals()\n  }\n\n  /**\n   * Uncheck exclusive inputs\n   *\n   * Find any checkbox inputs with the same checkbox group value and the 'exclusive' behaviour,\n   * and uncheck them. This helps prevent someone checking both a regular checkbox and a\n   * \"None of these\" checkbox in the same fieldset.\n   */\n  unCheckExclusiveInputs(input) {\n    const allExclusiveInputsInSameExclusiveGroup = input.form.querySelectorAll(\n      `input[type=\"checkbox\"][data-checkbox-exclusive][data-checkbox-exclusive-group=\"${input.getAttribute(\n        'data-checkbox-exclusive-group'\n      )}\"]`\n    )\n\n    allExclusiveInputsInSameExclusiveGroup.forEach((exclusiveInput) => {\n      const hasSameFormOwner = input.form === exclusiveInput.form\n      if (hasSameFormOwner) {\n        exclusiveInput.checked = false // eslint-disable-line no-param-reassign\n      }\n    })\n\n    this.syncAllConditionalReveals()\n  }\n\n  /**\n   * Toggle classes and attributes\n   *\n   * @param {MouseEvent} event - Click event\n   */\n  handleClick(event) {\n    // Toggle conditional content based on checked state\n    toggleConditionalInput(\n      event.target,\n      'nhsuk-checkboxes__conditional--hidden'\n    )\n\n    if (!event.target.checked) {\n      return\n    }\n\n    // Handle 'exclusive' checkbox behaviour (ie \"None of these\")\n    if (event.target.hasAttribute('data-checkbox-exclusive')) {\n      this.unCheckAllInputsExcept(event.target)\n    } else {\n      this.unCheckExclusiveInputs(event.target)\n    }\n  }\n}\n\n/**\n * Initialise checkboxes component\n *\n * @param {object} [options]\n * @param {Element | Document | null} [options.scope] - Scope of the document to search within\n */\nexport function initCheckboxes(options = {}) {\n  const $scope = options.scope || document\n  const $checkboxes = $scope.querySelectorAll('.nhsuk-checkboxes')\n\n  $checkboxes.forEach(($root) => {\n    new Checkboxes($root)\n  })\n}\n"],"names":["Checkboxes","constructor","$root","HTMLElement","$inputs","querySelectorAll","length","window","addEventListener","syncAllConditionalReveals","forEach","checkboxButton","handleClick","bind","item","toggleConditionalInput","unCheckAllInputsExcept","input","allInputsInSameExclusiveGroup","form","getAttribute","inputWithSameName","hasSameFormOwner","checked","unCheckExclusiveInputs","allExclusiveInputsInSameExclusiveGroup","exclusiveInput","event","target","hasAttribute","initCheckboxes","options","$scope","scope","document","$checkboxes"],"mappings":"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"}